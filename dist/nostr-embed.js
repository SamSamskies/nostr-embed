/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.nostrEmbed=n():e.nostrEmbed=n()}(this,(()=>(()=>{var e,n,t={187:(e,n)=>{"use strict";function t(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function r(...e){const n=(e,n)=>t=>e(n(t));return{encode:Array.from(e).reverse().reduce(((e,t)=>e?n(e,t.encode):t.encode),void 0),decode:e.reduce(((e,t)=>e?n(e,t.decode):t.decode),void 0)}}function o(e){return{encode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("alphabet.encode input should be an array of numbers");return n.map((n=>{if(t(n),n<0||n>=e.length)throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${e.length})`);return e[n]}))},decode:n=>{if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("alphabet.decode input should be array of strings");return n.map((n=>{if("string"!=typeof n)throw new Error(`alphabet.decode: not string element=${n}`);const t=e.indexOf(n);if(-1===t)throw new Error(`Unknown letter: "${n}". Allowed: ${e}`);return t}))}}}function i(e=""){if("string"!=typeof e)throw new Error("join separator should be string");return{encode:n=>{if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("join.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`join.encode: non-string input=${e}`);return n.join(e)},decode:n=>{if("string"!=typeof n)throw new Error("join.decode input should be string");return n.split(e)}}}function s(e,n="="){if(t(e),"string"!=typeof n)throw new Error("padding chr should be string");return{encode(t){if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("padding.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`padding.encode: non-string input=${e}`);for(;t.length*e%8;)t.push(n);return t},decode(t){if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("padding.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`padding.decode: non-string input=${e}`);let r=t.length;if(r*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;r>0&&t[r-1]===n;r--)if(!((r-1)*e%8))throw new Error("Invalid padding: string has too much padding");return t.slice(0,r)}}}function a(e){if("function"!=typeof e)throw new Error("normalize fn should be function");return{encode:e=>e,decode:n=>e(n)}}function c(e,n,r){if(n<2)throw new Error(`convertRadix: wrong from=${n}, base cannot be less than 2`);if(r<2)throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let o=0;const i=[],s=Array.from(e);for(s.forEach((e=>{if(t(e),e<0||e>=n)throw new Error(`Wrong integer: ${e}`)}));;){let e=0,t=!0;for(let i=o;i<s.length;i++){const a=s[i],c=n*e+a;if(!Number.isSafeInteger(c)||n*e/n!==e||c-a!=n*e)throw new Error("convertRadix: carry overflow");if(e=c%r,s[i]=Math.floor(c/r),!Number.isSafeInteger(s[i])||s[i]*r+e!==c)throw new Error("convertRadix: carry overflow");t&&(s[i]?t=!1:o=i)}if(i.push(e),t)break}for(let n=0;n<e.length-1&&0===e[n];n++)i.push(0);return i.reverse()}Object.defineProperty(n,"__esModule",{value:!0}),n.bytes=n.stringToBytes=n.str=n.bytesToString=n.hex=n.utf8=n.bech32m=n.bech32=n.base58check=n.base58xmr=n.base58xrp=n.base58flickr=n.base58=n.base64url=n.base64=n.base32crockford=n.base32hex=n.base32=n.base16=n.utils=n.assertNumber=void 0,n.assertNumber=t;const l=(e,n)=>n?l(n,e%n):e,h=(e,n)=>e+(n-l(e,n));function d(e,n,r,o){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(n<=0||n>32)throw new Error(`convertRadix2: wrong from=${n}`);if(r<=0||r>32)throw new Error(`convertRadix2: wrong to=${r}`);if(h(n,r)>32)throw new Error(`convertRadix2: carry overflow from=${n} to=${r} carryBits=${h(n,r)}`);let i=0,s=0;const a=2**r-1,c=[];for(const o of e){if(t(o),o>=2**n)throw new Error(`convertRadix2: invalid data word=${o} from=${n}`);if(i=i<<n|o,s+n>32)throw new Error(`convertRadix2: carry overflow pos=${s} from=${n}`);for(s+=n;s>=r;s-=r)c.push((i>>s-r&a)>>>0);i&=2**s-1}if(i=i<<r-s&a,!o&&s>=n)throw new Error("Excess padding");if(!o&&i)throw new Error(`Non-zero padding: ${i}`);return o&&s>0&&c.push(i>>>0),c}function u(e){return t(e),{encode:n=>{if(!(n instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return c(Array.from(n),256,e)},decode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("radix.decode input should be array of strings");return Uint8Array.from(c(n,e,256))}}}function f(e,n=!1){if(t(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(h(8,e)>32||h(e,8)>32)throw new Error("radix2: carry overflow");return{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return d(Array.from(t),8,e,!n)},decode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(d(t,e,8,n))}}}function p(e){if("function"!=typeof e)throw new Error("unsafeWrapper fn should be function");return function(...n){try{return e.apply(null,n)}catch(e){}}}function y(e,n){if(t(e),"function"!=typeof n)throw new Error("checksum fn should be function");return{encode(t){if(!(t instanceof Uint8Array))throw new Error("checksum.encode: input should be Uint8Array");const r=n(t).slice(0,e),o=new Uint8Array(t.length+e);return o.set(t),o.set(r,t.length),o},decode(t){if(!(t instanceof Uint8Array))throw new Error("checksum.decode: input should be Uint8Array");const r=t.slice(0,-e),o=n(r).slice(0,e),i=t.slice(-e);for(let n=0;n<e;n++)if(o[n]!==i[n])throw new Error("Invalid checksum");return r}}}n.utils={alphabet:o,chain:r,checksum:y,radix:u,radix2:f,join:i,padding:s},n.base16=r(f(4),o("0123456789ABCDEF"),i("")),n.base32=r(f(5),o("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),s(5),i("")),n.base32hex=r(f(5),o("0123456789ABCDEFGHIJKLMNOPQRSTUV"),s(5),i("")),n.base32crockford=r(f(5),o("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),i(""),a((e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")))),n.base64=r(f(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),s(6),i("")),n.base64url=r(f(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),s(6),i(""));const A=e=>r(u(58),o(e),i(""));n.base58=A("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),n.base58flickr=A("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),n.base58xrp=A("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");const w=[0,2,3,5,6,7,9,10,11];n.base58xmr={encode(e){let t="";for(let r=0;r<e.length;r+=8){const o=e.subarray(r,r+8);t+=n.base58.encode(o).padStart(w[o.length],"1")}return t},decode(e){let t=[];for(let r=0;r<e.length;r+=11){const o=e.slice(r,r+11),i=w.indexOf(o.length),s=n.base58.decode(o);for(let e=0;e<s.length-i;e++)if(0!==s[e])throw new Error("base58xmr: wrong padding");t=t.concat(Array.from(s.slice(s.length-i)))}return Uint8Array.from(t)}};n.base58check=e=>r(y(4,(n=>e(e(n)))),n.base58);const g=r(o("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),i("")),b=[996825010,642813549,513874426,1027748829,705979059];function m(e){const n=e>>25;let t=(33554431&e)<<5;for(let e=0;e<b.length;e++)1==(n>>e&1)&&(t^=b[e]);return t}function v(e,n,t=1){const r=e.length;let o=1;for(let n=0;n<r;n++){const t=e.charCodeAt(n);if(t<33||t>126)throw new Error(`Invalid prefix (${e})`);o=m(o)^t>>5}o=m(o);for(let n=0;n<r;n++)o=m(o)^31&e.charCodeAt(n);for(let e of n)o=m(o)^e;for(let e=0;e<6;e++)o=m(o);return o^=t,g.encode(d([o%2**30],30,5,!1))}function x(e){const n="bech32"===e?1:734539939,t=f(5),r=t.decode,o=t.encode,i=p(r);function s(e,t=90){if("string"!=typeof e)throw new Error("bech32.decode input should be string, not "+typeof e);if(e.length<8||!1!==t&&e.length>t)throw new TypeError(`Wrong string length: ${e.length} (${e}). Expected (8..${t})`);const r=e.toLowerCase();if(e!==r&&e!==e.toUpperCase())throw new Error("String must be lowercase or uppercase");const o=(e=r).lastIndexOf("1");if(0===o||-1===o)throw new Error('Letter "1" must be present between prefix and data only');const i=e.slice(0,o),s=e.slice(o+1);if(s.length<6)throw new Error("Data must be at least 6 characters long");const a=g.decode(s).slice(0,-6),c=v(i,a,n);if(!s.endsWith(c))throw new Error(`Invalid checksum in ${e}: expected "${c}"`);return{prefix:i,words:a}}return{encode:function(e,t,r=90){if("string"!=typeof e)throw new Error("bech32.encode prefix should be string, not "+typeof e);if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("bech32.encode words should be array of numbers, not "+typeof t);const o=e.length+7+t.length;if(!1!==r&&o>r)throw new TypeError(`Length ${o} exceeds limit ${r}`);return`${e=e.toLowerCase()}1${g.encode(t)}${v(e,t,n)}`},decode:s,decodeToBytes:function(e){const{prefix:n,words:t}=s(e,!1);return{prefix:n,words:t,bytes:r(t)}},decodeUnsafe:p(s),fromWords:r,fromWordsUnsafe:i,toWords:o}}n.bech32=x("bech32"),n.bech32m=x("bech32m"),n.utf8={encode:e=>(new TextDecoder).decode(e),decode:e=>(new TextEncoder).encode(e)},n.hex=r(f(4),o("0123456789abcdef"),i(""),a((e=>{if("string"!=typeof e||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})));const _={utf8:n.utf8,hex:n.hex,base16:n.base16,base32:n.base32,base64:n.base64,base64url:n.base64url,base58:n.base58,base58xmr:n.base58xmr},B=`Invalid encoding type. Available types: ${Object.keys(_).join(", ")}`;n.bytesToString=(e,n)=>{if("string"!=typeof e||!_.hasOwnProperty(e))throw new TypeError(B);if(!(n instanceof Uint8Array))throw new TypeError("bytesToString() expects Uint8Array");return _[e].encode(n)},n.str=n.bytesToString;n.stringToBytes=(e,n)=>{if(!_.hasOwnProperty(e))throw new TypeError(B);if("string"!=typeof n)throw new TypeError("stringToBytes() expects string");return _[e].decode(n)},n.bytes=n.stringToBytes},286:(e,n,t)=>{"use strict";n.Z1=n._I=n.OF=void 0;const r=t(819),o=t(705),i=t(662),s=t(14),a=t(443),c=t(187),l=e=>"あいこくしん"===e[0];function h(e){if("string"!=typeof e)throw new TypeError("Invalid mnemonic type: "+typeof e);return e.normalize("NFKD")}function d(e){const n=h(e),t=n.split(" ");if(![12,15,18,21,24].includes(t.length))throw new Error("Invalid mnemonic");return{nfkd:n,words:t}}function u(e){r.default.bytes(e,16,20,24,28,32)}n.OF=function(e,n=128){if(r.default.number(n),n%32!=0||n>256)throw new TypeError("Invalid entropy");return A((0,a.randomBytes)(n/8),e)};const f=e=>{const n=8-e.length/4;return new Uint8Array([(0,i.sha256)(e)[0]>>n<<n])};function p(e){if(!Array.isArray(e)||2048!==e.length||"string"!=typeof e[0])throw new Error("Worlist: expected array of 2048 strings");return e.forEach((e=>{if("string"!=typeof e)throw new Error(`Wordlist: non-string element: ${e}`)})),c.utils.chain(c.utils.checksum(1,f),c.utils.radix2(11,!0),c.utils.alphabet(e))}function y(e,n){const{words:t}=d(e),r=p(n).decode(t);return u(r),r}function A(e,n){u(e);return p(n).encode(e).join(l(n)?"　":" ")}n._I=function(e,n){try{y(e,n)}catch(e){return!1}return!0};const w=e=>h(`mnemonic${e}`);n.Z1=function(e,n=""){return(0,o.pbkdf2)(s.sha512,d(e).nfkd,w(n),{c:2048,dkLen:64})}},819:(e,n)=>{"use strict";function t(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function r(e){if("boolean"!=typeof e)throw new Error(`Expected boolean, not ${e}`)}function o(e,...n){if(!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(n.length>0&&!n.includes(e.length))throw new TypeError(`Expected Uint8Array of length ${n}, not of length=${e.length}`)}function i(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");t(e.outputLen),t(e.blockLen)}function s(e,n=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(n&&e.finished)throw new Error("Hash#digest() has already been called")}function a(e,n){o(e);const t=n.outputLen;if(e.length<t)throw new Error(`digestInto() expects output buffer of length at least ${t}`)}Object.defineProperty(n,"__esModule",{value:!0}),n.output=n.exists=n.hash=n.bytes=n.bool=n.number=void 0,n.number=t,n.bool=r,n.bytes=o,n.hash=i,n.exists=s,n.output=a;const c={number:t,bool:r,bytes:o,hash:i,exists:s,output:a};n.default=c},464:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SHA2=void 0;const r=t(819),o=t(443);class i extends o.Hash{constructor(e,n,t,r){super(),this.blockLen=e,this.outputLen=n,this.padOffset=t,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=(0,o.createView)(this.buffer)}update(e){r.default.exists(this);const{view:n,buffer:t,blockLen:i}=this,s=(e=(0,o.toBytes)(e)).length;for(let r=0;r<s;){const a=Math.min(i-this.pos,s-r);if(a!==i)t.set(e.subarray(r,r+a),this.pos),this.pos+=a,r+=a,this.pos===i&&(this.process(n,0),this.pos=0);else{const n=(0,o.createView)(e);for(;i<=s-r;r+=i)this.process(n,r)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){r.default.exists(this),r.default.output(e,this),this.finished=!0;const{buffer:n,view:t,blockLen:i,isLE:s}=this;let{pos:a}=this;n[a++]=128,this.buffer.subarray(a).fill(0),this.padOffset>i-a&&(this.process(t,0),a=0);for(let e=a;e<i;e++)n[e]=0;!function(e,n,t,r){if("function"==typeof e.setBigUint64)return e.setBigUint64(n,t,r);const o=BigInt(32),i=BigInt(4294967295),s=Number(t>>o&i),a=Number(t&i),c=r?4:0,l=r?0:4;e.setUint32(n+c,s,r),e.setUint32(n+l,a,r)}(t,i-8,BigInt(8*this.length),s),this.process(t,0);const c=(0,o.createView)(e),l=this.outputLen;if(l%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const h=l/4,d=this.get();if(h>d.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<h;e++)c.setUint32(4*e,d[e],s)}digest(){const{buffer:e,outputLen:n}=this;this.digestInto(e);const t=e.slice(0,n);return this.destroy(),t}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:n,buffer:t,length:r,finished:o,destroyed:i,pos:s}=this;return e.length=r,e.pos=s,e.finished=o,e.destroyed=i,r%n&&e.buffer.set(t),e}}n.SHA2=i},905:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.add=n.toBig=n.split=n.fromBig=void 0;const t=BigInt(2**32-1),r=BigInt(32);function o(e,n=!1){return n?{h:Number(e&t),l:Number(e>>r&t)}:{h:0|Number(e>>r&t),l:0|Number(e&t)}}function i(e,n=!1){let t=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let i=0;i<e.length;i++){const{h:s,l:a}=o(e[i],n);[t[i],r[i]]=[s,a]}return[t,r]}n.fromBig=o,n.split=i;n.toBig=(e,n)=>BigInt(e>>>0)<<r|BigInt(n>>>0);function s(e,n,t,r){const o=(n>>>0)+(r>>>0);return{h:e+t+(o/2**32|0)|0,l:0|o}}n.add=s;const a={fromBig:o,split:i,toBig:n.toBig,shrSH:(e,n,t)=>e>>>t,shrSL:(e,n,t)=>e<<32-t|n>>>t,rotrSH:(e,n,t)=>e>>>t|n<<32-t,rotrSL:(e,n,t)=>e<<32-t|n>>>t,rotrBH:(e,n,t)=>e<<64-t|n>>>t-32,rotrBL:(e,n,t)=>e>>>t-32|n<<64-t,rotr32H:(e,n)=>n,rotr32L:(e,n)=>e,rotlSH:(e,n,t)=>e<<t|n>>>32-t,rotlSL:(e,n,t)=>n<<t|e>>>32-t,rotlBH:(e,n,t)=>n<<t-32|e>>>64-t,rotlBL:(e,n,t)=>e<<t-32|n>>>64-t,add:s,add3L:(e,n,t)=>(e>>>0)+(n>>>0)+(t>>>0),add3H:(e,n,t,r)=>n+t+r+(e/2**32|0)|0,add4L:(e,n,t,r)=>(e>>>0)+(n>>>0)+(t>>>0)+(r>>>0),add4H:(e,n,t,r,o)=>n+t+r+o+(e/2**32|0)|0,add5H:(e,n,t,r,o,i)=>n+t+r+o+i+(e/2**32|0)|0,add5L:(e,n,t,r,o)=>(e>>>0)+(n>>>0)+(t>>>0)+(r>>>0)+(o>>>0)};n.default=a},939:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.crypto=void 0,n.crypto={node:void 0,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0}},116:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.hmac=void 0;const r=t(819),o=t(443);class i extends o.Hash{constructor(e,n){super(),this.finished=!1,this.destroyed=!1,r.default.hash(e);const t=(0,o.toBytes)(n);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new TypeError("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const i=this.blockLen,s=new Uint8Array(i);s.set(t.length>i?e.create().update(t).digest():t);for(let e=0;e<s.length;e++)s[e]^=54;this.iHash.update(s),this.oHash=e.create();for(let e=0;e<s.length;e++)s[e]^=106;this.oHash.update(s),s.fill(0)}update(e){return r.default.exists(this),this.iHash.update(e),this}digestInto(e){r.default.exists(this),r.default.bytes(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:n,iHash:t,finished:r,destroyed:o,blockLen:i,outputLen:s}=this;return e.finished=r,e.destroyed=o,e.blockLen=i,e.outputLen=s,e.oHash=n._cloneInto(e.oHash),e.iHash=t._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}n.hmac=(e,n,t)=>new i(e,n).update(t).digest(),n.hmac.create=(e,n)=>new i(e,n)},705:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.pbkdf2Async=n.pbkdf2=void 0;const r=t(819),o=t(116),i=t(443);function s(e,n,t,s){r.default.hash(e);const a=(0,i.checkOpts)({dkLen:32,asyncTick:10},s),{c,dkLen:l,asyncTick:h}=a;if(r.default.number(c),r.default.number(l),r.default.number(h),c<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const d=(0,i.toBytes)(n),u=(0,i.toBytes)(t),f=new Uint8Array(l),p=o.hmac.create(e,d),y=p._cloneInto().update(u);return{c,dkLen:l,asyncTick:h,DK:f,PRF:p,PRFSalt:y}}function a(e,n,t,r,o){return e.destroy(),n.destroy(),r&&r.destroy(),o.fill(0),t}n.pbkdf2=function(e,n,t,r){const{c:o,dkLen:c,DK:l,PRF:h,PRFSalt:d}=s(e,n,t,r);let u;const f=new Uint8Array(4),p=(0,i.createView)(f),y=new Uint8Array(h.outputLen);for(let e=1,n=0;n<c;e++,n+=h.outputLen){const t=l.subarray(n,n+h.outputLen);p.setInt32(0,e,!1),(u=d._cloneInto(u)).update(f).digestInto(y),t.set(y.subarray(0,t.length));for(let e=1;e<o;e++){h._cloneInto(u).update(y).digestInto(y);for(let e=0;e<t.length;e++)t[e]^=y[e]}}return a(h,d,l,u,y)},n.pbkdf2Async=async function(e,n,t,r){const{c:o,dkLen:c,asyncTick:l,DK:h,PRF:d,PRFSalt:u}=s(e,n,t,r);let f;const p=new Uint8Array(4),y=(0,i.createView)(p),A=new Uint8Array(d.outputLen);for(let e=1,n=0;n<c;e++,n+=d.outputLen){const t=h.subarray(n,n+d.outputLen);y.setInt32(0,e,!1),(f=u._cloneInto(f)).update(p).digestInto(A),t.set(A.subarray(0,t.length)),await(0,i.asyncLoop)(o-1,l,(e=>{d._cloneInto(f).update(A).digestInto(A);for(let e=0;e<t.length;e++)t[e]^=A[e]}))}return a(d,u,h,f,A)}},662:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sha224=n.sha256=void 0;const r=t(464),o=t(443),i=(e,n,t)=>e&n^e&t^n&t,s=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),a=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),c=new Uint32Array(64);class l extends r.SHA2{constructor(){super(64,32,8,!1),this.A=0|a[0],this.B=0|a[1],this.C=0|a[2],this.D=0|a[3],this.E=0|a[4],this.F=0|a[5],this.G=0|a[6],this.H=0|a[7]}get(){const{A:e,B:n,C:t,D:r,E:o,F:i,G:s,H:a}=this;return[e,n,t,r,o,i,s,a]}set(e,n,t,r,o,i,s,a){this.A=0|e,this.B=0|n,this.C=0|t,this.D=0|r,this.E=0|o,this.F=0|i,this.G=0|s,this.H=0|a}process(e,n){for(let t=0;t<16;t++,n+=4)c[t]=e.getUint32(n,!1);for(let e=16;e<64;e++){const n=c[e-15],t=c[e-2],r=(0,o.rotr)(n,7)^(0,o.rotr)(n,18)^n>>>3,i=(0,o.rotr)(t,17)^(0,o.rotr)(t,19)^t>>>10;c[e]=i+c[e-7]+r+c[e-16]|0}let{A:t,B:r,C:a,D:l,E:h,F:d,G:u,H:f}=this;for(let e=0;e<64;e++){const n=f+((0,o.rotr)(h,6)^(0,o.rotr)(h,11)^(0,o.rotr)(h,25))+((p=h)&d^~p&u)+s[e]+c[e]|0,y=((0,o.rotr)(t,2)^(0,o.rotr)(t,13)^(0,o.rotr)(t,22))+i(t,r,a)|0;f=u,u=d,d=h,h=l+n|0,l=a,a=r,r=t,t=n+y|0}var p;t=t+this.A|0,r=r+this.B|0,a=a+this.C|0,l=l+this.D|0,h=h+this.E|0,d=d+this.F|0,u=u+this.G|0,f=f+this.H|0,this.set(t,r,a,l,h,d,u,f)}roundClean(){c.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}class h extends l{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}n.sha256=(0,o.wrapConstructor)((()=>new l)),n.sha224=(0,o.wrapConstructor)((()=>new h))},14:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sha384=n.sha512_256=n.sha512_224=n.sha512=n.SHA512=void 0;const r=t(464),o=t(905),i=t(443),[s,a]=o.default.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((e=>BigInt(e)))),c=new Uint32Array(80),l=new Uint32Array(80);class h extends r.SHA2{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:n,Bh:t,Bl:r,Ch:o,Cl:i,Dh:s,Dl:a,Eh:c,El:l,Fh:h,Fl:d,Gh:u,Gl:f,Hh:p,Hl:y}=this;return[e,n,t,r,o,i,s,a,c,l,h,d,u,f,p,y]}set(e,n,t,r,o,i,s,a,c,l,h,d,u,f,p,y){this.Ah=0|e,this.Al=0|n,this.Bh=0|t,this.Bl=0|r,this.Ch=0|o,this.Cl=0|i,this.Dh=0|s,this.Dl=0|a,this.Eh=0|c,this.El=0|l,this.Fh=0|h,this.Fl=0|d,this.Gh=0|u,this.Gl=0|f,this.Hh=0|p,this.Hl=0|y}process(e,n){for(let t=0;t<16;t++,n+=4)c[t]=e.getUint32(n),l[t]=e.getUint32(n+=4);for(let e=16;e<80;e++){const n=0|c[e-15],t=0|l[e-15],r=o.default.rotrSH(n,t,1)^o.default.rotrSH(n,t,8)^o.default.shrSH(n,t,7),i=o.default.rotrSL(n,t,1)^o.default.rotrSL(n,t,8)^o.default.shrSL(n,t,7),s=0|c[e-2],a=0|l[e-2],h=o.default.rotrSH(s,a,19)^o.default.rotrBH(s,a,61)^o.default.shrSH(s,a,6),d=o.default.rotrSL(s,a,19)^o.default.rotrBL(s,a,61)^o.default.shrSL(s,a,6),u=o.default.add4L(i,d,l[e-7],l[e-16]),f=o.default.add4H(u,r,h,c[e-7],c[e-16]);c[e]=0|f,l[e]=0|u}let{Ah:t,Al:r,Bh:i,Bl:h,Ch:d,Cl:u,Dh:f,Dl:p,Eh:y,El:A,Fh:w,Fl:g,Gh:b,Gl:m,Hh:v,Hl:x}=this;for(let e=0;e<80;e++){const n=o.default.rotrSH(y,A,14)^o.default.rotrSH(y,A,18)^o.default.rotrBH(y,A,41),_=o.default.rotrSL(y,A,14)^o.default.rotrSL(y,A,18)^o.default.rotrBL(y,A,41),B=y&w^~y&b,C=A&g^~A&m,E=o.default.add5L(x,_,C,a[e],l[e]),k=o.default.add5H(E,v,n,B,s[e],c[e]),H=0|E,S=o.default.rotrSH(t,r,28)^o.default.rotrBH(t,r,34)^o.default.rotrBH(t,r,39),I=o.default.rotrSL(t,r,28)^o.default.rotrBL(t,r,34)^o.default.rotrBL(t,r,39),U=t&i^t&d^i&d,L=r&h^r&u^h&u;v=0|b,x=0|m,b=0|w,m=0|g,w=0|y,g=0|A,({h:y,l:A}=o.default.add(0|f,0|p,0|k,0|H)),f=0|d,p=0|u,d=0|i,u=0|h,i=0|t,h=0|r;const T=o.default.add3L(H,I,L);t=o.default.add3H(T,k,S,U),r=0|T}({h:t,l:r}=o.default.add(0|this.Ah,0|this.Al,0|t,0|r)),({h:i,l:h}=o.default.add(0|this.Bh,0|this.Bl,0|i,0|h)),({h:d,l:u}=o.default.add(0|this.Ch,0|this.Cl,0|d,0|u)),({h:f,l:p}=o.default.add(0|this.Dh,0|this.Dl,0|f,0|p)),({h:y,l:A}=o.default.add(0|this.Eh,0|this.El,0|y,0|A)),({h:w,l:g}=o.default.add(0|this.Fh,0|this.Fl,0|w,0|g)),({h:b,l:m}=o.default.add(0|this.Gh,0|this.Gl,0|b,0|m)),({h:v,l:x}=o.default.add(0|this.Hh,0|this.Hl,0|v,0|x)),this.set(t,r,i,h,d,u,f,p,y,A,w,g,b,m,v,x)}roundClean(){c.fill(0),l.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}n.SHA512=h;class d extends h{constructor(){super(),this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}class u extends h{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class f extends h{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}n.sha512=(0,i.wrapConstructor)((()=>new h)),n.sha512_224=(0,i.wrapConstructor)((()=>new d)),n.sha512_256=(0,i.wrapConstructor)((()=>new u)),n.sha384=(0,i.wrapConstructor)((()=>new f))},443:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.randomBytes=n.wrapConstructorWithOpts=n.wrapConstructor=n.checkOpts=n.Hash=n.concatBytes=n.toBytes=n.utf8ToBytes=n.asyncLoop=n.nextTick=n.hexToBytes=n.bytesToHex=n.isLE=n.rotr=n.createView=n.u32=n.u8=void 0;const r=t(939);n.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength);n.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4));n.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength);if(n.rotr=(e,n)=>e<<32-n|e>>>n,n.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!n.isLE)throw new Error("Non little-endian hardware is not supported");const o=Array.from({length:256},((e,n)=>n.toString(16).padStart(2,"0")));n.bytesToHex=function(e){if(!(e instanceof Uint8Array))throw new Error("Uint8Array expected");let n="";for(let t=0;t<e.length;t++)n+=o[e[t]];return n},n.hexToBytes=function(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const n=new Uint8Array(e.length/2);for(let t=0;t<n.length;t++){const r=2*t,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");n[t]=i}return n};function i(e){if("string"!=typeof e)throw new TypeError("utf8ToBytes expected string, got "+typeof e);return(new TextEncoder).encode(e)}function s(e){if("string"==typeof e&&(e=i(e)),!(e instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);return e}n.nextTick=async()=>{},n.asyncLoop=async function(e,t,r){let o=Date.now();for(let i=0;i<e;i++){r(i);const e=Date.now()-o;e>=0&&e<t||(await(0,n.nextTick)(),o+=e)}},n.utf8ToBytes=i,n.toBytes=s,n.concatBytes=function(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const n=e.reduce(((e,n)=>e+n.length),0),t=new Uint8Array(n);for(let n=0,r=0;n<e.length;n++){const o=e[n];t.set(o,r),r+=o.length}return t};n.Hash=class{clone(){return this._cloneInto()}};const a=e=>"[object Object]"===Object.prototype.toString.call(e)&&e.constructor===Object;n.checkOpts=function(e,n){if(void 0!==n&&("object"!=typeof n||!a(n)))throw new TypeError("Options should be object or undefined");return Object.assign(e,n)},n.wrapConstructor=function(e){const n=n=>e().update(s(n)).digest(),t=e();return n.outputLen=t.outputLen,n.blockLen=t.blockLen,n.create=()=>e(),n},n.wrapConstructorWithOpts=function(e){const n=(n,t)=>e(t).update(s(n)).digest(),t=e({});return n.outputLen=t.outputLen,n.blockLen=t.blockLen,n.create=n=>e(n),n},n.randomBytes=function(e=32){if(r.crypto.web)return r.crypto.web.getRandomValues(new Uint8Array(e));if(r.crypto.node)return new Uint8Array(r.crypto.node.randomBytes(e).buffer);throw new Error("The environment doesn't have randomBytes function")}},83:(e,n)=>{"use strict";n.U=void 0,n.U="abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo".split("\n")},218:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.ne-relative{position:relative}.ne-block{display:block}.ne-flex{display:flex}.ne-hidden{display:none}.ne-h-12{height:3rem}.ne-w-12{width:3rem}.ne-w-5{width:1.25rem}.ne-w-full{width:100%}.ne-max-w-\\[30\\%\\]{max-width:30%}.ne-max-w-full{max-width:100%}.ne-cursor-pointer{cursor:pointer}.ne-flex-row{flex-direction:row}.ne-flex-col{flex-direction:column}.ne-items-center{align-items:center}.ne-justify-between{justify-content:space-between}.ne-gap-1{gap:.25rem}.ne-gap-2{gap:.5rem}.ne-gap-4{gap:1rem}.ne-overflow-hidden{overflow:hidden}.ne-text-ellipsis{text-overflow:ellipsis}.ne-whitespace-nowrap{white-space:nowrap}.ne-rounded-lg{border-radius:.5rem}.ne-border-0{border-width:0}.ne-bg-\\[\\#fcfcfc\\]{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity))}.ne-bg-transparent{background-color:transparent}.ne-p-0{padding:0}.ne-px-4{padding-left:1rem;padding-right:1rem}.ne-py-5{padding-bottom:1.25rem;padding-top:1.25rem}.ne-pb-3{padding-bottom:.75rem}.ne-text-lg{font-size:1.125rem;line-height:1.75rem}.ne-text-gray-400{--tw-text-opacity:1;color:#9ca3af;color:rgb(156 163 175/var(--tw-text-opacity))}.ne-text-gray-900{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.ne-no-underline{text-decoration-line:none}.nostrEmbedCard{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity));border-radius:.5rem;display:flex;flex-direction:column;gap:2rem;max-width:100%;padding:1.25rem 1rem .75rem}@media (min-width:768px){.nostrEmbedCard{max-width:600px}}.nostrEmbedCard{border:1px solid #ddd;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.cardContent{font-size:1.125rem;line-height:1.75rem}.cardProfile{align-items:center;display:flex;flex-direction:row;gap:1rem}.profileImg{border-radius:9999px;height:3rem;width:3rem}.profileDetails{display:flex;flex-direction:column}.profileName{font-size:1.125rem;font-weight:700;line-height:1.75rem}.profilePkey{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyKeyBtn{background-color:transparent;border-width:0;cursor:pointer;display:flex;flex-direction:row;padding:0;position:relative;vertical-align:middle}.copyKeyBtn,.linkCopyBtn{background-color:transparent;border:none}.copyKeyBtn:hover .copyIcon{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.pkey{max-width:30%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width:768px){.pkey{max-width:24rem}}.cardMeta{display:flex;flex-direction:column;gap:.25rem}@media (min-width:768px){.cardMeta{gap:.5rem}}hr{opacity:.3;width:100%}.cardInteractions{display:flex;flex-direction:row;justify-content:space-between}@media (min-width:768px){.cardInteractions{gap:3rem;justify-content:flex-start}}.interactionContainer{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyIcon,.heartIcon,.linkIcon,.replyIcon,.repostIcon{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity));display:block;height:1.25rem;width:1.25rem}.linkCopyBtn{--tw-text-opacity:1;align-items:center;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity));cursor:pointer;display:flex;flex-direction:row;gap:.5rem;position:relative;text-decoration-line:none}.linkCopyBtn:hover,.linkCopyBtn:hover .copyIcon{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.linkCopyBtn:hover .tooltip,.tooltip{--tw-text-opacity:1;color:#9ca3af;color:rgb(156 163 175/var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem}.tooltip{display:none}@media (min-width:768px){.tooltip{display:flex;visibility:visible}}.displayText{display:none}@media (min-width:768px){.displayText{display:flex;font-size:.875rem;line-height:1.25rem;visibility:visible}}.copyText{display:none}@media (min-width:768px){.md\\:ne-visible{visibility:visible}.md\\:ne-flex{display:flex}.md\\:ne-max-w-\\[600px\\]{max-width:600px}.md\\:ne-justify-start{justify-content:flex-start}}","",{version:3,sources:["webpack://./src/components/style.css","<no source>"],names:[],mappings:"AAAA,iBAAA,uBAAc,CAAd,uBAAc,CAAd,kBAAc,CAAd,kBAAc,CAAd,aAAc,CAAd,aAAc,CAAd,aAAc,CAAd,cAAc,CAAd,cAAc,CAAd,YAAc,CAAd,YAAc,CAAd,iBAAc,CAAd,qCAAc,CAAd,cAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,iBAAc,CAAd,0BAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,uCAAc,CAAd,gCAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,WAAc,CAAd,iBAAc,CAAd,eAAc,CAAd,gBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,eAAc,CAAd,YAAc,CAAd,kBAAc,CAAd,oBAAc,CAAd,0BAAc,CAAd,wBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,wBAAc,CAAd,qBAAc,CAAd,WAAA,uBAAc,CAAd,uBAAc,CAAd,kBAAc,CAAd,kBAAc,CAAd,aAAc,CAAd,aAAc,CAAd,aAAc,CAAd,cAAc,CAAd,cAAc,CAAd,YAAc,CAAd,YAAc,CAAd,iBAAc,CAAd,qCAAc,CAAd,cAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,iBAAc,CAAd,0BAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,uCAAc,CAAd,gCAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,WAAc,CAAd,iBAAc,CAAd,eAAc,CAAd,gBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,eAAc,CAAd,YAAc,CAAd,kBAAc,CAAd,oBAAc,CAAd,0BAAc,CAAd,wBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,wBAAc,CAAd,qBAAc,CAEd,aAAA,iBAAmB,CAAnB,UAAA,aAAmB,CAAnB,SAAA,YAAmB,CAAnB,WAAA,YAAmB,CAAnB,SAAA,WAAmB,CAAnB,SAAA,UAAmB,CAAnB,QAAA,aAAmB,CAAnB,WAAA,UAAmB,CAAnB,mBAAA,aAAmB,CAAnB,eAAA,cAAmB,CAAnB,mBAAA,cAAmB,CAAnB,aAAA,kBAAmB,CAAnB,aAAA,qBAAmB,CAAnB,iBAAA,kBAAmB,CAAnB,oBAAA,6BAAmB,CAAnB,UAAA,UAAmB,CAAnB,UAAA,SAAmB,CAAnB,UAAA,QAAmB,CAAnB,oBAAA,eAAmB,CAAnB,kBAAA,sBAAmB,CAAnB,sBAAA,kBAAmB,CAAnB,eAAA,mBAAmB,CAAnB,aAAA,cAAmB,CAAnB,oBAAA,iBAAmB,CAAnB,wBAAmB,CAAnB,sDAAmB,CAAnB,mBAAA,4BAAmB,CAAnB,QAAA,SAAmB,CAAnB,SAAA,iBAAmB,CAAnB,kBAAmB,CAAnB,SAAA,sBAAmB,CAAnB,mBAAmB,CAAnB,SAAA,qBAAmB,CAAnB,YAAA,kBAAmB,CAAnB,mBAAmB,CAAnB,kBAAA,mBAAmB,CAAnB,aAAmB,CAAnB,6CAAmB,CAAnB,kBAAA,mBAAmB,CAAnB,aAAmB,CAAnB,0CAAmB,CAAnB,iBAAA,yBAAmB,CAGjB,gBAAA,iBAA2H,CAA3H,wBAA2H,CAA3H,sDAA2H,CAA3H,mBAA2H,CAA3H,YAA2H,CAA3H,qBAA2H,CAA3H,QAA2H,CAA3H,cAA2H,CAA3H,2BAA2H,CAA3H,yBAAA,gBAAA,eAA2H,CAAA,CAC3H,gBACA,qBAAsB,CADtB,iNAAmB,CAKnB,aAAA,kBAAiB,CAAjB,mBAAiB,CAIjB,aAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,QAAmD,CAInD,YAAA,oBAAsC,CAAtC,WAAsC,CAAtC,UAAsC,CAItC,gBAAA,YAA0B,CAA1B,qBAA0B,CAI1B,aAAA,kBAA8B,CAA9B,eAA8B,CAA9B,mBAA8B,CAI9B,aAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,SAAmD,CAInD,YAAA,4BAA6G,CAA7G,cAA6G,CAA7G,cAA6G,CAA7G,YAA6G,CAA7G,kBAA6G,CAA7G,SAA6G,CAA7G,iBAA6G,CAA7G,qBAA6G,CAG/G,yBAGE,4BAA6B,CAD7B,WAEF,CAGE,4BAAA,mBAAuB,CAAvB,aAAuB,CAAvB,0CAAuB,CAIvB,MAAA,aAA6F,CAA7F,eAA6F,CAA7F,sBAA6F,CAA7F,kBAA6F,CAA7F,yBAAA,MAAA,eAA6F,CAAA,CAI7F,UAAA,YAA+C,CAA/C,qBAA+C,CAA/C,UAA+C,CAA/C,yBAAA,UAAA,SAA+C,CAAA,CAI/C,GAAA,UAA8B,CAA9B,UAA8B,CAI9B,kBAAA,YAA8E,CAA9E,kBAA8E,CAA9E,6BAA8E,CAA9E,yBAAA,kBAAA,QAA8E,CAA9E,0BAA8E,CAAA,CAI9E,sBAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,SAAmD,CAQnD,sDAAA,mBAA8C,CAA9C,aAA8C,CAA9C,0CAA8C,CAA9C,aAA8C,CAA9C,cAA8C,CAA9C,aAA8C,CAI9C,aAAA,mBAAkH,CAAlH,kBAAkH,CAAlH,aAAkH,CAAlH,0CAAkH,CAAlH,cAAkH,CAAlH,YAAkH,CAAlH,kBAAkH,CAAlH,SAAkH,CAAlH,iBAAkH,CAAlH,yBAAkH,CAKlH,gDAAA,mBAAuB,CAAvB,aAAuB,CAAvB,0CAAuB,CAKvB,qCAAA,mBAAkC,CAAlC,aAAkC,CAAlC,6CAAkC,CAAlC,iBAAkC,CAAlC,mBAAkC,CAIlC,SAAA,YAAyC,CAAzC,yBAAA,SAAA,YAAyC,CAAzC,kBAAyC,CAAA,CAIzC,aAAA,YAAuD,CAAvD,yBAAA,aAAA,YAAuD,CAAvD,iBAAuD,CAAvD,mBAAuD,CAAvD,kBAAuD,CAAA,CAIvD,UAAA,YAAgB,CAnGlB,yBAAA,gBAAA,mBCAA,ADAA,aAAA,aCAA,ADAA,wBAAA,gBCAA,ADAA,sBAAA,2BCAA,CAAA",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.nostrEmbedCard {\n  @apply ne-px-4 ne-py-5 ne-pb-3 ne-bg-[#fcfcfc] ne-rounded-lg ne-max-w-full md:ne-max-w-[600px] ne-flex ne-flex-col ne-gap-8;\n  @apply ne-font-sans;\n  border: 1px solid #ddd;\n}\n\n.cardContent {\n  @apply ne-text-lg;\n}\n\n.cardProfile {\n  @apply ne-flex ne-flex-row ne-gap-4 ne-items-center;\n}\n\n.profileImg {\n  @apply ne-w-12 ne-h-12 ne-rounded-full;\n}\n\n.profileDetails {\n  @apply ne-flex ne-flex-col;\n}\n\n.profileName {\n  @apply ne-text-lg ne-font-bold;\n}\n\n.profilePkey {\n  @apply ne-flex ne-flex-row ne-gap-2 ne-items-center;\n}\n\n.copyKeyBtn {\n  @apply ne-p-0 ne-border-0 ne-bg-transparent ne-cursor-pointer ne-relative ne-flex ne-flex-row ne-align-middle;\n}\n\n.copyKeyBtn,\n.linkCopyBtn {\n  border: none;\n  background-color: transparent;\n}\n\n.copyKeyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.pkey {\n  @apply ne-overflow-hidden ne-text-ellipsis ne-whitespace-nowrap ne-max-w-[30%] md:ne-max-w-sm;\n}\n\n.cardMeta {\n  @apply ne-flex ne-flex-col ne-gap-1 md:ne-gap-2;\n}\n\nhr {\n  @apply ne-w-full ne-opacity-30;\n}\n\n.cardInteractions {\n  @apply ne-flex ne-flex-row ne-justify-between md:ne-justify-start md:ne-gap-12;\n}\n\n.interactionContainer {\n  @apply ne-flex ne-flex-row ne-items-center ne-gap-2;\n}\n\n.replyIcon,\n.repostIcon,\n.heartIcon,\n.linkIcon,\n.copyIcon {\n  @apply ne-text-gray-900 ne-block ne-w-5 ne-h-5;\n}\n\n.linkCopyBtn {\n  @apply ne-text-gray-900 ne-no-underline ne-flex ne-flex-row ne-items-center ne-gap-2 ne-cursor-pointer ne-relative;\n}\n\n.linkCopyBtn:hover,\n.linkCopyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.tooltip,\n.linkCopyBtn:hover .tooltip {\n  @apply ne-text-gray-400 ne-text-sm;\n}\n\n.tooltip {\n  @apply ne-hidden md:ne-flex md:ne-visible;\n}\n\n.displayText {\n  @apply ne-hidden md:ne-flex md:ne-visible md:ne-text-sm;\n}\n\n.copyText {\n  @apply ne-hidden;\n}\n",null],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var h=[].concat(e[l]);r&&s[h[0]]||(void 0!==i&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=i),t&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=t):h[2]=t),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),n.push(h))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],h=i[l]||0,d="".concat(l," ").concat(h);i[l]=h+1;var u=t(d),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(f);else{var p=o(f,r);r.byIndex=a,n.splice(a,0,{identifier:d,updater:p,references:1})}s.push(d)}return s}function o(e,n){var t=n.domAPI(n);t.update(e);return function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=t(i[s]);n[a].references--}for(var c=r(e,o),l=0;l<i.length;l++){var h=t(i[l]);0===n[h].references&&(n[h].updater(),n.splice(h,1))}i=c}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},856:()=>{}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={id:e,exports:{}};return t[e](i,i.exports,o),i.exports}o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var i=Object.create(null);o.r(i);var s={};e=e||[null,n({}),n([]),n(n)];for(var a=2&r&&t;"object"==typeof a&&!~e.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>t[e]));return s.default=()=>t,o.d(i,s),i},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>No});var e,n,t,r,s,a,c,l={},h=[],d=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function u(e,n){for(var t in n)e[t]=n[t];return e}function f(e){var n=e.parentNode;n&&n.removeChild(e)}function p(n,t,r){var o,i,s,a={};for(s in t)"key"==s?o=t[s]:"ref"==s?i=t[s]:a[s]=t[s];if(arguments.length>2&&(a.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof n&&null!=n.defaultProps)for(s in n.defaultProps)void 0===a[s]&&(a[s]=n.defaultProps[s]);return y(n,a,o,i,null)}function y(e,r,o,i,s){var a={type:e,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++t:s};return null==s&&null!=n.vnode&&n.vnode(a),a}function A(e){return e.children}function w(e,n,t){"-"===n[0]?e.setProperty(n,null==t?"":t):e[n]=null==t?"":"number"!=typeof t||d.test(n)?t:t+"px"}function g(e,n,t,r,o){var i;e:if("style"===n)if("string"==typeof t)e.style.cssText=t;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(n in r)t&&n in t||w(e.style,n,"");if(t)for(n in t)r&&t[n]===r[n]||w(e.style,n,t[n])}else if("o"===n[0]&&"n"===n[1])i=n!==(n=n.replace(/Capture$/,"")),n=n.toLowerCase()in e?n.toLowerCase().slice(2):n.slice(2),e.l||(e.l={}),e.l[n+i]=t,t?r||e.addEventListener(n,i?m:b,i):e.removeEventListener(n,i?m:b,i);else if("dangerouslySetInnerHTML"!==n){if(o)n=n.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==n&&"height"!==n&&"href"!==n&&"list"!==n&&"form"!==n&&"tabIndex"!==n&&"download"!==n&&n in e)try{e[n]=null==t?"":t;break e}catch(e){}"function"==typeof t||(null==t||!1===t&&-1==n.indexOf("-")?e.removeAttribute(n):e.setAttribute(n,t))}}function b(e){r=!0;try{return this.l[e.type+!1](n.event?n.event(e):e)}finally{r=!1}}function m(e){r=!0;try{return this.l[e.type+!0](n.event?n.event(e):e)}finally{r=!1}}function v(e,n){this.props=e,this.context=n}function x(e,n){if(null==n)return e.__?x(e.__,e.__.__k.indexOf(e)+1):null;for(var t;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e)return t.__e;return"function"==typeof e.type?x(e):null}function _(e){var n,t;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,n=0;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e){e.__e=e.__c.base=t.__e;break}return _(e)}}function B(e){r?setTimeout(e):c(e)}function C(e){(!e.__d&&(e.__d=!0)&&s.push(e)&&!E.__r++||a!==n.debounceRendering)&&((a=n.debounceRendering)||B)(E)}function E(){var e,n,t,r,o,i,a,c;for(s.sort((function(e,n){return e.__v.__b-n.__v.__b}));e=s.shift();)e.__d&&(n=s.length,r=void 0,o=void 0,a=(i=(t=e).__v).__e,(c=t.__P)&&(r=[],(o=u({},i)).__v=i.__v+1,U(c,i,o,t.__n,void 0!==c.ownerSVGElement,null!=i.__h?[a]:null,r,null==a?x(i):a,i.__h),L(r,i),i.__e!=a&&_(i)),s.length>n&&s.sort((function(e,n){return e.__v.__b-n.__v.__b})));E.__r=0}function k(e,n,t,r,o,i,s,a,c,d){var u,f,p,w,g,b,m,v=r&&r.__k||h,_=v.length;for(t.__k=[],u=0;u<n.length;u++)if(null!=(w=t.__k[u]=null==(w=n[u])||"boolean"==typeof w?null:"string"==typeof w||"number"==typeof w||"bigint"==typeof w?y(null,w,null,null,w):Array.isArray(w)?y(A,{children:w},null,null,null):w.__b>0?y(w.type,w.props,w.key,w.ref?w.ref:null,w.__v):w)){if(w.__=t,w.__b=t.__b+1,null===(p=v[u])||p&&w.key==p.key&&w.type===p.type)v[u]=void 0;else for(f=0;f<_;f++){if((p=v[f])&&w.key==p.key&&w.type===p.type){v[f]=void 0;break}p=null}U(e,w,p=p||l,o,i,s,a,c,d),g=w.__e,(f=w.ref)&&p.ref!=f&&(m||(m=[]),p.ref&&m.push(p.ref,null,w),m.push(f,w.__c||g,w)),null!=g?(null==b&&(b=g),"function"==typeof w.type&&w.__k===p.__k?w.__d=c=H(w,c,e):c=S(e,w,p,v,g,c),"function"==typeof t.type&&(t.__d=c)):c&&p.__e==c&&c.parentNode!=e&&(c=x(p))}for(t.__e=b,u=_;u--;)null!=v[u]&&("function"==typeof t.type&&null!=v[u].__e&&v[u].__e==t.__d&&(t.__d=I(r).nextSibling),$(v[u],v[u]));if(m)for(u=0;u<m.length;u++)D(m[u],m[++u],m[++u])}function H(e,n,t){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,n="function"==typeof r.type?H(r,n,t):S(t,r,r,o,r.__e,n));return n}function S(e,n,t,r,o,i){var s,a,c;if(void 0!==n.__d)s=n.__d,n.__d=void 0;else if(null==t||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),s=null;else{for(a=i,c=0;(a=a.nextSibling)&&c<r.length;c+=1)if(a==o)break e;e.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function I(e){var n,t,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(n=e.__k.length-1;n>=0;n--)if((t=e.__k[n])&&(r=I(t)))return r;return null}function U(e,t,r,o,i,s,a,c,l){var h,d,f,p,y,w,g,b,m,x,_,B,C,E,H,S=t.type;if(void 0!==t.constructor)return null;null!=r.__h&&(l=r.__h,c=t.__e=r.__e,t.__h=null,s=[c]),(h=n.__b)&&h(t);try{e:if("function"==typeof S){if(b=t.props,m=(h=S.contextType)&&o[h.__c],x=h?m?m.props.value:h.__:o,r.__c?g=(d=t.__c=r.__c).__=d.__E:("prototype"in S&&S.prototype.render?t.__c=d=new S(b,x):(t.__c=d=new v(b,x),d.constructor=S,d.render=j),m&&m.sub(d),d.props=b,d.state||(d.state={}),d.context=x,d.__n=o,f=d.__d=!0,d.__h=[],d._sb=[]),null==d.__s&&(d.__s=d.state),null!=S.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=u({},d.__s)),u(d.__s,S.getDerivedStateFromProps(b,d.__s))),p=d.props,y=d.state,d.__v=t,f)null==S.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(null==S.getDerivedStateFromProps&&b!==p&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(b,x),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(b,d.__s,x)||t.__v===r.__v){for(t.__v!==r.__v&&(d.props=b,d.state=d.__s,d.__d=!1),t.__e=r.__e,t.__k=r.__k,t.__k.forEach((function(e){e&&(e.__=t)})),_=0;_<d._sb.length;_++)d.__h.push(d._sb[_]);d._sb=[],d.__h.length&&a.push(d);break e}null!=d.componentWillUpdate&&d.componentWillUpdate(b,d.__s,x),null!=d.componentDidUpdate&&d.__h.push((function(){d.componentDidUpdate(p,y,w)}))}if(d.context=x,d.props=b,d.__P=e,B=n.__r,C=0,"prototype"in S&&S.prototype.render){for(d.state=d.__s,d.__d=!1,B&&B(t),h=d.render(d.props,d.state,d.context),E=0;E<d._sb.length;E++)d.__h.push(d._sb[E]);d._sb=[]}else do{d.__d=!1,B&&B(t),h=d.render(d.props,d.state,d.context),d.state=d.__s}while(d.__d&&++C<25);d.state=d.__s,null!=d.getChildContext&&(o=u(u({},o),d.getChildContext())),f||null==d.getSnapshotBeforeUpdate||(w=d.getSnapshotBeforeUpdate(p,y)),H=null!=h&&h.type===A&&null==h.key?h.props.children:h,k(e,Array.isArray(H)?H:[H],t,r,o,i,s,a,c,l),d.base=t.__e,t.__h=null,d.__h.length&&a.push(d),g&&(d.__E=d.__=null),d.__e=!1}else null==s&&t.__v===r.__v?(t.__k=r.__k,t.__e=r.__e):t.__e=T(r.__e,t,r,o,i,s,a,l);(h=n.diffed)&&h(t)}catch(e){t.__v=null,(l||null!=s)&&(t.__e=c,t.__h=!!l,s[s.indexOf(c)]=null),n.__e(e,t,r)}}function L(e,t){n.__c&&n.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){n.__e(e,t.__v)}}))}function T(n,t,r,o,i,s,a,c){var h,d,u,p=r.props,y=t.props,A=t.type,w=0;if("svg"===A&&(i=!0),null!=s)for(;w<s.length;w++)if((h=s[w])&&"setAttribute"in h==!!A&&(A?h.localName===A:3===h.nodeType)){n=h,s[w]=null;break}if(null==n){if(null===A)return document.createTextNode(y);n=i?document.createElementNS("http://www.w3.org/2000/svg",A):document.createElement(A,y.is&&y),s=null,c=!1}if(null===A)p===y||c&&n.data===y||(n.data=y);else{if(s=s&&e.call(n.childNodes),d=(p=r.props||l).dangerouslySetInnerHTML,u=y.dangerouslySetInnerHTML,!c){if(null!=s)for(p={},w=0;w<n.attributes.length;w++)p[n.attributes[w].name]=n.attributes[w].value;(u||d)&&(u&&(d&&u.__html==d.__html||u.__html===n.innerHTML)||(n.innerHTML=u&&u.__html||""))}if(function(e,n,t,r,o){var i;for(i in t)"children"===i||"key"===i||i in n||g(e,i,null,t[i],r);for(i in n)o&&"function"!=typeof n[i]||"children"===i||"key"===i||"value"===i||"checked"===i||t[i]===n[i]||g(e,i,n[i],t[i],r)}(n,y,p,i,c),u)t.__k=[];else if(w=t.props.children,k(n,Array.isArray(w)?w:[w],t,r,o,i&&"foreignObject"!==A,s,a,s?s[0]:r.__k&&x(r,0),c),null!=s)for(w=s.length;w--;)null!=s[w]&&f(s[w]);c||("value"in y&&void 0!==(w=y.value)&&(w!==n.value||"progress"===A&&!w||"option"===A&&w!==p.value)&&g(n,"value",w,p.value,!1),"checked"in y&&void 0!==(w=y.checked)&&w!==n.checked&&g(n,"checked",w,p.checked,!1))}return n}function D(e,t,r){try{"function"==typeof e?e(t):e.current=t}catch(e){n.__e(e,r)}}function $(e,t,r){var o,i;if(n.unmount&&n.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||D(o,null,t)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){n.__e(e,t)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&$(o[i],t,r||"function"!=typeof e.type);r||null==e.__e||f(e.__e),e.__=e.__e=e.__d=void 0}function j(e,n,t){return this.constructor(e,t)}function N(t,r,o){var i,s,a;n.__&&n.__(t,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,a=[],U(r,t=(!i&&o||r).__k=p(A,null,[t]),s||l,l,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?e.call(r.childNodes):null,a,!i&&o?o:s?s.__e:r.firstChild,i),L(a,t)}e=h.slice,n={__e:function(e,n,t,r){for(var o,i,s;n=n.__;)if((o=n.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),s=o.__d),s)return o.__E=o}catch(n){e=n}throw e}},t=0,r=!1,v.prototype.setState=function(e,n){var t;t=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=u({},this.state),"function"==typeof e&&(e=e(u({},t),this.props)),e&&u(t,e),null!=e&&this.__v&&(n&&this._sb.push(n),C(this))},v.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),C(this))},v.prototype.render=A,s=[],c="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,E.__r=0;var P=o(856),O=o.t(P,2);const F=BigInt(0),K=BigInt(1),R=BigInt(2),z=BigInt(3),G=BigInt(8),M=Object.freeze({a:F,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:K,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),q=(e,n)=>(e+n/R)/n,W={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n}=M,t=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-K*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=t,s=BigInt("0x100000000000000000000000000000000"),a=q(i*e,n),c=q(-r*e,n);let l=xe(e-a*t-c*o,n),h=xe(-a*r-c*i,n);const d=l>s,u=h>s;if(d&&(l=n-l),u&&(h=n-h),l>s||h>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:d,k1:l,k2neg:u,k2:h}}},V=32,Y=32,Z=32,J=V+1,Q=2*V+1;function X(e){const{a:n,b:t}=M,r=xe(e*e),o=xe(r*e);return xe(o+n*e+t)}const ee=M.a===F;class ne extends Error{constructor(e){super(e)}}function te(e){if(!(e instanceof re))throw new TypeError("JacobianPoint expected")}class re{constructor(e,n,t){this.x=e,this.y=n,this.z=t}static fromAffine(e){if(!(e instanceof se))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(se.ZERO)?re.ZERO:new re(e.x,e.y,K)}static toAffineBatch(e){const n=function(e,n=M.P){const t=new Array(e.length),r=e.reduce(((e,r,o)=>r===F?e:(t[o]=e,xe(e*r,n))),K),o=Be(r,n);return e.reduceRight(((e,r,o)=>r===F?e:(t[o]=xe(e*t[o],n),xe(e*r,n))),o),t}(e.map((e=>e.z)));return e.map(((e,t)=>e.toAffine(n[t])))}static normalizeZ(e){return re.toAffineBatch(e).map(re.fromAffine)}equals(e){te(e);const{x:n,y:t,z:r}=this,{x:o,y:i,z:s}=e,a=xe(r*r),c=xe(s*s),l=xe(n*c),h=xe(o*a),d=xe(xe(t*s)*c),u=xe(xe(i*r)*a);return l===h&&d===u}negate(){return new re(this.x,xe(-this.y),this.z)}double(){const{x:e,y:n,z:t}=this,r=xe(e*e),o=xe(n*n),i=xe(o*o),s=e+o,a=xe(R*(xe(s*s)-r-i)),c=xe(z*r),l=xe(c*c),h=xe(l-R*a),d=xe(c*(a-h)-G*i),u=xe(R*n*t);return new re(h,d,u)}add(e){te(e);const{x:n,y:t,z:r}=this,{x:o,y:i,z:s}=e;if(o===F||i===F)return this;if(n===F||t===F)return e;const a=xe(r*r),c=xe(s*s),l=xe(n*c),h=xe(o*a),d=xe(xe(t*s)*c),u=xe(xe(i*r)*a),f=xe(h-l),p=xe(u-d);if(f===F)return p===F?this.double():re.ZERO;const y=xe(f*f),A=xe(f*y),w=xe(l*y),g=xe(p*p-A-R*w),b=xe(p*(w-g)-d*A),m=xe(r*s*f);return new re(g,b,m)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const n=re.ZERO;if("bigint"==typeof e&&e===F)return n;let t=ve(e);if(t===K)return this;if(!ee){let e=n,r=this;for(;t>F;)t&K&&(e=e.add(r)),r=r.double(),t>>=K;return e}let{k1neg:r,k1:o,k2neg:i,k2:s}=W.splitScalar(t),a=n,c=n,l=this;for(;o>F||s>F;)o&K&&(a=a.add(l)),s&K&&(c=c.add(l)),l=l.double(),o>>=K,s>>=K;return r&&(a=a.negate()),i&&(c=c.negate()),c=new re(xe(c.x*W.beta),c.y,c.z),a.add(c)}precomputeWindow(e){const n=ee?128/e+1:256/e+1,t=[];let r=this,o=r;for(let i=0;i<n;i++){o=r,t.push(o);for(let n=1;n<2**(e-1);n++)o=o.add(r),t.push(o);r=o.double()}return t}wNAF(e,n){!n&&this.equals(re.BASE)&&(n=se.BASE);const t=n&&n._WINDOW_SIZE||1;if(256%t)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=n&&ie.get(n);r||(r=this.precomputeWindow(t),n&&1!==t&&(r=re.normalizeZ(r),ie.set(n,r)));let o=re.ZERO,i=re.BASE;const s=1+(ee?128/t:256/t),a=2**(t-1),c=BigInt(2**t-1),l=2**t,h=BigInt(t);for(let n=0;n<s;n++){const t=n*a;let s=Number(e&c);e>>=h,s>a&&(s-=l,e+=K);const d=t,u=t+Math.abs(s)-1,f=n%2!=0,p=s<0;0===s?i=i.add(oe(f,r[d])):o=o.add(oe(p,r[u]))}return{p:o,f:i}}multiply(e,n){let t,r,o=ve(e);if(ee){const{k1neg:e,k1:i,k2neg:s,k2:a}=W.splitScalar(o);let{p:c,f:l}=this.wNAF(i,n),{p:h,f:d}=this.wNAF(a,n);c=oe(e,c),h=oe(s,h),h=new re(xe(h.x*W.beta),h.y,h.z),t=c.add(h),r=l.add(d)}else{const{p:e,f:i}=this.wNAF(o,n);t=e,r=i}return re.normalizeZ([t,r])[0]}toAffine(e){const{x:n,y:t,z:r}=this,o=this.equals(re.ZERO);null==e&&(e=o?G:Be(r));const i=e,s=xe(i*i),a=xe(s*i),c=xe(n*s),l=xe(t*a),h=xe(r*i);if(o)return se.ZERO;if(h!==K)throw new Error("invZ was invalid");return new se(c,l)}}function oe(e,n){const t=n.negate();return e?t:n}re.BASE=new re(M.Gx,M.Gy,K),re.ZERO=new re(F,K,F);const ie=new WeakMap;class se{constructor(e,n){this.x=e,this.y=n}_setWindowSize(e){this._WINDOW_SIZE=e,ie.delete(this)}hasEvenY(){return this.y%R===F}static fromCompressedHex(e){const n=32===e.length,t=be(n?e:e.subarray(1));if(!Ie(t))throw new Error("Point is not on curve");let r=function(e){const{P:n}=M,t=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),a=BigInt(88),c=e*e*e%n,l=c*c*e%n,h=_e(l,z)*l%n,d=_e(h,z)*l%n,u=_e(d,R)*c%n,f=_e(u,r)*u%n,p=_e(f,o)*f%n,y=_e(p,s)*p%n,A=_e(y,a)*y%n,w=_e(A,s)*p%n,g=_e(w,z)*l%n,b=_e(g,i)*f%n,m=_e(b,t)*c%n,v=_e(m,R),x=v*v%n;if(x!==e)throw new Error("Cannot find square root");return v}(X(t));const o=(r&K)===K;if(n)o&&(r=xe(-r));else{1==(1&e[0])!==o&&(r=xe(-r))}const i=new se(t,r);return i.assertValidity(),i}static fromUncompressedHex(e){const n=be(e.subarray(1,V+1)),t=be(e.subarray(V+1,2*V+1)),r=new se(n,t);return r.assertValidity(),r}static fromHex(e){const n=me(e),t=n.length,r=n[0];if(t===V)return this.fromCompressedHex(n);if(t===J&&(2===r||3===r))return this.fromCompressedHex(n);if(t===Q&&4===r)return this.fromUncompressedHex(n);throw new Error(`Point.fromHex: received invalid point. Expected 32-${J} compressed bytes or ${Q} uncompressed bytes, not ${t}`)}static fromPrivateKey(e){return se.BASE.multiply(Le(e))}static fromSignature(e,n,t){const{r,s:o}=De(n);if(![0,1,2,3].includes(t))throw new Error("Cannot recover: invalid recovery bit");const i=Ce(me(e)),{n:s}=M,a=2===t||3===t?r+s:r,c=Be(a,s),l=xe(-i*c,s),h=xe(o*c,s),d=1&t?"03":"02",u=se.fromHex(d+pe(a)),f=se.BASE.multiplyAndAddUnsafe(u,l,h);if(!f)throw new Error("Cannot recover signature: point at infinify");return f.assertValidity(),f}toRawBytes(e=!1){return ge(this.toHex(e))}toHex(e=!1){const n=pe(this.x);if(e){return`${this.hasEvenY()?"02":"03"}${n}`}return`04${n}${pe(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:n,y:t}=this;if(!Ie(n)||!Ie(t))throw new Error(e);const r=xe(t*t);if(xe(r-X(n))!==F)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new se(this.x,xe(-this.y))}double(){return re.fromAffine(this).double().toAffine()}add(e){return re.fromAffine(this).add(re.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return re.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,n,t){const r=re.fromAffine(this),o=n===F||n===K||this!==se.BASE?r.multiplyUnsafe(n):r.multiply(n),i=re.fromAffine(e).multiplyUnsafe(t),s=o.add(i);return s.equals(re.ZERO)?void 0:s.toAffine()}}function ae(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function ce(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${ue(e)}`);const n=e[1],t=e.subarray(2,n+2);if(!n||t.length!==n)throw new Error("Invalid signature integer: wrong length");if(0===t[0]&&t[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:be(t),left:e.subarray(n+2)}}se.BASE=new se(M.Gx,M.Gy),se.ZERO=new se(F,F);class le{constructor(e,n){this.r=e,this.s=n,this.assertValidity()}static fromCompact(e){const n=e instanceof Uint8Array,t="Signature.fromCompact";if("string"!=typeof e&&!n)throw new TypeError(`${t}: Expected string or Uint8Array`);const r=n?ue(e):e;if(128!==r.length)throw new Error(`${t}: Expected 64-byte hex`);return new le(we(r.slice(0,64)),we(r.slice(64,128)))}static fromDER(e){const n=e instanceof Uint8Array;if("string"!=typeof e&&!n)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:t,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${ue(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:n,left:t}=ce(e.subarray(2)),{data:r,left:o}=ce(t);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${ue(o)}`);return{r:n,s:r}}(n?e:ge(e));return new le(t,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:n}=this;if(!Se(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Se(n))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=M.n>>K;return this.s>e}normalizeS(){return this.hasHighS()?new le(this.r,xe(-this.s,M.n)):this}toDERRawBytes(){return ge(this.toDERHex())}toDERHex(){const e=ae(Ae(this.s)),n=ae(Ae(this.r)),t=e.length/2,r=n.length/2,o=Ae(t),i=Ae(r);return`30${Ae(r+t+4)}02${i}${n}02${o}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return ge(this.toCompactHex())}toCompactHex(){return pe(this.r)+pe(this.s)}}function he(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const n=e.reduce(((e,n)=>e+n.length),0),t=new Uint8Array(n);for(let n=0,r=0;n<e.length;n++){const o=e[n];t.set(o,r),r+=o.length}return t}const de=Array.from({length:256},((e,n)=>n.toString(16).padStart(2,"0")));function ue(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let n="";for(let t=0;t<e.length;t++)n+=de[e[t]];return n}const fe=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function pe(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(F<=e&&e<fe))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function ye(e){const n=ge(pe(e));if(32!==n.length)throw new Error("Error: expected 32 bytes");return n}function Ae(e){const n=e.toString(16);return 1&n.length?`0${n}`:n}function we(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function ge(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const n=new Uint8Array(e.length/2);for(let t=0;t<n.length;t++){const r=2*t,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");n[t]=i}return n}function be(e){return we(ue(e))}function me(e){return e instanceof Uint8Array?Uint8Array.from(e):ge(e)}function ve(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&Se(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function xe(e,n=M.P){const t=e%n;return t>=F?t:n+t}function _e(e,n){const{P:t}=M;let r=e;for(;n-- >F;)r*=r,r%=t;return r}function Be(e,n=M.P){if(e===F||n<=F)throw new Error(`invert: expected positive integers, got n=${e} mod=${n}`);let t=xe(e,n),r=n,o=F,i=K,s=K,a=F;for(;t!==F;){const e=r/t,n=r%t,c=o-s*e,l=i-a*e;r=t,t=n,o=s,i=a,s=c,a=l}if(r!==K)throw new Error("invert: does not exist");return xe(o,n)}function Ce(e,n=!1){const t=function(e){const n=8*e.length-8*Y,t=be(e);return n>0?t>>BigInt(n):t}(e);if(n)return t;const{n:r}=M;return t>=r?t-r:t}let Ee,ke;class He{constructor(e,n){if(this.hashLen=e,this.qByteLen=n,"number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof n||n<2)throw new Error("qByteLen must be a number");this.v=new Uint8Array(e).fill(1),this.k=new Uint8Array(e).fill(0),this.counter=0}hmac(...e){return en.hmacSha256(this.k,...e)}hmacSync(...e){return ke(this.k,...e)}checkSync(){if("function"!=typeof ke)throw new ne("hmacSha256Sync needs to be set")}incr(){if(this.counter>=1e3)throw new Error("Tried 1,000 k values for sign(), all were invalid");this.counter+=1}async reseed(e=new Uint8Array){this.k=await this.hmac(this.v,Uint8Array.from([0]),e),this.v=await this.hmac(this.v),0!==e.length&&(this.k=await this.hmac(this.v,Uint8Array.from([1]),e),this.v=await this.hmac(this.v))}reseedSync(e=new Uint8Array){this.checkSync(),this.k=this.hmacSync(this.v,Uint8Array.from([0]),e),this.v=this.hmacSync(this.v),0!==e.length&&(this.k=this.hmacSync(this.v,Uint8Array.from([1]),e),this.v=this.hmacSync(this.v))}async generate(){this.incr();let e=0;const n=[];for(;e<this.qByteLen;){this.v=await this.hmac(this.v);const t=this.v.slice();n.push(t),e+=this.v.length}return he(...n)}generateSync(){this.checkSync(),this.incr();let e=0;const n=[];for(;e<this.qByteLen;){this.v=this.hmacSync(this.v);const t=this.v.slice();n.push(t),e+=this.v.length}return he(...n)}}function Se(e){return F<e&&e<M.n}function Ie(e){return F<e&&e<M.P}function Ue(e,n,t,r=!0){const{n:o}=M,i=Ce(e,!0);if(!Se(i))return;const s=Be(i,o),a=se.BASE.multiply(i),c=xe(a.x,o);if(c===F)return;const l=xe(s*xe(n+t*c,o),o);if(l===F)return;let h=new le(c,l),d=(a.x===h.r?0:2)|Number(a.y&K);return r&&h.hasHighS()&&(h=h.normalizeS(),d^=1),{sig:h,recovery:d}}function Le(e){let n;if("bigint"==typeof e)n=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)n=BigInt(e);else if("string"==typeof e){if(e.length!==2*Y)throw new Error("Expected 32 bytes of private key");n=we(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==Y)throw new Error("Expected 32 bytes of private key");n=be(e)}if(!Se(n))throw new Error("Expected private key: 0 < key < n");return n}function Te(e){return e instanceof se?(e.assertValidity(),e):se.fromHex(e)}function De(e){if(e instanceof le)return e.assertValidity(),e;try{return le.fromDER(e)}catch(n){return le.fromCompact(e)}}function $e(e){const n=e instanceof Uint8Array,t="string"==typeof e,r=(n||t)&&e.length;return n?r===J||r===Q:t?r===2*J||r===2*Q:e instanceof se}function je(e,n,t=!1){if($e(e))throw new TypeError("getSharedSecret: first arg must be private key");if(!$e(n))throw new TypeError("getSharedSecret: second arg must be public key");const r=Te(n);return r.assertValidity(),r.multiply(Le(e)).toRawBytes(t)}function Ne(e){return be(e.length>V?e.slice(0,V):e)}function Pe(e){const n=Ne(e),t=xe(n,M.n);return Oe(t<F?n:t)}function Oe(e){return ye(e)}function Fe(e,n,t){if(null==e)throw new Error(`sign: expected valid message hash, not "${e}"`);const r=me(e),o=Le(n),i=[Oe(o),Pe(r)];if(null!=t){!0===t&&(t=en.randomBytes(V));const e=me(t);if(e.length!==V)throw new Error(`sign: Expected ${V} bytes of extra data`);i.push(e)}return{seed:he(...i),m:Ne(r),d:o}}function Ke(e,n){const{sig:t,recovery:r}=e,{der:o,recovered:i}=Object.assign({canonical:!0,der:!0},n),s=o?t.toDERRawBytes():t.toCompactRawBytes();return i?[s,r]:s}const Re={strict:!0};function ze(e){return xe(be(e),M.n)}class Ge{constructor(e,n){this.r=e,this.s=n,this.assertValidity()}static fromHex(e){const n=me(e);if(64!==n.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${n.length}`);const t=be(n.subarray(0,32)),r=be(n.subarray(32,64));return new Ge(t,r)}assertValidity(){const{r:e,s:n}=this;if(!Ie(e)||!Se(n))throw new Error("Invalid signature")}toHex(){return pe(this.r)+pe(this.s)}toRawBytes(){return ge(this.toHex())}}class Me{constructor(e,n,t=en.randomBytes()){if(null==e)throw new TypeError(`sign: Expected valid message, not "${e}"`);this.m=me(e);const{x:r,scalar:o}=this.getScalar(Le(n));if(this.px=r,this.d=o,this.rand=me(t),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(e){const n=se.fromPrivateKey(e),t=n.hasEvenY()?e:M.n-e;return{point:n,scalar:t,x:n.toRawX()}}initNonce(e,n){return ye(e^be(n))}finalizeNonce(e){const n=xe(be(e),M.n);if(n===F)throw new Error("sign: Creation of signature failed. k is zero");const{point:t,x:r,scalar:o}=this.getScalar(n);return{R:t,rx:r,k:o}}finalizeSig(e,n,t,r){return new Ge(e.x,xe(n+t*r,M.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:e,d:n,px:t,rand:r}=this,o=en.taggedHash,i=this.initNonce(n,await o(Qe.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(await o(Qe.nonce,i,t,e)),l=ze(await o(Qe.challenge,a,t,e)),h=this.finalizeSig(s,c,l,n);return await Ve(h,e,t)||this.error(),h}calcSync(){const{m:e,d:n,px:t,rand:r}=this,o=en.taggedHashSync,i=this.initNonce(n,o(Qe.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(o(Qe.nonce,i,t,e)),l=ze(o(Qe.challenge,a,t,e)),h=this.finalizeSig(s,c,l,n);return Ye(h,e,t)||this.error(),h}}function qe(e,n,t){const r=e instanceof Ge,o=r?e:Ge.fromHex(e);return r&&o.assertValidity(),{...o,m:me(n),P:Te(t)}}function We(e,n,t,r){const o=se.BASE.multiplyAndAddUnsafe(n,Le(t),xe(-r,M.n));return!(!o||!o.hasEvenY()||o.x!==e)}async function Ve(e,n,t){try{const{r,s:o,m:i,P:s}=qe(e,n,t),a=ze(await en.taggedHash(Qe.challenge,ye(r),s.toRawX(),i));return We(r,s,o,a)}catch(e){return!1}}function Ye(e,n,t){try{const{r,s:o,m:i,P:s}=qe(e,n,t),a=ze(en.taggedHashSync(Qe.challenge,ye(r),s.toRawX(),i));return We(r,s,o,a)}catch(e){if(e instanceof ne)throw e;return!1}}const Ze={Signature:Ge,getPublicKey:function(e){return se.fromPrivateKey(e).toRawX()},sign:async function(e,n,t){return new Me(e,n,t).calc()},verify:Ve,signSync:function(e,n,t){return new Me(e,n,t).calcSync()},verifySync:Ye};se.BASE._setWindowSize(8);const Je={node:O,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},Qe={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},Xe={},en={bytesToHex:ue,hexToBytes:ge,concatBytes:he,mod:xe,invert:Be,isValidPrivateKey(e){try{return Le(e),!0}catch(e){return!1}},_bigintTo32Bytes:ye,_normalizePrivateKey:Le,hashToPrivateKey:e=>{e=me(e);const n=Y+8;if(e.length<n||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return ye(xe(be(e),M.n-K)+K)},randomBytes:(e=32)=>{if(Je.web)return Je.web.getRandomValues(new Uint8Array(e));if(Je.node){const{randomBytes:n}=Je.node;return Uint8Array.from(n(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>en.hashToPrivateKey(en.randomBytes(Y+8)),precompute(e=8,n=se.BASE){const t=n===se.BASE?n:new se(n.x,n.y);return t._setWindowSize(e),t.multiply(z),t},sha256:async(...e)=>{if(Je.web){const n=await Je.web.subtle.digest("SHA-256",he(...e));return new Uint8Array(n)}if(Je.node){const{createHash:n}=Je.node,t=n("sha256");return e.forEach((e=>t.update(e))),Uint8Array.from(t.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...n)=>{if(Je.web){const t=await Je.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=he(...n),o=await Je.web.subtle.sign("HMAC",t,r);return new Uint8Array(o)}if(Je.node){const{createHmac:t}=Je.node,r=t("sha256",e);return n.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...n)=>{let t=Xe[e];if(void 0===t){const n=await en.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));t=he(n,n),Xe[e]=t}return en.sha256(t,...n)},taggedHashSync:(e,...n)=>{if("function"!=typeof Ee)throw new ne("sha256Sync is undefined, you need to set it");let t=Xe[e];if(void 0===t){const n=Ee(Uint8Array.from(e,(e=>e.charCodeAt(0))));t=he(n,n),Xe[e]=t}return Ee(t,...n)},_JacobianPoint:re};Object.defineProperties(en,{sha256Sync:{configurable:!1,get:()=>Ee,set(e){Ee||(Ee=e)}},hmacSha256Sync:{configurable:!1,get:()=>ke,set(e){ke||(ke=e)}}});const nn={node:void 0,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},tn=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),rn=(e,n)=>e<<32-n|e>>>n;if(!(68===new Uint8Array(new Uint32Array([287454020]).buffer)[0]))throw new Error("Non little-endian hardware is not supported");Array.from({length:256},((e,n)=>n.toString(16).padStart(2,"0")));(()=>{const e="undefined"!=typeof module&&"function"==typeof module.require&&module.require.bind(module);try{if(e){const{setImmediate:n}=e("timers");return()=>new Promise((e=>n(e)))}}catch(e){}})();function on(e){if("string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new TypeError("utf8ToBytes expected string, got "+typeof e);return(new TextEncoder).encode(e)}(e)),!(e instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);return e}function sn(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}class an{clone(){return this._cloneInto()}}class cn extends an{constructor(e,n,t,r){super(),this.blockLen=e,this.outputLen=n,this.padOffset=t,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=tn(this.buffer)}update(e){if(this.destroyed)throw new Error("instance is destroyed");const{view:n,buffer:t,blockLen:r,finished:o}=this;if(o)throw new Error("digest() was already called");const i=(e=on(e)).length;for(let o=0;o<i;){const s=Math.min(r-this.pos,i-o);if(s!==r)t.set(e.subarray(o,o+s),this.pos),this.pos+=s,o+=s,this.pos===r&&(this.process(n,0),this.pos=0);else{const n=tn(e);for(;r<=i-o;o+=r)this.process(n,o)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){if(this.destroyed)throw new Error("instance is destroyed");if(!(e instanceof Uint8Array)||e.length<this.outputLen)throw new Error("_Sha2: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0;const{buffer:n,view:t,blockLen:r,isLE:o}=this;let{pos:i}=this;n[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>r-i&&(this.process(t,0),i=0);for(let e=i;e<r;e++)n[e]=0;!function(e,n,t,r){if("function"==typeof e.setBigUint64)return e.setBigUint64(n,t,r);const o=BigInt(32),i=BigInt(4294967295),s=Number(t>>o&i),a=Number(t&i),c=r?4:0,l=r?0:4;e.setUint32(n+c,s,r),e.setUint32(n+l,a,r)}(t,r-8,BigInt(8*this.length),o),this.process(t,0);const s=tn(e);this.get().forEach(((e,n)=>s.setUint32(4*n,e,o)))}digest(){const{buffer:e,outputLen:n}=this;this.digestInto(e);const t=e.slice(0,n);return this.destroy(),t}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:n,buffer:t,length:r,finished:o,destroyed:i,pos:s}=this;return e.length=r,e.pos=s,e.finished=o,e.destroyed=i,r%n&&e.buffer.set(t),e}}const ln=(e,n,t)=>e&n^~e&t,hn=(e,n,t)=>e&n^e&t^n&t,dn=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),un=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),fn=new Uint32Array(64);class pn extends cn{constructor(){super(64,32,8,!1),this.A=0|un[0],this.B=0|un[1],this.C=0|un[2],this.D=0|un[3],this.E=0|un[4],this.F=0|un[5],this.G=0|un[6],this.H=0|un[7]}get(){const{A:e,B:n,C:t,D:r,E:o,F:i,G:s,H:a}=this;return[e,n,t,r,o,i,s,a]}set(e,n,t,r,o,i,s,a){this.A=0|e,this.B=0|n,this.C=0|t,this.D=0|r,this.E=0|o,this.F=0|i,this.G=0|s,this.H=0|a}process(e,n){for(let t=0;t<16;t++,n+=4)fn[t]=e.getUint32(n,!1);for(let e=16;e<64;e++){const n=fn[e-15],t=fn[e-2],r=rn(n,7)^rn(n,18)^n>>>3,o=rn(t,17)^rn(t,19)^t>>>10;fn[e]=o+fn[e-7]+r+fn[e-16]|0}let{A:t,B:r,C:o,D:i,E:s,F:a,G:c,H:l}=this;for(let e=0;e<64;e++){const n=l+(rn(s,6)^rn(s,11)^rn(s,25))+ln(s,a,c)+dn[e]+fn[e]|0,h=(rn(t,2)^rn(t,13)^rn(t,22))+hn(t,r,o)|0;l=c,c=a,a=s,s=i+n|0,i=o,o=r,r=t,t=n+h|0}t=t+this.A|0,r=r+this.B|0,o=o+this.C|0,i=i+this.D|0,s=s+this.E|0,a=a+this.F|0,c=c+this.G|0,l=l+this.H|0,this.set(t,r,o,i,s,a,c,l)}roundClean(){fn.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const yn=function(e){const n=n=>e().update(on(n)).digest(),t=e();return n.outputLen=t.outputLen,n.blockLen=t.blockLen,n.init=n.create=()=>e(),n}((()=>new pn));function An(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function wn(...e){const n=(e,n)=>t=>e(n(t)),t=Array.from(e).reverse().reduce(((e,t)=>e?n(e,t.encode):t.encode),void 0),r=e.reduce(((e,t)=>e?n(e,t.decode):t.decode),void 0);return{encode:t,decode:r}}function gn(e){return{encode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("alphabet.encode input should be an array of numbers");return n.map((n=>{if(An(n),n<0||n>=e.length)throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${e.length})`);return e[n]}))},decode:n=>{if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("alphabet.decode input should be array of strings");return n.map((n=>{if("string"!=typeof n)throw new Error(`alphabet.decode: not string element=${n}`);const t=e.indexOf(n);if(-1===t)throw new Error(`Unknown letter: "${n}". Allowed: ${e}`);return t}))}}}function bn(e=""){if("string"!=typeof e)throw new Error("join separator should be string");return{encode:n=>{if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("join.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`join.encode: non-string input=${e}`);return n.join(e)},decode:n=>{if("string"!=typeof n)throw new Error("join.decode input should be string");return n.split(e)}}}function mn(e,n="="){if(An(e),"string"!=typeof n)throw new Error("padding chr should be string");return{encode(t){if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("padding.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`padding.encode: non-string input=${e}`);for(;t.length*e%8;)t.push(n);return t},decode(t){if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("padding.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`padding.decode: non-string input=${e}`);let r=t.length;if(r*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;r>0&&t[r-1]===n;r--)if(!((r-1)*e%8))throw new Error("Invalid padding: string has too much padding");return t.slice(0,r)}}}function vn(e){if("function"!=typeof e)throw new Error("normalize fn should be function");return{encode:e=>e,decode:n=>e(n)}}function xn(e,n,t){if(n<2)throw new Error(`convertRadix: wrong from=${n}, base cannot be less than 2`);if(t<2)throw new Error(`convertRadix: wrong to=${t}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let r=0;const o=[],i=Array.from(e);for(i.forEach((e=>{if(An(e),e<0||e>=n)throw new Error(`Wrong integer: ${e}`)}));;){let e=0,s=!0;for(let o=r;o<i.length;o++){const a=i[o],c=n*e+a;if(!Number.isSafeInteger(c)||n*e/n!==e||c-a!=n*e)throw new Error("convertRadix: carry overflow");if(e=c%t,i[o]=Math.floor(c/t),!Number.isSafeInteger(i[o])||i[o]*t+e!==c)throw new Error("convertRadix: carry overflow");s&&(i[o]?s=!1:r=o)}if(o.push(e),s)break}for(let n=0;n<e.length-1&&0===e[n];n++)o.push(0);return o.reverse()}const _n=(e,n)=>n?_n(n,e%n):e,Bn=(e,n)=>e+(n-_n(e,n));function Cn(e,n,t,r){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(n<=0||n>32)throw new Error(`convertRadix2: wrong from=${n}`);if(t<=0||t>32)throw new Error(`convertRadix2: wrong to=${t}`);if(Bn(n,t)>32)throw new Error(`convertRadix2: carry overflow from=${n} to=${t} carryBits=${Bn(n,t)}`);let o=0,i=0;const s=2**t-1,a=[];for(const r of e){if(An(r),r>=2**n)throw new Error(`convertRadix2: invalid data word=${r} from=${n}`);if(o=o<<n|r,i+n>32)throw new Error(`convertRadix2: carry overflow pos=${i} from=${n}`);for(i+=n;i>=t;i-=t)a.push((o>>i-t&s)>>>0);o&=2**i-1}if(o=o<<t-i&s,!r&&i>=n)throw new Error("Excess padding");if(!r&&o)throw new Error(`Non-zero padding: ${o}`);return r&&i>0&&a.push(o>>>0),a}function En(e){return An(e),{encode:n=>{if(!(n instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return xn(Array.from(n),256,e)},decode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("radix.decode input should be array of strings");return Uint8Array.from(xn(n,e,256))}}}function kn(e,n=!1){if(An(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(Bn(8,e)>32||Bn(e,8)>32)throw new Error("radix2: carry overflow");return{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return Cn(Array.from(t),8,e,!n)},decode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(Cn(t,e,8,n))}}}function Hn(e){if("function"!=typeof e)throw new Error("unsafeWrapper fn should be function");return function(...n){try{return e.apply(null,n)}catch(e){}}}function Sn(e,n){if(An(e),"function"!=typeof n)throw new Error("checksum fn should be function");return{encode(t){if(!(t instanceof Uint8Array))throw new Error("checksum.encode: input should be Uint8Array");const r=n(t).slice(0,e),o=new Uint8Array(t.length+e);return o.set(t),o.set(r,t.length),o},decode(t){if(!(t instanceof Uint8Array))throw new Error("checksum.decode: input should be Uint8Array");const r=t.slice(0,-e),o=n(r).slice(0,e),i=t.slice(-e);for(let n=0;n<e;n++)if(o[n]!==i[n])throw new Error("Invalid checksum");return r}}}const In=wn(kn(4),gn("0123456789ABCDEF"),bn("")),Un=wn(kn(5),gn("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),mn(5),bn("")),Ln=(wn(kn(5),gn("0123456789ABCDEFGHIJKLMNOPQRSTUV"),mn(5),bn("")),wn(kn(5),gn("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),bn(""),vn((e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")))),wn(kn(6),gn("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),mn(6),bn(""))),Tn=wn(kn(6),gn("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),mn(6),bn("")),Dn=e=>wn(En(58),gn(e),bn("")),$n=Dn("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),jn=(Dn("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),Dn("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz"),[0,2,3,5,6,7,9,10,11]),Nn={encode(e){let n="";for(let t=0;t<e.length;t+=8){const r=e.subarray(t,t+8);n+=$n.encode(r).padStart(jn[r.length],"1")}return n},decode(e){let n=[];for(let t=0;t<e.length;t+=11){const r=e.slice(t,t+11),o=jn.indexOf(r.length),i=$n.decode(r);for(let e=0;e<i.length-o;e++)if(0!==i[e])throw new Error("base58xmr: wrong padding");n=n.concat(Array.from(i.slice(i.length-o)))}return Uint8Array.from(n)}},Pn=wn(gn("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),bn("")),On=[996825010,642813549,513874426,1027748829,705979059];function Fn(e){const n=e>>25;let t=(33554431&e)<<5;for(let e=0;e<On.length;e++)1==(n>>e&1)&&(t^=On[e]);return t}function Kn(e,n,t=1){const r=e.length;let o=1;for(let n=0;n<r;n++){const t=e.charCodeAt(n);if(t<33||t>126)throw new Error(`Invalid prefix (${e})`);o=Fn(o)^t>>5}o=Fn(o);for(let n=0;n<r;n++)o=Fn(o)^31&e.charCodeAt(n);for(let e of n)o=Fn(o)^e;for(let e=0;e<6;e++)o=Fn(o);return o^=t,Pn.encode(Cn([o%2**30],30,5,!1))}function Rn(e){const n="bech32"===e?1:734539939,t=kn(5),r=t.decode,o=t.encode,i=Hn(r);function s(e,t=90){if("string"!=typeof e)throw new Error("bech32.decode input should be string, not "+typeof e);if(e.length<8||!1!==t&&e.length>t)throw new TypeError(`Wrong string length: ${e.length} (${e}). Expected (8..${t})`);const r=e.toLowerCase();if(e!==r&&e!==e.toUpperCase())throw new Error("String must be lowercase or uppercase");const o=(e=r).lastIndexOf("1");if(0===o||-1===o)throw new Error('Letter "1" must be present between prefix and data only');const i=e.slice(0,o),s=e.slice(o+1);if(s.length<6)throw new Error("Data must be at least 6 characters long");const a=Pn.decode(s).slice(0,-6),c=Kn(i,a,n);if(!s.endsWith(c))throw new Error(`Invalid checksum in ${e}: expected "${c}"`);return{prefix:i,words:a}}return{encode:function(e,t,r=90){if("string"!=typeof e)throw new Error("bech32.encode prefix should be string, not "+typeof e);if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("bech32.encode words should be array of numbers, not "+typeof t);const o=e.length+7+t.length;if(!1!==r&&o>r)throw new TypeError(`Length ${o} exceeds limit ${r}`);return`${e=e.toLowerCase()}1${Pn.encode(t)}${Kn(e,t,n)}`},decode:s,decodeToBytes:function(e){const{prefix:n,words:t}=s(e,!1);return{prefix:n,words:t,bytes:r(t)}},decodeUnsafe:Hn(s),fromWords:r,fromWordsUnsafe:i,toWords:o}}const zn=Rn("bech32"),Gn=(Rn("bech32m"),{encode:e=>(new TextDecoder).decode(e),decode:e=>(new TextEncoder).encode(e)}),Mn=wn(kn(4),gn("0123456789abcdef"),bn(""),vn((e=>{if("string"!=typeof e||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()}))),qn={utf8:Gn,hex:Mn,base16:In,base32:Un,base64:Ln,base64url:Tn,base58:$n,base58xmr:Nn};Object.keys(qn).join(", ");var Wn=o(83),Vn=o(286);function Yn(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function Zn(e,...n){if(!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(n.length>0&&!n.includes(e.length))throw new TypeError(`Expected Uint8Array of length ${n}, not of length=${e.length}`)}const Jn={number:Yn,bool:function(e){if("boolean"!=typeof e)throw new Error(`Expected boolean, not ${e}`)},bytes:Zn,hash:function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");Yn(e.outputLen),Yn(e.blockLen)},exists:function(e,n=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(n&&e.finished)throw new Error("Hash#digest() has already been called")},output:function(e,n){Zn(e);const t=n.outputLen;if(e.length<t)throw new Error(`digestInto() expects output buffer of length at least ${t}`)}},Qn=Jn,Xn=("object"==typeof self&&"crypto"in self&&self.crypto,e=>new DataView(e.buffer,e.byteOffset,e.byteLength)),et=(e,n)=>e<<32-n|e>>>n;if(!(68===new Uint8Array(new Uint32Array([287454020]).buffer)[0]))throw new Error("Non little-endian hardware is not supported");const nt=Array.from({length:256},((e,n)=>n.toString(16).padStart(2,"0")));function tt(e){if("string"!=typeof e)throw new TypeError("utf8ToBytes expected string, got "+typeof e);return(new TextEncoder).encode(e)}function rt(e){if("string"==typeof e&&(e=tt(e)),!(e instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);return e}function ot(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const n=e.reduce(((e,n)=>e+n.length),0),t=new Uint8Array(n);for(let n=0,r=0;n<e.length;n++){const o=e[n];t.set(o,r),r+=o.length}return t}class it{clone(){return this._cloneInto()}}function st(e){const n=n=>e().update(rt(n)).digest(),t=e();return n.outputLen=t.outputLen,n.blockLen=t.blockLen,n.create=()=>e(),n}class at extends it{constructor(e,n){super(),this.finished=!1,this.destroyed=!1,Qn.hash(e);const t=rt(n);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new TypeError("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const r=this.blockLen,o=new Uint8Array(r);o.set(t.length>r?e.create().update(t).digest():t);for(let e=0;e<o.length;e++)o[e]^=54;this.iHash.update(o),this.oHash=e.create();for(let e=0;e<o.length;e++)o[e]^=106;this.oHash.update(o),o.fill(0)}update(e){return Qn.exists(this),this.iHash.update(e),this}digestInto(e){Qn.exists(this),Qn.bytes(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:n,iHash:t,finished:r,destroyed:o,blockLen:i,outputLen:s}=this;return e.finished=r,e.destroyed=o,e.blockLen=i,e.outputLen=s,e.oHash=n._cloneInto(e.oHash),e.iHash=t._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const ct=(e,n,t)=>new at(e,n).update(t).digest();ct.create=(e,n)=>new at(e,n);class lt extends it{constructor(e,n,t,r){super(),this.blockLen=e,this.outputLen=n,this.padOffset=t,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=Xn(this.buffer)}update(e){Qn.exists(this);const{view:n,buffer:t,blockLen:r}=this,o=(e=rt(e)).length;for(let i=0;i<o;){const s=Math.min(r-this.pos,o-i);if(s!==r)t.set(e.subarray(i,i+s),this.pos),this.pos+=s,i+=s,this.pos===r&&(this.process(n,0),this.pos=0);else{const n=Xn(e);for(;r<=o-i;i+=r)this.process(n,i)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){Qn.exists(this),Qn.output(e,this),this.finished=!0;const{buffer:n,view:t,blockLen:r,isLE:o}=this;let{pos:i}=this;n[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>r-i&&(this.process(t,0),i=0);for(let e=i;e<r;e++)n[e]=0;!function(e,n,t,r){if("function"==typeof e.setBigUint64)return e.setBigUint64(n,t,r);const o=BigInt(32),i=BigInt(4294967295),s=Number(t>>o&i),a=Number(t&i),c=r?4:0,l=r?0:4;e.setUint32(n+c,s,r),e.setUint32(n+l,a,r)}(t,r-8,BigInt(8*this.length),o),this.process(t,0);const s=Xn(e),a=this.outputLen;if(a%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const c=a/4,l=this.get();if(c>l.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<c;e++)s.setUint32(4*e,l[e],o)}digest(){const{buffer:e,outputLen:n}=this;this.digestInto(e);const t=e.slice(0,n);return this.destroy(),t}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:n,buffer:t,length:r,finished:o,destroyed:i,pos:s}=this;return e.length=r,e.pos=s,e.finished=o,e.destroyed=i,r%n&&e.buffer.set(t),e}}const ht=new Uint8Array([7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8]),dt=Uint8Array.from({length:16},((e,n)=>n)),ut=dt.map((e=>(9*e+5)%16));let ft=[dt],pt=[ut];for(let e=0;e<4;e++)for(let n of[ft,pt])n.push(n[e].map((e=>ht[e])));const yt=[[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8],[12,13,11,15,6,9,9,7,12,15,11,13,7,8,7,7],[13,15,14,11,7,7,6,8,13,14,13,12,5,5,6,9],[14,11,12,14,8,6,5,5,15,12,15,14,9,9,8,6],[15,12,13,13,9,5,8,6,14,11,12,11,8,6,5,5]].map((e=>new Uint8Array(e))),At=ft.map(((e,n)=>e.map((e=>yt[n][e])))),wt=pt.map(((e,n)=>e.map((e=>yt[n][e])))),gt=new Uint32Array([0,1518500249,1859775393,2400959708,2840853838]),bt=new Uint32Array([1352829926,1548603684,1836072691,2053994217,0]),mt=(e,n)=>e<<n|e>>>32-n;function vt(e,n,t,r){return 0===e?n^t^r:1===e?n&t|~n&r:2===e?(n|~t)^r:3===e?n&r|t&~r:n^(t|~r)}const xt=new Uint32Array(16);class _t extends lt{constructor(){super(64,20,8,!0),this.h0=1732584193,this.h1=-271733879,this.h2=-1732584194,this.h3=271733878,this.h4=-1009589776}get(){const{h0:e,h1:n,h2:t,h3:r,h4:o}=this;return[e,n,t,r,o]}set(e,n,t,r,o){this.h0=0|e,this.h1=0|n,this.h2=0|t,this.h3=0|r,this.h4=0|o}process(e,n){for(let t=0;t<16;t++,n+=4)xt[t]=e.getUint32(n,!0);let t=0|this.h0,r=t,o=0|this.h1,i=o,s=0|this.h2,a=s,c=0|this.h3,l=c,h=0|this.h4,d=h;for(let e=0;e<5;e++){const n=4-e,u=gt[e],f=bt[e],p=ft[e],y=pt[e],A=At[e],w=wt[e];for(let n=0;n<16;n++){const r=mt(t+vt(e,o,s,c)+xt[p[n]]+u,A[n])+h|0;t=h,h=c,c=0|mt(s,10),s=o,o=r}for(let e=0;e<16;e++){const t=mt(r+vt(n,i,a,l)+xt[y[e]]+f,w[e])+d|0;r=d,d=l,l=0|mt(a,10),a=i,i=t}}this.set(this.h1+s+l|0,this.h2+c+d|0,this.h3+h+r|0,this.h4+t+i|0,this.h0+o+a|0)}roundClean(){xt.fill(0)}destroy(){this.destroyed=!0,this.buffer.fill(0),this.set(0,0,0,0,0)}}const Bt=st((()=>new _t)),Ct=(e,n,t)=>e&n^~e&t,Et=(e,n,t)=>e&n^e&t^n&t,kt=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Ht=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),St=new Uint32Array(64);class It extends lt{constructor(){super(64,32,8,!1),this.A=0|Ht[0],this.B=0|Ht[1],this.C=0|Ht[2],this.D=0|Ht[3],this.E=0|Ht[4],this.F=0|Ht[5],this.G=0|Ht[6],this.H=0|Ht[7]}get(){const{A:e,B:n,C:t,D:r,E:o,F:i,G:s,H:a}=this;return[e,n,t,r,o,i,s,a]}set(e,n,t,r,o,i,s,a){this.A=0|e,this.B=0|n,this.C=0|t,this.D=0|r,this.E=0|o,this.F=0|i,this.G=0|s,this.H=0|a}process(e,n){for(let t=0;t<16;t++,n+=4)St[t]=e.getUint32(n,!1);for(let e=16;e<64;e++){const n=St[e-15],t=St[e-2],r=et(n,7)^et(n,18)^n>>>3,o=et(t,17)^et(t,19)^t>>>10;St[e]=o+St[e-7]+r+St[e-16]|0}let{A:t,B:r,C:o,D:i,E:s,F:a,G:c,H:l}=this;for(let e=0;e<64;e++){const n=l+(et(s,6)^et(s,11)^et(s,25))+Ct(s,a,c)+kt[e]+St[e]|0,h=(et(t,2)^et(t,13)^et(t,22))+Et(t,r,o)|0;l=c,c=a,a=s,s=i+n|0,i=o,o=r,r=t,t=n+h|0}t=t+this.A|0,r=r+this.B|0,o=o+this.C|0,i=i+this.D|0,s=s+this.E|0,a=a+this.F|0,c=c+this.G|0,l=l+this.H|0,this.set(t,r,o,i,s,a,c,l)}roundClean(){St.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}class Ut extends It{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}const Lt=st((()=>new It)),Tt=(st((()=>new Ut)),BigInt(2**32-1)),Dt=BigInt(32);function $t(e,n=!1){return n?{h:Number(e&Tt),l:Number(e>>Dt&Tt)}:{h:0|Number(e>>Dt&Tt),l:0|Number(e&Tt)}}const jt={fromBig:$t,split:function(e,n=!1){let t=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let o=0;o<e.length;o++){const{h:i,l:s}=$t(e[o],n);[t[o],r[o]]=[i,s]}return[t,r]},toBig:(e,n)=>BigInt(e>>>0)<<Dt|BigInt(n>>>0),shrSH:(e,n,t)=>e>>>t,shrSL:(e,n,t)=>e<<32-t|n>>>t,rotrSH:(e,n,t)=>e>>>t|n<<32-t,rotrSL:(e,n,t)=>e<<32-t|n>>>t,rotrBH:(e,n,t)=>e<<64-t|n>>>t-32,rotrBL:(e,n,t)=>e>>>t-32|n<<64-t,rotr32H:(e,n)=>n,rotr32L:(e,n)=>e,rotlSH:(e,n,t)=>e<<t|n>>>32-t,rotlSL:(e,n,t)=>n<<t|e>>>32-t,rotlBH:(e,n,t)=>n<<t-32|e>>>64-t,rotlBL:(e,n,t)=>e<<t-32|n>>>64-t,add:function(e,n,t,r){const o=(n>>>0)+(r>>>0);return{h:e+t+(o/2**32|0)|0,l:0|o}},add3L:(e,n,t)=>(e>>>0)+(n>>>0)+(t>>>0),add3H:(e,n,t,r)=>n+t+r+(e/2**32|0)|0,add4L:(e,n,t,r)=>(e>>>0)+(n>>>0)+(t>>>0)+(r>>>0),add4H:(e,n,t,r,o)=>n+t+r+o+(e/2**32|0)|0,add5H:(e,n,t,r,o,i)=>n+t+r+o+i+(e/2**32|0)|0,add5L:(e,n,t,r,o)=>(e>>>0)+(n>>>0)+(t>>>0)+(r>>>0)+(o>>>0)},Nt=jt,[Pt,Ot]=Nt.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((e=>BigInt(e)))),Ft=new Uint32Array(80),Kt=new Uint32Array(80);class Rt extends lt{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:n,Bh:t,Bl:r,Ch:o,Cl:i,Dh:s,Dl:a,Eh:c,El:l,Fh:h,Fl:d,Gh:u,Gl:f,Hh:p,Hl:y}=this;return[e,n,t,r,o,i,s,a,c,l,h,d,u,f,p,y]}set(e,n,t,r,o,i,s,a,c,l,h,d,u,f,p,y){this.Ah=0|e,this.Al=0|n,this.Bh=0|t,this.Bl=0|r,this.Ch=0|o,this.Cl=0|i,this.Dh=0|s,this.Dl=0|a,this.Eh=0|c,this.El=0|l,this.Fh=0|h,this.Fl=0|d,this.Gh=0|u,this.Gl=0|f,this.Hh=0|p,this.Hl=0|y}process(e,n){for(let t=0;t<16;t++,n+=4)Ft[t]=e.getUint32(n),Kt[t]=e.getUint32(n+=4);for(let e=16;e<80;e++){const n=0|Ft[e-15],t=0|Kt[e-15],r=Nt.rotrSH(n,t,1)^Nt.rotrSH(n,t,8)^Nt.shrSH(n,t,7),o=Nt.rotrSL(n,t,1)^Nt.rotrSL(n,t,8)^Nt.shrSL(n,t,7),i=0|Ft[e-2],s=0|Kt[e-2],a=Nt.rotrSH(i,s,19)^Nt.rotrBH(i,s,61)^Nt.shrSH(i,s,6),c=Nt.rotrSL(i,s,19)^Nt.rotrBL(i,s,61)^Nt.shrSL(i,s,6),l=Nt.add4L(o,c,Kt[e-7],Kt[e-16]),h=Nt.add4H(l,r,a,Ft[e-7],Ft[e-16]);Ft[e]=0|h,Kt[e]=0|l}let{Ah:t,Al:r,Bh:o,Bl:i,Ch:s,Cl:a,Dh:c,Dl:l,Eh:h,El:d,Fh:u,Fl:f,Gh:p,Gl:y,Hh:A,Hl:w}=this;for(let e=0;e<80;e++){const n=Nt.rotrSH(h,d,14)^Nt.rotrSH(h,d,18)^Nt.rotrBH(h,d,41),g=Nt.rotrSL(h,d,14)^Nt.rotrSL(h,d,18)^Nt.rotrBL(h,d,41),b=h&u^~h&p,m=d&f^~d&y,v=Nt.add5L(w,g,m,Ot[e],Kt[e]),x=Nt.add5H(v,A,n,b,Pt[e],Ft[e]),_=0|v,B=Nt.rotrSH(t,r,28)^Nt.rotrBH(t,r,34)^Nt.rotrBH(t,r,39),C=Nt.rotrSL(t,r,28)^Nt.rotrBL(t,r,34)^Nt.rotrBL(t,r,39),E=t&o^t&s^o&s,k=r&i^r&a^i&a;A=0|p,w=0|y,p=0|u,y=0|f,u=0|h,f=0|d,({h,l:d}=Nt.add(0|c,0|l,0|x,0|_)),c=0|s,l=0|a,s=0|o,a=0|i,o=0|t,i=0|r;const H=Nt.add3L(_,C,k);t=Nt.add3H(H,x,B,E),r=0|H}({h:t,l:r}=Nt.add(0|this.Ah,0|this.Al,0|t,0|r)),({h:o,l:i}=Nt.add(0|this.Bh,0|this.Bl,0|o,0|i)),({h:s,l:a}=Nt.add(0|this.Ch,0|this.Cl,0|s,0|a)),({h:c,l}=Nt.add(0|this.Dh,0|this.Dl,0|c,0|l)),({h,l:d}=Nt.add(0|this.Eh,0|this.El,0|h,0|d)),({h:u,l:f}=Nt.add(0|this.Fh,0|this.Fl,0|u,0|f)),({h:p,l:y}=Nt.add(0|this.Gh,0|this.Gl,0|p,0|y)),({h:A,l:w}=Nt.add(0|this.Hh,0|this.Hl,0|A,0|w)),this.set(t,r,o,i,s,a,c,l,h,d,u,f,p,y,A,w)}roundClean(){Ft.fill(0),Kt.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}class zt extends Rt{constructor(){super(),this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}class Gt extends Rt{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class Mt extends Rt{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}const qt=st((()=>new Rt));st((()=>new zt)),st((()=>new Gt)),st((()=>new Mt));en.hmacSha256Sync=(e,...n)=>ct(Lt,e,en.concatBytes(...n));const Wt=(e=>wn(Sn(4,(n=>e(e(n)))),$n))(Lt);function Vt(e){return BigInt(`0x${function(e){if(!(e instanceof Uint8Array))throw new Error("Uint8Array expected");let n="";for(let t=0;t<e.length;t++)n+=nt[e[t]];return n}(e)}`)}function Yt(e){return function(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const n=new Uint8Array(e.length/2);for(let t=0;t<n.length;t++){const r=2*t,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");n[t]=i}return n}(e.toString(16).padStart(64,"0"))}const Zt=tt("Bitcoin seed"),Jt={private:76066276,public:76067358},Qt=2147483648,Xt=e=>{if(!Number.isSafeInteger(e)||e<0||e>2**32-1)throw new Error(`Invalid number=${e}. Should be from 0 to 2 ** 32 - 1`);const n=new Uint8Array(4);return Xn(n).setUint32(0,e,!1),n};class er{constructor(e){if(this.depth=0,this.index=0,this.chainCode=null,this.parentFingerprint=0,!e||"object"!=typeof e)throw new Error("HDKey.constructor must not be called directly");if(this.versions=e.versions||Jt,this.depth=e.depth||0,this.chainCode=e.chainCode,this.index=e.index||0,this.parentFingerprint=e.parentFingerprint||0,!this.depth&&(this.parentFingerprint||this.index))throw new Error("HDKey: zero depth with non-zero index/parent fingerprint");if(e.publicKey&&e.privateKey)throw new Error("HDKey: publicKey and privateKey at same time.");if(e.privateKey){if(!en.isValidPrivateKey(e.privateKey))throw new Error("Invalid private key");this.privKey="bigint"==typeof e.privateKey?e.privateKey:Vt(e.privateKey),this.privKeyBytes=Yt(this.privKey),this.pubKey=function(e,n=!1){return se.fromPrivateKey(e).toRawBytes(n)}(e.privateKey,!0)}else{if(!e.publicKey)throw new Error("HDKey: no public or private key provided");this.pubKey=se.fromHex(e.publicKey).toRawBytes(!0)}var n;this.pubHash=(n=this.pubKey,Bt(Lt(n)))}get fingerprint(){if(!this.pubHash)throw new Error("No publicKey set!");return e=this.pubHash,Xn(e).getUint32(0,!1);var e}get identifier(){return this.pubHash}get pubKeyHash(){return this.pubHash}get privateKey(){return this.privKeyBytes||null}get publicKey(){return this.pubKey||null}get privateExtendedKey(){const e=this.privateKey;if(!e)throw new Error("No private key");return Wt.encode(this.serialize(this.versions.private,ot(new Uint8Array([0]),e)))}get publicExtendedKey(){if(!this.pubKey)throw new Error("No public key");return Wt.encode(this.serialize(this.versions.public,this.pubKey))}static fromMasterSeed(e,n=Jt){if(Zn(e),8*e.length<128||8*e.length>512)throw new Error(`HDKey: wrong seed length=${e.length}. Should be between 128 and 512 bits; 256 bits is advised)`);const t=ct(qt,Zt,e);return new er({versions:n,chainCode:t.slice(32),privateKey:t.slice(0,32)})}static fromExtendedKey(e,n=Jt){const t=Wt.decode(e),r=Xn(t),o=r.getUint32(0,!1),i={versions:n,depth:t[4],parentFingerprint:r.getUint32(5,!1),index:r.getUint32(9,!1),chainCode:t.slice(13,45)},s=t.slice(45),a=0===s[0];if(o!==n[a?"private":"public"])throw new Error("Version mismatch");return new er(a?{...i,privateKey:s.slice(1)}:{...i,publicKey:s})}static fromJSON(e){return er.fromExtendedKey(e.xpriv)}derive(e){if(!/^[mM]'?/.test(e))throw new Error('Path must start with "m" or "M"');if(/^[mM]'?$/.test(e))return this;const n=e.replace(/^[mM]'?\//,"").split("/");let t=this;for(const e of n){const n=/^(\d+)('?)$/.exec(e);if(!n||3!==n.length)throw new Error(`Invalid child index: ${e}`);let r=+n[1];if(!Number.isSafeInteger(r)||r>=Qt)throw new Error("Invalid index");"'"===n[2]&&(r+=Qt),t=t.deriveChild(r)}return t}deriveChild(e){if(!this.pubKey||!this.chainCode)throw new Error("No publicKey or chainCode set");let n=Xt(e);if(e>=Qt){const e=this.privateKey;if(!e)throw new Error("Could not derive hardened child key");n=ot(new Uint8Array([0]),e,n)}else n=ot(this.pubKey,n);const t=ct(qt,this.chainCode,n),r=Vt(t.slice(0,32)),o=t.slice(32);if(!en.isValidPrivateKey(r))throw new Error("Tweak bigger than curve order");const i={versions:this.versions,chainCode:o,depth:this.depth+1,parentFingerprint:this.fingerprint,index:e};try{if(this.privateKey){const e=en.mod(this.privKey+r,M.n);if(!en.isValidPrivateKey(e))throw new Error("The tweak was out of range or the resulted private key is invalid");i.privateKey=e}else{const e=se.fromHex(this.pubKey).add(se.fromPrivateKey(r));if(e.equals(se.ZERO))throw new Error("The tweak was equal to negative P, which made the result key invalid");i.publicKey=e.toRawBytes(!0)}return new er(i)}catch(n){return this.deriveChild(e+1)}}sign(e){if(!this.privateKey)throw new Error("No privateKey set!");return Zn(e,32),function(e,n,t={}){const{seed:r,m:o,d:i}=Fe(e,n,t.extraEntropy),s=new He(Z,Y);let a;for(s.reseedSync(r);!(a=Ue(s.generateSync(),o,i,t.canonical));)s.reseedSync();return Ke(a,t)}(e,this.privKey,{canonical:!0,der:!1})}verify(e,n){if(Zn(e,32),Zn(n,64),!this.publicKey)throw new Error("No publicKey set!");let t;try{t=le.fromCompact(n)}catch(e){return!1}return function(e,n,t,r=Re){let o;try{o=De(e),n=me(n)}catch(e){return!1}const{r:i,s}=o;if(r.strict&&o.hasHighS())return!1;const a=Ce(n);let c;try{c=Te(t)}catch(e){return!1}const{n:l}=M,h=Be(s,l),d=xe(a*h,l),u=xe(i*h,l),f=se.BASE.multiplyAndAddUnsafe(c,d,u);return!!f&&xe(f.x,l)===i}(t,e,this.publicKey)}wipePrivateData(){return this.privKey=void 0,this.privKeyBytes&&(this.privKeyBytes.fill(0),this.privKeyBytes=void 0),this}toJSON(){return{xpriv:this.privateExtendedKey,xpub:this.publicExtendedKey}}serialize(e,n){if(!this.chainCode)throw new Error("No chainCode set");return Zn(n,33),ot(Xt(e),new Uint8Array([this.depth]),Xt(this.parentFingerprint),Xt(this.index),this.chainCode,n)}}class nr extends an{constructor(e,n){super(),this.finished=!1,this.destroyed=!1,function(e){if("function"!=typeof e||"function"!=typeof e.init)throw new Error("Hash should be wrapped by utils.wrapConstructor");sn(e.outputLen),sn(e.blockLen)}(e);const t=on(n);if(this.iHash=e.create(),!(this.iHash instanceof an))throw new TypeError("Expected instance of class which extends utils.Hash");const r=this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const o=new Uint8Array(r);o.set(t.length>this.iHash.blockLen?e.create().update(t).digest():t);for(let e=0;e<o.length;e++)o[e]^=54;this.iHash.update(o),this.oHash=e.create();for(let e=0;e<o.length;e++)o[e]^=106;this.oHash.update(o),o.fill(0)}update(e){if(this.destroyed)throw new Error("instance is destroyed");return this.iHash.update(e),this}digestInto(e){if(this.destroyed)throw new Error("instance is destroyed");if(!(e instanceof Uint8Array)||e.length!==this.outputLen)throw new Error("HMAC: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:n,iHash:t,finished:r,destroyed:o,blockLen:i,outputLen:s}=this;return e.finished=r,e.destroyed=o,e.blockLen=i,e.outputLen=s,e.oHash=n._cloneInto(e.oHash),e.iHash=t._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const tr=(e,n,t)=>new nr(e,n).update(t).digest();tr.create=(e,n)=>new nr(e,n),tr.init=tr.create;var rr=Object.defineProperty,or=(e,n)=>{for(var t in n)rr(e,t,{get:n[t],enumerable:!0})};function ir(e){return en.bytesToHex(Ze.getPublicKey(e))}or({},{insertEventIntoAscendingList:()=>hr,insertEventIntoDescendingList:()=>lr,normalizeURL:()=>cr,utf8Decoder:()=>sr,utf8Encoder:()=>ar});var sr=new TextDecoder("utf-8"),ar=new TextEncoder;function cr(e){let n=new URL(e);return n.pathname=n.pathname.replace(/\/+/g,"/"),n.pathname.endsWith("/")&&(n.pathname=n.pathname.slice(0,-1)),("80"===n.port&&"ws:"===n.protocol||"443"===n.port&&"wss:"===n.protocol)&&(n.port=""),n.searchParams.sort(),n.hash="",n.toString()}function lr(e,n){let t,r=0,o=e.length-1,i=r;if(o<0)i=0;else if(n.created_at<e[o].created_at)i=o+1;else if(n.created_at>=e[r].created_at)i=r;else for(;;){if(o<=r+1){i=o;break}if(t=Math.floor(r+(o-r)/2),e[t].created_at>n.created_at)r=t;else{if(!(e[t].created_at<n.created_at)){i=t;break}o=t}}return e[i]?.id!==n.id?[...e.slice(0,i),n,...e.slice(i)]:e}function hr(e,n){let t,r=0,o=e.length-1,i=r;if(o<0)i=0;else if(n.created_at>e[o].created_at)i=o+1;else if(n.created_at<=e[r].created_at)i=r;else for(;;){if(o<=r+1){i=o;break}if(t=Math.floor(r+(o-r)/2),e[t].created_at<n.created_at)r=t;else{if(!(e[t].created_at>n.created_at)){i=t;break}o=t}}return e[i]?.id!==n.id?[...e.slice(0,i),n,...e.slice(i)]:e}function dr(e){let n=yn(ar.encode(function(e){if(!ur(e))throw new Error("can't serialize event with wrong or missing properties");return JSON.stringify([0,e.pubkey,e.created_at,e.kind,e.tags,e.content])}(e)));return en.bytesToHex(n)}function ur(e){if("string"!=typeof e.content)return!1;if("number"!=typeof e.created_at)return!1;if("string"!=typeof e.pubkey)return!1;if(!e.pubkey.match(/^[a-f0-9]{64}$/))return!1;if(!Array.isArray(e.tags))return!1;for(let n=0;n<e.tags.length;n++){let t=e.tags[n];if(!Array.isArray(t))return!1;for(let e=0;e<t.length;e++)if("object"==typeof t[e])return!1}return!0}function fr(e,n){if(e.ids&&-1===e.ids.indexOf(n.id))return!1;if(e.kinds&&-1===e.kinds.indexOf(n.kind))return!1;if(e.authors&&-1===e.authors.indexOf(n.pubkey))return!1;for(let t in e)if("#"===t[0]){let r=e[`#${t.slice(1)}`];if(r&&!n.tags.find((([e,n])=>e===t.slice(1)&&-1!==r.indexOf(n))))return!1}return!(e.since&&n.created_at<e.since)&&!(e.until&&n.created_at>=e.until)}function pr(e,n){let t=n.length+3,r=e.indexOf(`"${n}":`)+t,o=e.slice(r).indexOf('"')+r+1;return e.slice(o,o+64)}function yr(e,n){let t=n.length,r=e.indexOf(`"${n}":`)+t+3,o=e.slice(r),i=Math.min(o.indexOf(","),o.indexOf("}"));return parseInt(o.slice(0,i),10)}function Ar(e){let n=e.slice(0,22).indexOf('"EVENT"');if(-1===n)return null;let t=e.slice(n+7+1).indexOf('"');if(-1===t)return null;let r=n+7+1+t,o=e.slice(r+1,80).indexOf('"');if(-1===o)return null;let i=r+1+o;return e.slice(r+1,i)}function wr(e,n){return n===pr(e,"id")}function gr(e,n){return n===pr(e,"pubkey")}function br(e,n){return n===yr(e,"kind")}function mr(e){var n,t,r,o=new Promise((e=>{r=e})),i={},s={connect:[],disconnect:[],error:[],notice:[]},a={},c={};async function l(){return new Promise(((o,l)=>{(n=new WebSocket(e)).onopen=()=>{s.connect.forEach((e=>e())),r(),o()},n.onerror=()=>{s.error.forEach((e=>e())),l()},n.onclose=async()=>{s.disconnect.forEach((e=>e())),t&&t()};let h,d=[];function u(){if(0===d.length)return clearInterval(h),void(h=null);var n=d.shift();if(!n)return;let t=Ar(n);if(t){let r=i[t];if(r&&r.alreadyHaveEvent&&r.alreadyHaveEvent(pr(n,"id"),e))return}try{let e=JSON.parse(n);switch(e[0]){case"EVENT":let n=e[1],t=e[2];return void(ur(t)&&i[n]&&(i[n].skipVerification||function(e){return Ze.verifySync(e.sig,dr(e),e.pubkey)}(t))&&function(e,n){for(let t=0;t<e.length;t++)if(fr(e[t],n))return!0;return!1}(i[n].filters,t)&&(i[n],(a[n]?.event||[]).forEach((e=>e(t)))));case"EOSE":{let n=e[1];return void(a[n]?.eose||[]).forEach((e=>e()))}case"OK":{let n=e[1],t=e[2],r=e[3]||"";return void(t?c[n]?.ok.forEach((e=>e())):c[n]?.failed.forEach((e=>e(r))))}case"NOTICE":let r=e[1];return void s.notice.forEach((e=>e(r)))}}catch(e){return}}n.onmessage=e=>{d.push(e.data),h||(h=setInterval(u,0))}}))}async function h(e){let t=JSON.stringify(e);await o;try{n.send(t)}catch(e){console.log(e)}}const d=(e,{skipVerification:n=!1,alreadyHaveEvent:t=null,id:r=Math.random().toString().slice(2)}={})=>{let o=r;return i[o]={id:o,filters:e,skipVerification:n,alreadyHaveEvent:t},h(["REQ",o,...e]),{sub:(r,i={})=>d(r||e,{skipVerification:i.skipVerification||n,alreadyHaveEvent:i.alreadyHaveEvent||t,id:o}),unsub:()=>{delete i[o],delete a[o],h(["CLOSE",o])},on:(e,n)=>{a[o]=a[o]||{event:[],eose:[]},a[o][e].push(n)},off:(e,n)=>{let t=a[o],r=t[e].indexOf(n);r>=0&&t[e].splice(r,1)}}};return{url:e,sub:d,on:(e,t)=>{s[e].push(t),"connect"===e&&1===n?.readyState&&t()},off:(e,n)=>{let t=s[e].indexOf(n);-1!==t&&s[e].splice(t,1)},list:(e,n)=>new Promise((t=>{let r=d(e,n),o=[],i=setTimeout((()=>{r.unsub(),t(o)}),1500);r.on("eose",(()=>{r.unsub(),clearTimeout(i),t(o)})),r.on("event",(e=>{o.push(e)}))})),get:(e,n)=>new Promise((t=>{let r=d([e],n),o=setTimeout((()=>{r.unsub(),t(null)}),1500);r.on("event",(e=>{r.unsub(),clearTimeout(o),t(e)}))})),publish(e){if(!e.id)throw new Error(`event ${e} has no id`);let n=e.id;var t=!1,r=!1;h(["EVENT",e]).then((()=>{t=!0,r&&(o(),r=!1)})).catch((()=>{}));const o=()=>{let e=d([{ids:[n]}],{id:`monitor-${n.slice(0,5)}`}),t=setTimeout((()=>{(c[n]?.failed||[]).forEach((e=>e("event not seen after 5 seconds"))),e.unsub()}),5e3);e.on("event",(()=>{clearTimeout(t),(c[n]?.seen||[]).forEach((e=>e()))}))};return{on:(e,i)=>{c[n]=c[n]||{ok:[],seen:[],failed:[]},c[n][e].push(i),"seen"===e&&(t?o():r=!0)},off:(e,t)=>{let r=c[n];if(!r)return;let o=r[e].indexOf(t);o>=0&&r[e].splice(o,1)}}},connect:async function(){n?.readyState&&1===n.readyState||await l()},close:()=>n.readyState>1?Promise.resolve():(n.close(),new Promise((e=>{t=e}))),get status(){return n?.readyState??3}}}or({},{getHex64:()=>pr,getInt:()=>yr,getSubscriptionId:()=>Ar,matchEventId:()=>wr,matchEventKind:()=>br,matchEventPubkey:()=>gr});async function vr(e,n,t){const r=_r(je(e,"02"+n));let o=Uint8Array.from(function(e=32){if(nn.web)return nn.web.getRandomValues(new Uint8Array(e));if(nn.node)return new Uint8Array(nn.node.randomBytes(e).buffer);throw new Error("The environment doesn't have randomBytes function")}(16)),i=ar.encode(t),s=await crypto.subtle.importKey("raw",r,{name:"AES-CBC"},!1,["encrypt"]),a=await crypto.subtle.encrypt({name:"AES-CBC",iv:o},s,i);return`${Ln.encode(new Uint8Array(a))}?iv=${Ln.encode(new Uint8Array(o.buffer))}`}async function xr(e,n,t){let[r,o]=t.split("?iv="),i=_r(je(e,"02"+n)),s=await crypto.subtle.importKey("raw",i,{name:"AES-CBC"},!1,["decrypt"]),a=Ln.decode(r),c=Ln.decode(o),l=await crypto.subtle.decrypt({name:"AES-CBC",iv:c},s,a);return sr.decode(l)}function _r(e){return e.slice(1,33)}or({},{decrypt:()=>xr,encrypt:()=>vr});var Br;or({},{queryProfile:()=>kr,searchDomain:()=>Er,useFetchImplementation:()=>Cr});try{Br=fetch}catch{}function Cr(e){Br=e}async function Er(e,n=""){try{return(await(await Br(`https://${e}/.well-known/nostr.json?name=${n}`)).json()).names}catch(e){return{}}}async function kr(e){let[n,t]=e.split("@");if(t||(t=n,n="_"),!n.match(/^[A-Za-z0-9-_]+$/))return null;let r=await(await Br(`https://${t}/.well-known/nostr.json?name=${n}`)).json();if(!r?.names?.[n])return null;let o=r.names[n];return{pubkey:o,relays:r.relays?.[o]||[]}}function Hr(e,n){let t=er.fromMasterSeed((0,Vn.Z1)(e,n)).derive("m/44'/1237'/0'/0/0").privateKey;if(!t)throw new Error("could not derive private key");return en.bytesToHex(t)}function Sr(){return(0,Vn.OF)(Wn.U)}function Ir(e){return(0,Vn._I)(e,Wn.U)}or({},{generateSeedWords:()=>Sr,privateKeyFromSeedWords:()=>Hr,validateWords:()=>Ir});var Ur={};or(Ur,{decode:()=>Tr,neventEncode:()=>Fr,noteEncode:()=>Nr,nprofileEncode:()=>Or,npubEncode:()=>jr,nsecEncode:()=>$r});var Lr=5e3;function Tr(e){let{prefix:n,words:t}=zn.decode(e,Lr),r=new Uint8Array(zn.fromWords(t));if("nprofile"===n){let e=Dr(r);if(!e[0]?.[0])throw new Error("missing TLV 0 for nprofile");if(32!==e[0][0].length)throw new Error("TLV 0 should be 32 bytes");return{type:"nprofile",data:{pubkey:en.bytesToHex(e[0][0]),relays:e[1].map((e=>sr.decode(e)))}}}if("nevent"===n){let e=Dr(r);if(!e[0]?.[0])throw new Error("missing TLV 0 for nevent");if(32!==e[0][0].length)throw new Error("TLV 0 should be 32 bytes");return{type:"nevent",data:{id:en.bytesToHex(e[0][0]),relays:e[1].map((e=>sr.decode(e)))}}}if("nsec"===n||"npub"===n||"note"===n)return{type:n,data:en.bytesToHex(r)};throw new Error(`unknown prefix ${n}`)}function Dr(e){let n={},t=e;for(;t.length>0;){let e=t[0],r=t[1],o=t.slice(2,2+r);t=t.slice(2+r),o.length<r||(n[e]=n[e]||[],n[e].push(o))}return n}function $r(e){return Pr("nsec",e)}function jr(e){return Pr("npub",e)}function Nr(e){return Pr("note",e)}function Pr(e,n){let t=en.hexToBytes(n),r=zn.toWords(t);return zn.encode(e,r,Lr)}function Or(e){let n=Kr({0:[en.hexToBytes(e.pubkey)],1:(e.relays||[]).map((e=>ar.encode(e)))}),t=zn.toWords(n);return zn.encode("nprofile",t,Lr)}function Fr(e){let n=Kr({0:[en.hexToBytes(e.id)],1:(e.relays||[]).map((e=>ar.encode(e)))}),t=zn.toWords(n);return zn.encode("nevent",t,Lr)}function Kr(e){let n=[];return Object.entries(e).forEach((([e,t])=>{t.forEach((t=>{let r=new Uint8Array(t.length+2);r.set([parseInt(e)],0),r.set([t.length],1),r.set(t,2),n.push(r)}))})),en.concatBytes(...n)}function Rr(e,n){let t=[];(n.kind||-1)>=0&&t.push(`kind=${n.kind}`),n.until&&t.push(`created_at<${n.until}`),n.since&&t.push(`created_at>${n.since}`);let r=t.join("&");if(""===r)throw new Error("refusing to create a delegation without any conditions");let o=yn(ar.encode(`nostr:delegation:${n.pubkey}:${r}`)),i=en.bytesToHex(Ze.signSync(o,e));return{from:ir(e),to:n.pubkey,cond:r,sig:i}}function zr(e){let n=e.tags.find((e=>"delegation"===e[0]&&e.length>=4));if(!n)return null;let t=n[1],r=n[2],o=n[3],i=r.split("&");for(let n=0;n<i.length;n++){let[t,r,o]=i[n].split(/\b/);if(("kind"!==t||"="!==r||e.kind!==parseInt(o))&&!("created_at"===t&&"<"===r&&e.created_at<parseInt(o)||"created_at"===t&&">"===r&&e.created_at>parseInt(o)))return null}let s=yn(ar.encode(`nostr:delegation:${e.pubkey}:${r}`));return Ze.verifySync(o,s,t)?t:null}or({},{createDelegation:()=>Rr,getDelegator:()=>zr}),en.hmacSha256Sync=(e,...n)=>tr(yn,e,en.concatBytes(...n)),en.sha256Sync=(...e)=>yn(en.concatBytes(...e));var Gr=0;function Mr(e,t,r,o,i,s){var a,c,l={};for(c in t)"ref"==c?a=t[c]:l[c]=t[c];var h={type:e,props:l,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--Gr,__source:i,__self:s};if("function"==typeof e&&(a=e.defaultProps))for(c in a)void 0===l[c]&&(l[c]=a[c]);return n.vnode&&n.vnode(h),h}const qr=function(e){let{additionalClasses:n}=e,t="keyIcon";if(n){let e=n.split(" ");e.push(t),t=e.join(" ")}return Mr("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:t,children:Mr("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};var Wr=o(379),Vr=o.n(Wr),Yr=o(795),Zr=o.n(Yr),Jr=o(569),Qr=o.n(Jr),Xr=o(565),eo=o.n(Xr),no=o(216),to=o.n(no),ro=o(589),oo=o.n(ro),io=o(218),so={};so.styleTagTransform=oo(),so.setAttributes=eo(),so.insert=Qr().bind(null,"head"),so.domAPI=Zr(),so.insertStyleElement=to();Vr()(io.Z,so);io.Z&&io.Z.locals&&io.Z.locals;var ao,co,lo,ho,uo=0,fo=[],po=[],yo=n.__b,Ao=n.__r,wo=n.diffed,go=n.__c,bo=n.unmount;function mo(e,t){n.__h&&n.__h(co,e,uo||t),uo=0;var r=co.__H||(co.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:po}),r.__[e]}function vo(e){return uo=1,function(e,n,t){var r=mo(ao++,2);if(r.t=e,!r.__c&&(r.__=[t?t(n):ko(void 0,n),function(e){var n=r.__N?r.__N[0]:r.__[0],t=r.t(n,e);n!==t&&(r.__N=[t,r.__[1]],r.__c.setState({}))}],r.__c=co,!co.u)){co.u=!0;var o=co.shouldComponentUpdate;co.shouldComponentUpdate=function(e,n,t){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(e){return e.__c}));if(i.every((function(e){return!e.__N})))return!o||o.call(this,e,n,t);var s=!1;return i.forEach((function(e){if(e.__N){var n=e.__[0];e.__=e.__N,e.__N=void 0,n!==e.__[0]&&(s=!0)}})),!(!s&&r.__c.props===e)&&(!o||o.call(this,e,n,t))}}return r.__N||r.__}(ko,e)}function xo(){for(var e;e=fo.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(Co),e.__H.__h.forEach(Eo),e.__H.__h=[]}catch(t){e.__H.__h=[],n.__e(t,e.__v)}}n.__b=function(e){co=null,yo&&yo(e)},n.__r=function(e){Ao&&Ao(e),ao=0;var n=(co=e.__c).__H;n&&(lo===co?(n.__h=[],co.__h=[],n.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=po,e.__N=e.i=void 0}))):(n.__h.forEach(Co),n.__h.forEach(Eo),n.__h=[])),lo=co},n.diffed=function(e){wo&&wo(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(1!==fo.push(t)&&ho===n.requestAnimationFrame||((ho=n.requestAnimationFrame)||Bo)(xo)),t.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==po&&(e.__=e.__V),e.i=void 0,e.__V=po}))),lo=co=null},n.__c=function(e,t){t.some((function(e){try{e.__h.forEach(Co),e.__h=e.__h.filter((function(e){return!e.__||Eo(e)}))}catch(r){t.some((function(e){e.__h&&(e.__h=[])})),t=[],n.__e(r,e.__v)}})),go&&go(e,t)},n.unmount=function(e){bo&&bo(e);var t,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{Co(e)}catch(e){t=e}})),r.__H=void 0,t&&n.__e(t,r.__v))};var _o="function"==typeof requestAnimationFrame;function Bo(e){var n,t=function(){clearTimeout(r),_o&&cancelAnimationFrame(n),setTimeout(e)},r=setTimeout(t,100);_o&&(n=requestAnimationFrame(t))}function Co(e){var n=co,t=e.__c;"function"==typeof t&&(e.__c=void 0,t()),co=n}function Eo(e){var n=co;e.__c=e.__(),co=n}function ko(e,n){return"function"==typeof n?n(e):n}const Ho=function(e){let{additionalClasses:n}=e,t="copyIcon";if(n){let e=n.split(" ");e.push(t),t=e.join(" ")}return Mr("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:t,children:Mr("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};const So=function(e){let{iconClasses:n,displayText:t,copyText:r}=e;const[o,i]=vo(!1);return Mr("button",{class:"linkCopyBtn",onClick:function(){try{navigator.clipboard.writeText(r),i(!0),setTimeout((()=>{i(!1)}),2e3)}catch(e){console.error("Failed to copy: ",e)}},children:[Mr(Ho,{additionalClasses:n}),t&&Mr("span",{class:"displayText",children:t}),Mr("span",{class:"copyText",children:r}),o&&Mr("span",{class:"tooltip",children:"Copied"})]})};const Io=function(e){let n,t,{profilePkey:r,profile:o}=e;return r&&o&&(t=Ur.npubEncode(r),n=`https://media.nostr.band/thumbs/${r.slice(-4)}/${r}-picture-64`),Mr("div",{class:"cardProfile",children:[Mr("img",{class:"profileImg",src:n||"https://via.placeholder.com/48?text=Loading"}),Mr("div",{class:"profileDetails",children:[Mr("div",{class:"profileName",children:o.display_name||"Loading..."}),Mr("div",{class:"profilePkey",children:[Mr(qr,{additionalClasses:"w-4 h-4"}),Mr("span",{class:"pkey",children:t||"npub..."}),Mr(So,{iconClasses:"w-4 h-4",copyText:t})]})]})]})};const Uo=function(e){let{additionalClasses:n}=e,t="heartIcon";if(n){let e=n.split(" ");e.push(t),t=e.join(" ")}return Mr("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:t,children:Mr("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const Lo=function(e){let{additionalClasses:n}=e,t="replyIcon";if(n){let e=n.split(" ");e.push(t),t=e.join(" ")}return Mr("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:t,children:Mr("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const To=function(e){let{additionalClasses:n}=e,t="repostIcon";if(n){let e=n.split(" ");e.push(t),t=e.join(" ")}return Mr("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:t,children:Mr("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const Do=function(e){let{additionalClasses:n}=e,t="linkIcon";if(n){let e=n.split(" ");e.push(t),t=e.join(" ")}return Mr("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:t,children:Mr("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const $o=function(e){let n,t,r,{note:o,repliesCount:i,repostsCount:s,likesCount:a}=e;return o.id&&o.created_at&&(n=new Date(1e3*o.created_at),r=n.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"}),t=Ur.noteEncode(o.id)),Mr("div",{class:"cardMeta",children:[Mr("div",{class:"cardDate",children:r}),Mr("hr",{}),Mr("div",{class:"cardInteractions",children:[Mr("div",{class:"interactionContainer",children:[Mr(Lo,{additionalClasses:"w-5 h-5"}),Mr("span",{class:"repliesCount",children:i})]}),Mr("div",{class:"interactionContainer",children:[Mr(To,{additionalClasses:"w-5 h-5"}),Mr("span",{class:"repostsCount",children:s})]}),Mr("div",{class:"interactionContainer",children:[Mr(Uo,{additionalClasses:"w-5 h-5"}),Mr("span",{class:"likesCount",children:a})]}),Mr("div",{class:"interactionContainer",children:Mr("a",{href:`https://nostr.band/${t}`,class:"linkLink",children:Mr(Do,{additionalClasses:"w-5 h-5 hover:text-gray-600"})})}),Mr("div",{class:"interactionContainer",children:Mr(So,{iconClasses:"w-5 h-5",displayText:"Copy Note ID",copyText:t})})]})]})};const jo=class extends v{constructor(e){super(e),this.state={noteId:e.noteId,relay:e.relay||"wss://relay.nostr.band",note:{},profile:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0}}async componentDidMount(){let e=mr(this.state.relay);await e.connect(),e.on("connect",(()=>{this.fetchNote({relay:e}),console.log(`Connected to Nostr relay: ${e.url}`)})),e.on("error",(()=>{console.log(`Failed to connect to Nostr relay: ${e.url}`)}))}async fetchNote(e){let{relay:n}=e;n.get({ids:[this.state.noteId]}).then((e=>{e?(this.setState({note:e,profilePkey:e.pubkey}),this.fetchProfile({relay:n,profilePkey:e.pubkey}),this.fetchMeta({relay:n,noteId:this.state.noteId})):console.log("Error: We can't find that note on this relay")})).catch((e=>{console.log(`Error fetching note: ${e}`)}))}async fetchProfile(e){let{relay:n,profilePkey:t}=e;n.list([{kinds:[0],authors:[t]}]).then((e=>{e.sort(((e,n)=>n.created_at-e.created_at));let n=e[0],t=JSON.parse(n.content);this.setState({profile:t})})).catch((e=>{console.log(`Error fetching profile: ${e}`)}))}async fetchMeta(e){let{relay:n,noteId:t}=e;n.list([{kinds:[1,6,7],"#e":[t]}]).then((e=>{for(let n of e)switch(n.kind){case 6:this.setState((e=>({repostsCount:e.repostsCount+1})));break;case 7:this.setState((e=>({likesCount:e.likesCount+1})));break;case 1:this.setState((e=>({repliesCount:e.repliesCount+1})));break;default:console.log("Unknown note kind")}}))}render(){return Mr("div",{class:"nostrEmbedCard",children:[Mr(Io,{profilePkey:this.state.profilePkey,profile:this.state.profile}),Mr("div",{class:"cardContent",children:this.state.note.content}),Mr($o,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount})]})}};function No(e,n,t){const r=document.querySelector(n)?document.querySelector(n):document.querySelector("body");N(p(jo,{noteId:e,relay:t}),r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,