/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nostrEmbed=t():e.nostrEmbed=t()}(this,(()=>(()=>{var e,t,n={715:(e,t)=>{"use strict";t.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let e=0;e<n.length;e++){const t=n.charAt(e);r[t]=e}function o(e){const t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function i(e){let t=1;for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=o(t)^r>>5}t=o(t);for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);t=o(t)^31&r}return t}function s(e,t,n,r){let o=0,i=0;const s=(1<<n)-1,a=[];for(let r=0;r<e.length;++r)for(o=o<<t|e[r],i+=t;i>=n;)i-=n,a.push(o>>i&s);if(r)i>0&&a.push(o<<n-i&s);else{if(i>=t)return"Excess padding";if(o<<n-i&s)return"Non-zero padding"}return a}function a(e){return s(e,8,5,!0)}function c(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t}function l(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}function A(e){let t;function s(e,n){if(n=n||90,e.length<8)return e+" too short";if(e.length>n)return"Exceeds length limit";const s=e.toLowerCase(),a=e.toUpperCase();if(e!==s&&e!==a)return"Mixed-case string "+e;const c=(e=s).lastIndexOf("1");if(-1===c)return"No separator character for "+e;if(0===c)return"Missing prefix for "+e;const l=e.slice(0,c),A=e.slice(c+1);if(A.length<6)return"Data too short";let f=i(l);if("string"==typeof f)return f;const u=[];for(let e=0;e<A.length;++e){const t=A.charAt(e),n=r[t];if(void 0===n)return"Unknown character "+t;f=o(f)^n,e+6>=A.length||u.push(n)}return f!==t?"Invalid checksum for "+e:{prefix:l,words:u}}return t="bech32"===e?1:734539939,{decodeUnsafe:function(e,t){const n=s(e,t);if("object"==typeof n)return n},decode:function(e,t){const n=s(e,t);if("object"==typeof n)return n;throw new Error(n)},encode:function(e,r,s){if(s=s||90,e.length+7+r.length>s)throw new TypeError("Exceeds length limit");let a=i(e=e.toLowerCase());if("string"==typeof a)throw new Error(a);let c=e+"1";for(let e=0;e<r.length;++e){const t=r[e];if(t>>5!=0)throw new Error("Non 5-bit word");a=o(a)^t,c+=n.charAt(t)}for(let e=0;e<6;++e)a=o(a);a^=t;for(let e=0;e<6;++e){const t=a>>5*(5-e)&31;c+=n.charAt(t)}return c},toWords:a,fromWordsUnsafe:c,fromWords:l}}t.gW=A("bech32"),A("bech32m")},218:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.ne-relative{position:relative}.ne-block{display:block}.ne-flex{display:flex}.ne-hidden{display:none}.ne-h-12{height:3rem}.ne-w-12{width:3rem}.ne-w-5{width:1.25rem}.ne-w-full{width:100%}.ne-max-w-\\[30\\%\\]{max-width:30%}.ne-max-w-full{max-width:100%}.ne-cursor-pointer{cursor:pointer}.ne-flex-row{flex-direction:row}.ne-flex-col{flex-direction:column}.ne-items-center{align-items:center}.ne-justify-between{justify-content:space-between}.ne-gap-1{gap:.25rem}.ne-gap-2{gap:.5rem}.ne-gap-4{gap:1rem}.ne-overflow-hidden{overflow:hidden}.ne-text-ellipsis{text-overflow:ellipsis}.ne-whitespace-nowrap{white-space:nowrap}.ne-rounded-lg{border-radius:.5rem}.ne-border-0{border-width:0}.ne-bg-\\[\\#fcfcfc\\]{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity))}.ne-bg-transparent{background-color:transparent}.ne-p-0{padding:0}.ne-px-4{padding-left:1rem;padding-right:1rem}.ne-py-5{padding-bottom:1.25rem;padding-top:1.25rem}.ne-pb-3{padding-bottom:.75rem}.ne-text-lg{font-size:1.125rem;line-height:1.75rem}.ne-text-gray-400{--tw-text-opacity:1;color:#9ca3af;color:rgb(156 163 175/var(--tw-text-opacity))}.ne-text-gray-900{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.ne-no-underline{text-decoration-line:none}.nostrEmbedCard{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity));border-radius:.5rem;display:flex;flex-direction:column;gap:2rem;max-width:100%;padding:1.25rem 1rem .75rem}@media (min-width:768px){.nostrEmbedCard{max-width:600px}}.nostrEmbedCard{border:1px solid #ddd;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.cardContent{font-size:1.125rem;line-height:1.75rem}.cardProfile{align-items:center;display:flex;flex-direction:row;gap:1rem}.profileImg{border-radius:9999px;height:3rem;width:3rem}.profileDetails{display:flex;flex-direction:column}.profileName{font-size:1.125rem;font-weight:700;line-height:1.75rem}.profilePkey{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyKeyBtn{background-color:transparent;border-width:0;cursor:pointer;display:flex;flex-direction:row;padding:0;position:relative;vertical-align:middle}.copyKeyBtn,.linkCopyBtn{background-color:transparent;border:none}.copyKeyBtn:hover .copyIcon{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.pkey{max-width:30%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width:768px){.pkey{max-width:24rem}}.cardMeta{display:flex;flex-direction:column;gap:.25rem}@media (min-width:768px){.cardMeta{gap:.5rem}}hr{opacity:.3;width:100%}.cardInteractions{display:flex;flex-direction:row;justify-content:space-between}@media (min-width:768px){.cardInteractions{gap:3rem;justify-content:flex-start}}.interactionContainer{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyIcon,.heartIcon,.linkIcon,.replyIcon,.repostIcon{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity));display:block;height:1.25rem;width:1.25rem}.linkCopyBtn,.linkLink{--tw-text-opacity:1;align-items:center;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity));cursor:pointer;display:flex;flex-direction:row;gap:.5rem;position:relative;text-decoration-line:none}.linkCopyBtn:hover,.linkCopyBtn:hover .copyIcon,.linkLink:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.linkCopyBtn:hover .tooltip,.tooltip{--tw-text-opacity:1;color:#9ca3af;color:rgb(156 163 175/var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem}.tooltip{display:none}@media (min-width:768px){.tooltip{display:flex;visibility:visible}}.displayText{display:none}@media (min-width:768px){.displayText{display:flex;font-size:.875rem;line-height:1.25rem;visibility:visible}}.copyText{display:none}@media (min-width:768px){.md\\:ne-visible{visibility:visible}.md\\:ne-flex{display:flex}.md\\:ne-max-w-\\[600px\\]{max-width:600px}.md\\:ne-justify-start{justify-content:flex-start}}","",{version:3,sources:["webpack://./src/components/style.css","<no source>"],names:[],mappings:"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",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.nostrEmbedCard {\n  @apply ne-px-4 ne-py-5 ne-pb-3 ne-bg-[#fcfcfc] ne-rounded-lg ne-max-w-full md:ne-max-w-[600px] ne-flex ne-flex-col ne-gap-8;\n  @apply ne-font-sans;\n  border: 1px solid #ddd;\n}\n\n.cardContent {\n  @apply ne-text-lg;\n}\n\n.cardProfile {\n  @apply ne-flex ne-flex-row ne-gap-4 ne-items-center;\n}\n\n.profileImg {\n  @apply ne-w-12 ne-h-12 ne-rounded-full;\n}\n\n.profileDetails {\n  @apply ne-flex ne-flex-col;\n}\n\n.profileName {\n  @apply ne-text-lg ne-font-bold;\n}\n\n.profilePkey {\n  @apply ne-flex ne-flex-row ne-gap-2 ne-items-center;\n}\n\n.copyKeyBtn {\n  @apply ne-p-0 ne-border-0 ne-bg-transparent ne-cursor-pointer ne-relative ne-flex ne-flex-row ne-align-middle;\n}\n\n.copyKeyBtn,\n.linkCopyBtn {\n  border: none;\n  background-color: transparent;\n}\n\n.copyKeyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.pkey {\n  @apply ne-overflow-hidden ne-text-ellipsis ne-whitespace-nowrap ne-max-w-[30%] md:ne-max-w-sm;\n}\n\n.cardMeta {\n  @apply ne-flex ne-flex-col ne-gap-1 md:ne-gap-2;\n}\n\nhr {\n  @apply ne-w-full ne-opacity-30;\n}\n\n.cardInteractions {\n  @apply ne-flex ne-flex-row ne-justify-between md:ne-justify-start md:ne-gap-12;\n}\n\n.interactionContainer {\n  @apply ne-flex ne-flex-row ne-items-center ne-gap-2;\n}\n\n.replyIcon,\n.repostIcon,\n.heartIcon,\n.linkIcon,\n.copyIcon {\n  @apply ne-text-gray-900 ne-block ne-w-5 ne-h-5;\n}\n\n.linkCopyBtn, .linkLink {\n  @apply ne-text-gray-900 ne-no-underline ne-flex ne-flex-row ne-items-center ne-gap-2 ne-cursor-pointer ne-relative;\n}\n\n.linkCopyBtn:hover, .linkLink:hover,\n.linkCopyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.tooltip,\n.linkCopyBtn:hover .tooltip {\n  @apply ne-text-gray-400 ne-text-sm;\n}\n\n.tooltip {\n  @apply ne-hidden md:ne-flex md:ne-visible;\n}\n\n.displayText {\n  @apply ne-hidden md:ne-flex md:ne-visible md:ne-text-sm;\n}\n\n.copyText {\n  @apply ne-hidden;\n}\n",null],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);r&&s[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),t.push(A))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],A=i[l]||0,f="".concat(l," ").concat(A);i[l]=A+1;var u=n(f),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(d);else{var p=o(d,r);r.byIndex=a,t.splice(a,0,{identifier:f,updater:p,references:1})}s.push(f)}return s}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var c=r(e,o),l=0;l<i.length;l++){var A=n(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},856:()=>{}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>n[e]));return s.default=()=>n,o.d(i,s),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>Rt});var e,t,n,r,s,a,c,l={},A=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function u(e,t){for(var n in t)e[n]=t[n];return e}function d(e){var t=e.parentNode;t&&t.removeChild(e)}function p(t,n,r){var o,i,s,a={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(s in t.defaultProps)void 0===a[s]&&(a[s]=t.defaultProps[s]);return h(t,a,o,i,null)}function h(e,r,o,i,s){var a={type:e,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++n:s};return null==s&&null!=t.vnode&&t.vnode(a),a}function _(e){return e.children}function y(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function m(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||y(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||y(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?g:w,i):e.removeEventListener(t,i?g:w,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&-1==t.indexOf("-")?e.removeAttribute(t):e.setAttribute(t,n))}}function w(e){r=!0;try{return this.l[e.type+!1](t.event?t.event(e):e)}finally{r=!1}}function g(e){r=!0;try{return this.l[e.type+!0](t.event?t.event(e):e)}finally{r=!1}}function C(e,t){this.props=e,this.context=t}function v(e,t){if(null==t)return e.__?v(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?v(e):null}function B(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return B(e)}}function b(e){r?setTimeout(e):c(e)}function x(e){(!e.__d&&(e.__d=!0)&&s.push(e)&&!k.__r++||a!==t.debounceRendering)&&((a=t.debounceRendering)||b)(k)}function k(){var e,t,n,r,o,i,a,c;for(s.sort((function(e,t){return e.__v.__b-t.__v.__b}));e=s.shift();)e.__d&&(t=s.length,r=void 0,o=void 0,a=(i=(n=e).__v).__e,(c=n.__P)&&(r=[],(o=u({},i)).__v=i.__v+1,N(c,i,o,n.__n,void 0!==c.ownerSVGElement,null!=i.__h?[a]:null,r,null==a?v(i):a,i.__h),D(r,i),i.__e!=a&&B(i)),s.length>t&&s.sort((function(e,t){return e.__v.__b-t.__v.__b})));k.__r=0}function E(e,t,n,r,o,i,s,a,c,f){var u,d,p,y,m,w,g,C=r&&r.__k||A,B=C.length;for(n.__k=[],u=0;u<t.length;u++)if(null!=(y=n.__k[u]=null==(y=t[u])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?h(null,y,null,null,y):Array.isArray(y)?h(_,{children:y},null,null,null):y.__b>0?h(y.type,y.props,y.key,y.ref?y.ref:null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(p=C[u])||p&&y.key==p.key&&y.type===p.type)C[u]=void 0;else for(d=0;d<B;d++){if((p=C[d])&&y.key==p.key&&y.type===p.type){C[d]=void 0;break}p=null}N(e,y,p=p||l,o,i,s,a,c,f),m=y.__e,(d=y.ref)&&p.ref!=d&&(g||(g=[]),p.ref&&g.push(p.ref,null,y),g.push(d,y.__c||m,y)),null!=m?(null==w&&(w=m),"function"==typeof y.type&&y.__k===p.__k?y.__d=c=S(y,c,e):c=I(e,y,p,C,m,c),"function"==typeof n.type&&(n.__d=c)):c&&p.__e==c&&c.parentNode!=e&&(c=v(p))}for(n.__e=w,u=B;u--;)null!=C[u]&&("function"==typeof n.type&&null!=C[u].__e&&C[u].__e==n.__d&&(n.__d=H(r).nextSibling),T(C[u],C[u]));if(g)for(u=0;u<g.length;u++)U(g[u],g[++u],g[++u])}function S(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?S(r,t,n):I(n,r,r,o,r.__e,t));return t}function I(e,t,n,r,o,i){var s,a,c;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(null==n||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),s=null;else{for(a=i,c=0;(a=a.nextSibling)&&c<r.length;c+=1)if(a==o)break e;e.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function H(e){var t,n,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=H(n)))return r;return null}function N(e,n,r,o,i,s,a,c,l){var A,f,d,p,h,y,m,w,g,v,B,b,x,k,S,I=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(l=r.__h,c=n.__e=r.__e,n.__h=null,s=[c]),(A=t.__b)&&A(n);try{e:if("function"==typeof I){if(w=n.props,g=(A=I.contextType)&&o[A.__c],v=A?g?g.props.value:A.__:o,r.__c?m=(f=n.__c=r.__c).__=f.__E:("prototype"in I&&I.prototype.render?n.__c=f=new I(w,v):(n.__c=f=new C(w,v),f.constructor=I,f.render=j),g&&g.sub(f),f.props=w,f.state||(f.state={}),f.context=v,f.__n=o,d=f.__d=!0,f.__h=[],f._sb=[]),null==f.__s&&(f.__s=f.state),null!=I.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=u({},f.__s)),u(f.__s,I.getDerivedStateFromProps(w,f.__s))),p=f.props,h=f.state,f.__v=n,d)null==I.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==I.getDerivedStateFromProps&&w!==p&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(w,v),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(w,f.__s,v)||n.__v===r.__v){for(n.__v!==r.__v&&(f.props=w,f.state=f.__s,f.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),B=0;B<f._sb.length;B++)f.__h.push(f._sb[B]);f._sb=[],f.__h.length&&a.push(f);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(w,f.__s,v),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(p,h,y)}))}if(f.context=v,f.props=w,f.__P=e,b=t.__r,x=0,"prototype"in I&&I.prototype.render){for(f.state=f.__s,f.__d=!1,b&&b(n),A=f.render(f.props,f.state,f.context),k=0;k<f._sb.length;k++)f.__h.push(f._sb[k]);f._sb=[]}else do{f.__d=!1,b&&b(n),A=f.render(f.props,f.state,f.context),f.state=f.__s}while(f.__d&&++x<25);f.state=f.__s,null!=f.getChildContext&&(o=u(u({},o),f.getChildContext())),d||null==f.getSnapshotBeforeUpdate||(y=f.getSnapshotBeforeUpdate(p,h)),S=null!=A&&A.type===_&&null==A.key?A.props.children:A,E(e,Array.isArray(S)?S:[S],n,r,o,i,s,a,c,l),f.base=n.__e,n.__h=null,f.__h.length&&a.push(f),m&&(f.__E=f.__=null),f.__e=!1}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=P(r.__e,n,r,o,i,s,a,l);(A=t.diffed)&&A(n)}catch(e){n.__v=null,(l||null!=s)&&(n.__e=c,n.__h=!!l,s[s.indexOf(c)]=null),t.__e(e,n,r)}}function D(e,n){t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function P(t,n,r,o,i,s,a,c){var A,f,u,p=r.props,h=n.props,_=n.type,y=0;if("svg"===_&&(i=!0),null!=s)for(;y<s.length;y++)if((A=s[y])&&"setAttribute"in A==!!_&&(_?A.localName===_:3===A.nodeType)){t=A,s[y]=null;break}if(null==t){if(null===_)return document.createTextNode(h);t=i?document.createElementNS("http://www.w3.org/2000/svg",_):document.createElement(_,h.is&&h),s=null,c=!1}if(null===_)p===h||c&&t.data===h||(t.data=h);else{if(s=s&&e.call(t.childNodes),f=(p=r.props||l).dangerouslySetInnerHTML,u=h.dangerouslySetInnerHTML,!c){if(null!=s)for(p={},y=0;y<t.attributes.length;y++)p[t.attributes[y].name]=t.attributes[y].value;(u||f)&&(u&&(f&&u.__html==f.__html||u.__html===t.innerHTML)||(t.innerHTML=u&&u.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||m(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||m(e,i,t[i],n[i],r)}(t,h,p,i,c),u)n.__k=[];else if(y=n.props.children,E(t,Array.isArray(y)?y:[y],n,r,o,i&&"foreignObject"!==_,s,a,s?s[0]:r.__k&&v(r,0),c),null!=s)for(y=s.length;y--;)null!=s[y]&&d(s[y]);c||("value"in h&&void 0!==(y=h.value)&&(y!==t.value||"progress"===_&&!y||"option"===_&&y!==p.value)&&m(t,"value",y,p.value,!1),"checked"in h&&void 0!==(y=h.checked)&&y!==t.checked&&m(t,"checked",y,p.checked,!1))}return t}function U(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function T(e,n,r){var o,i;if(t.unmount&&t.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||U(o,null,n)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){t.__e(e,n)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&T(o[i],n,r||"function"!=typeof e.type);r||null==e.__e||d(e.__e),e.__=e.__e=e.__d=void 0}function j(e,t,n){return this.constructor(e,n)}function M(n,r,o){var i,s,a;t.__&&t.__(n,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,a=[],N(r,n=(!i&&o||r).__k=p(_,null,[n]),s||l,l,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?e.call(r.childNodes):null,a,!i&&o?o:s?s.__e:r.firstChild,i),D(a,n)}e=A.slice,t={__e:function(e,t,n,r){for(var o,i,s;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),s=o.__d),s)return o.__E=o}catch(t){e=t}throw e}},n=0,r=!1,C.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=u({},this.state),"function"==typeof e&&(e=e(u({},n),this.props)),e&&u(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),x(this))},C.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),x(this))},C.prototype.render=_,s=[],c="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,k.__r=0;var R=o(856),z=o.t(R,2);const O=BigInt(0),W=BigInt(1),F=BigInt(2),$=BigInt(3),q=BigInt(8),G=Object.freeze({a:O,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:W,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),Y=(e,t)=>(e+t/F)/t,V={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=G,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-W*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,s=BigInt("0x100000000000000000000000000000000"),a=Y(i*e,t),c=Y(-r*e,t);let l=Ce(e-a*n-c*o,t),A=Ce(-a*r-c*i,t);const f=l>s,u=A>s;if(f&&(l=t-l),u&&(A=t-A),l>s||A>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:f,k1:l,k2neg:u,k2:A}}},L=32,Z=32,K=L+1,J=2*L+1;function Q(e){const{a:t,b:n}=G,r=Ce(e*e),o=Ce(r*e);return Ce(o+t*e+n)}const X=G.a===O;class ee extends Error{constructor(e){super(e)}}function te(e){if(!(e instanceof ne))throw new TypeError("JacobianPoint expected")}class ne{constructor(e,t,n){this.x=e,this.y=t,this.z=n}static fromAffine(e){if(!(e instanceof ie))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(ie.ZERO)?ne.ZERO:new ne(e.x,e.y,W)}static toAffineBatch(e){const t=function(e,t=G.P){const n=new Array(e.length),r=e.reduce(((e,r,o)=>r===O?e:(n[o]=e,Ce(e*r,t))),W),o=Be(r,t);return e.reduceRight(((e,r,o)=>r===O?e:(n[o]=Ce(e*n[o],t),Ce(e*r,t))),o),n}(e.map((e=>e.z)));return e.map(((e,n)=>e.toAffine(t[n])))}static normalizeZ(e){return ne.toAffineBatch(e).map(ne.fromAffine)}equals(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e,a=Ce(r*r),c=Ce(s*s),l=Ce(t*c),A=Ce(o*a),f=Ce(Ce(n*s)*c),u=Ce(Ce(i*r)*a);return l===A&&f===u}negate(){return new ne(this.x,Ce(-this.y),this.z)}double(){const{x:e,y:t,z:n}=this,r=Ce(e*e),o=Ce(t*t),i=Ce(o*o),s=e+o,a=Ce(F*(Ce(s*s)-r-i)),c=Ce($*r),l=Ce(c*c),A=Ce(l-F*a),f=Ce(c*(a-A)-q*i),u=Ce(F*t*n);return new ne(A,f,u)}add(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e;if(o===O||i===O)return this;if(t===O||n===O)return e;const a=Ce(r*r),c=Ce(s*s),l=Ce(t*c),A=Ce(o*a),f=Ce(Ce(n*s)*c),u=Ce(Ce(i*r)*a),d=Ce(A-l),p=Ce(u-f);if(d===O)return p===O?this.double():ne.ZERO;const h=Ce(d*d),_=Ce(d*h),y=Ce(l*h),m=Ce(p*p-_-F*y),w=Ce(p*(y-m)-f*_),g=Ce(r*s*d);return new ne(m,w,g)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const t=ne.ZERO;if("bigint"==typeof e&&e===O)return t;let n=ge(e);if(n===W)return this;if(!X){let e=t,r=this;for(;n>O;)n&W&&(e=e.add(r)),r=r.double(),n>>=W;return e}let{k1neg:r,k1:o,k2neg:i,k2:s}=V.splitScalar(n),a=t,c=t,l=this;for(;o>O||s>O;)o&W&&(a=a.add(l)),s&W&&(c=c.add(l)),l=l.double(),o>>=W,s>>=W;return r&&(a=a.negate()),i&&(c=c.negate()),c=new ne(Ce(c.x*V.beta),c.y,c.z),a.add(c)}precomputeWindow(e){const t=X?128/e+1:256/e+1,n=[];let r=this,o=r;for(let i=0;i<t;i++){o=r,n.push(o);for(let t=1;t<2**(e-1);t++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(e,t){!t&&this.equals(ne.BASE)&&(t=ie.BASE);const n=t&&t._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=t&&oe.get(t);r||(r=this.precomputeWindow(n),t&&1!==n&&(r=ne.normalizeZ(r),oe.set(t,r)));let o=ne.ZERO,i=ne.BASE;const s=1+(X?128/n:256/n),a=2**(n-1),c=BigInt(2**n-1),l=2**n,A=BigInt(n);for(let t=0;t<s;t++){const n=t*a;let s=Number(e&c);e>>=A,s>a&&(s-=l,e+=W);const f=n,u=n+Math.abs(s)-1,d=t%2!=0,p=s<0;0===s?i=i.add(re(d,r[f])):o=o.add(re(p,r[u]))}return{p:o,f:i}}multiply(e,t){let n,r,o=ge(e);if(X){const{k1neg:e,k1:i,k2neg:s,k2:a}=V.splitScalar(o);let{p:c,f:l}=this.wNAF(i,t),{p:A,f}=this.wNAF(a,t);c=re(e,c),A=re(s,A),A=new ne(Ce(A.x*V.beta),A.y,A.z),n=c.add(A),r=l.add(f)}else{const{p:e,f:i}=this.wNAF(o,t);n=e,r=i}return ne.normalizeZ([n,r])[0]}toAffine(e){const{x:t,y:n,z:r}=this,o=this.equals(ne.ZERO);null==e&&(e=o?q:Be(r));const i=e,s=Ce(i*i),a=Ce(s*i),c=Ce(t*s),l=Ce(n*a),A=Ce(r*i);if(o)return ie.ZERO;if(A!==W)throw new Error("invZ was invalid");return new ie(c,l)}}function re(e,t){const n=t.negate();return e?n:t}ne.BASE=new ne(G.Gx,G.Gy,W),ne.ZERO=new ne(O,W,O);const oe=new WeakMap;class ie{constructor(e,t){this.x=e,this.y=t}_setWindowSize(e){this._WINDOW_SIZE=e,oe.delete(this)}hasEvenY(){return this.y%F===O}static fromCompressedHex(e){const t=32===e.length,n=me(t?e:e.subarray(1));if(!Se(n))throw new Error("Point is not on curve");let r=function(e){const{P:t}=G,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),a=BigInt(88),c=e*e*e%t,l=c*c*e%t,A=ve(l,$)*l%t,f=ve(A,$)*l%t,u=ve(f,F)*c%t,d=ve(u,r)*u%t,p=ve(d,o)*d%t,h=ve(p,s)*p%t,_=ve(h,a)*h%t,y=ve(_,s)*p%t,m=ve(y,$)*l%t,w=ve(m,i)*d%t,g=ve(w,n)*c%t,C=ve(g,F),v=C*C%t;if(v!==e)throw new Error("Cannot find square root");return C}(Q(n));const o=(r&W)===W;if(t)o&&(r=Ce(-r));else{1==(1&e[0])!==o&&(r=Ce(-r))}const i=new ie(n,r);return i.assertValidity(),i}static fromUncompressedHex(e){const t=me(e.subarray(1,L+1)),n=me(e.subarray(L+1,2*L+1)),r=new ie(t,n);return r.assertValidity(),r}static fromHex(e){const t=we(e),n=t.length,r=t[0];if(n===L)return this.fromCompressedHex(t);if(n===K&&(2===r||3===r))return this.fromCompressedHex(t);if(n===J&&4===r)return this.fromUncompressedHex(t);throw new Error(`Point.fromHex: received invalid point. Expected 32-${K} compressed bytes or ${J} uncompressed bytes, not ${n}`)}static fromPrivateKey(e){return ie.BASE.multiply(Ie(e))}static fromSignature(e,t,n){const{r,s:o}=Ne(t);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=be(we(e)),{n:s}=G,a=2===n||3===n?r+s:r,c=Be(a,s),l=Ce(-i*c,s),A=Ce(o*c,s),f=1&n?"03":"02",u=ie.fromHex(f+de(a)),d=ie.BASE.multiplyAndAddUnsafe(u,l,A);if(!d)throw new Error("Cannot recover signature: point at infinify");return d.assertValidity(),d}toRawBytes(e=!1){return ye(this.toHex(e))}toHex(e=!1){const t=de(this.x);if(e){return`${this.hasEvenY()?"02":"03"}${t}`}return`04${t}${de(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:t,y:n}=this;if(!Se(t)||!Se(n))throw new Error(e);const r=Ce(n*n);if(Ce(r-Q(t))!==O)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new ie(this.x,Ce(-this.y))}double(){return ne.fromAffine(this).double().toAffine()}add(e){return ne.fromAffine(this).add(ne.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return ne.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,t,n){const r=ne.fromAffine(this),o=t===O||t===W||this!==ie.BASE?r.multiplyUnsafe(t):r.multiply(t),i=ne.fromAffine(e).multiplyUnsafe(n),s=o.add(i);return s.equals(ne.ZERO)?void 0:s.toAffine()}}function se(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function ae(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${fe(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:me(n),left:e.subarray(t+2)}}ie.BASE=new ie(G.Gx,G.Gy),ie.ZERO=new ie(O,O);class ce{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromCompact(e){const t=e instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof e&&!t)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=t?fe(e):e;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new ce(_e(r.slice(0,64)),_e(r.slice(64,128)))}static fromDER(e){const t=e instanceof Uint8Array;if("string"!=typeof e&&!t)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${fe(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=ae(e.subarray(2)),{data:r,left:o}=ae(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${fe(o)}`);return{r:t,s:r}}(t?e:ye(e));return new ce(n,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:t}=this;if(!Ee(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Ee(t))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=G.n>>W;return this.s>e}normalizeS(){return this.hasHighS()?new ce(this.r,Ce(-this.s,G.n)):this}toDERRawBytes(){return ye(this.toDERHex())}toDERHex(){const e=se(he(this.s)),t=se(he(this.r)),n=e.length/2,r=t.length/2,o=he(n),i=he(r);return`30${he(r+n+4)}02${i}${t}02${o}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return ye(this.toCompactHex())}toCompactHex(){return de(this.r)+de(this.s)}}function le(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const o=e[t];n.set(o,r),r+=o.length}return n}const Ae=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function fe(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=Ae[e[n]];return t}const ue=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function de(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(O<=e&&e<ue))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function pe(e){const t=ye(de(e));if(32!==t.length)throw new Error("Error: expected 32 bytes");return t}function he(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function _e(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function ye(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=2*n,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[n]=i}return t}function me(e){return _e(fe(e))}function we(e){return e instanceof Uint8Array?Uint8Array.from(e):ye(e)}function ge(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&Ee(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function Ce(e,t=G.P){const n=e%t;return n>=O?n:t+n}function ve(e,t){const{P:n}=G;let r=e;for(;t-- >O;)r*=r,r%=n;return r}function Be(e,t=G.P){if(e===O||t<=O)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=Ce(e,t),r=t,o=O,i=W,s=W,a=O;for(;n!==O;){const e=r/n,t=r%n,c=o-s*e,l=i-a*e;r=n,n=t,o=s,i=a,s=c,a=l}if(r!==W)throw new Error("invert: does not exist");return Ce(o,t)}function be(e,t=!1){const n=function(e){const t=8*e.length-8*Z,n=me(e);return t>0?n>>BigInt(t):n}(e);if(t)return n;const{n:r}=G;return n>=r?n-r:n}let xe,ke;function Ee(e){return O<e&&e<G.n}function Se(e){return O<e&&e<G.P}function Ie(e){let t;if("bigint"==typeof e)t=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if("string"==typeof e){if(e.length!==2*Z)throw new Error("Expected 32 bytes of private key");t=_e(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==Z)throw new Error("Expected 32 bytes of private key");t=me(e)}if(!Ee(t))throw new Error("Expected private key: 0 < key < n");return t}function He(e){return e instanceof ie?(e.assertValidity(),e):ie.fromHex(e)}function Ne(e){if(e instanceof ce)return e.assertValidity(),e;try{return ce.fromDER(e)}catch(t){return ce.fromCompact(e)}}function De(e){return Ce(me(e),G.n)}class Pe{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromHex(e){const t=we(e);if(64!==t.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${t.length}`);const n=me(t.subarray(0,32)),r=me(t.subarray(32,64));return new Pe(n,r)}assertValidity(){const{r:e,s:t}=this;if(!Se(e)||!Ee(t))throw new Error("Invalid signature")}toHex(){return de(this.r)+de(this.s)}toRawBytes(){return ye(this.toHex())}}class Ue{constructor(e,t,n=$e.randomBytes()){if(null==e)throw new TypeError(`sign: Expected valid message, not "${e}"`);this.m=we(e);const{x:r,scalar:o}=this.getScalar(Ie(t));if(this.px=r,this.d=o,this.rand=we(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(e){const t=ie.fromPrivateKey(e),n=t.hasEvenY()?e:G.n-e;return{point:t,scalar:n,x:t.toRawX()}}initNonce(e,t){return pe(e^me(t))}finalizeNonce(e){const t=Ce(me(e),G.n);if(t===O)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(t);return{R:n,rx:r,k:o}}finalizeSig(e,t,n,r){return new Pe(e.x,Ce(t+n*r,G.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:e,d:t,px:n,rand:r}=this,o=$e.taggedHash,i=this.initNonce(t,await o(We.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(await o(We.nonce,i,n,e)),l=De(await o(We.challenge,a,n,e)),A=this.finalizeSig(s,c,l,t);return await Me(A,e,n)||this.error(),A}calcSync(){const{m:e,d:t,px:n,rand:r}=this,o=$e.taggedHashSync,i=this.initNonce(t,o(We.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(o(We.nonce,i,n,e)),l=De(o(We.challenge,a,n,e)),A=this.finalizeSig(s,c,l,t);return Re(A,e,n)||this.error(),A}}function Te(e,t,n){const r=e instanceof Pe,o=r?e:Pe.fromHex(e);return r&&o.assertValidity(),{...o,m:we(t),P:He(n)}}function je(e,t,n,r){const o=ie.BASE.multiplyAndAddUnsafe(t,Ie(n),Ce(-r,G.n));return!(!o||!o.hasEvenY()||o.x!==e)}async function Me(e,t,n){try{const{r,s:o,m:i,P:s}=Te(e,t,n),a=De(await $e.taggedHash(We.challenge,pe(r),s.toRawX(),i));return je(r,s,o,a)}catch(e){return!1}}function Re(e,t,n){try{const{r,s:o,m:i,P:s}=Te(e,t,n),a=De($e.taggedHashSync(We.challenge,pe(r),s.toRawX(),i));return je(r,s,o,a)}catch(e){if(e instanceof ee)throw e;return!1}}const ze={Signature:Pe,getPublicKey:function(e){return ie.fromPrivateKey(e).toRawX()},sign:async function(e,t,n){return new Ue(e,t,n).calc()},verify:Me,signSync:function(e,t,n){return new Ue(e,t,n).calcSync()},verifySync:Re};ie.BASE._setWindowSize(8);const Oe={node:z,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},We={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},Fe={},$e={bytesToHex:fe,hexToBytes:ye,concatBytes:le,mod:Ce,invert:Be,isValidPrivateKey(e){try{return Ie(e),!0}catch(e){return!1}},_bigintTo32Bytes:pe,_normalizePrivateKey:Ie,hashToPrivateKey:e=>{e=we(e);const t=Z+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return pe(Ce(me(e),G.n-W)+W)},randomBytes:(e=32)=>{if(Oe.web)return Oe.web.getRandomValues(new Uint8Array(e));if(Oe.node){const{randomBytes:t}=Oe.node;return Uint8Array.from(t(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>$e.hashToPrivateKey($e.randomBytes(Z+8)),precompute(e=8,t=ie.BASE){const n=t===ie.BASE?t:new ie(t.x,t.y);return n._setWindowSize(e),n.multiply($),n},sha256:async(...e)=>{if(Oe.web){const t=await Oe.web.subtle.digest("SHA-256",le(...e));return new Uint8Array(t)}if(Oe.node){const{createHash:t}=Oe.node,n=t("sha256");return e.forEach((e=>n.update(e))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(Oe.web){const n=await Oe.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=le(...t),o=await Oe.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(Oe.node){const{createHmac:n}=Oe.node,r=n("sha256",e);return t.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=Fe[e];if(void 0===n){const t=await $e.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Fe[e]=n}return $e.sha256(n,...t)},taggedHashSync:(e,...t)=>{if("function"!=typeof xe)throw new ee("sha256Sync is undefined, you need to set it");let n=Fe[e];if(void 0===n){const t=xe(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Fe[e]=n}return xe(n,...t)},_JacobianPoint:ne};Object.defineProperties($e,{sha256Sync:{configurable:!1,get:()=>xe,set(e){xe||(xe=e)}},hmacSha256Sync:{configurable:!1,get:()=>ke,set(e){ke||(ke=e)}}});var qe=0;function Ge(e,n,r,o,i,s){var a,c,l={};for(c in n)"ref"==c?a=n[c]:l[c]=n[c];var A={type:e,props:l,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--qe,__source:i,__self:s};if("function"==typeof e&&(a=e.defaultProps))for(c in a)void 0===l[c]&&(l[c]=a[c]);return t.vnode&&t.vnode(A),A}const Ye=function(e){let{additionalClasses:t}=e,n="keyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ge("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:Ge("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};var Ve=o(379),Le=o.n(Ve),Ze=o(795),Ke=o.n(Ze),Je=o(569),Qe=o.n(Je),Xe=o(565),et=o.n(Xe),tt=o(216),nt=o.n(tt),rt=o(589),ot=o.n(rt),it=o(218),st={};st.styleTagTransform=ot(),st.setAttributes=et(),st.insert=Qe().bind(null,"head"),st.domAPI=Ke(),st.insertStyleElement=nt();Le()(it.Z,st);it.Z&&it.Z.locals&&it.Z.locals;var at,ct,lt,At,ft=0,ut=[],dt=[],pt=t.__b,ht=t.__r,_t=t.diffed,yt=t.__c,mt=t.unmount;function wt(e,n){t.__h&&t.__h(ct,e,ft||n),ft=0;var r=ct.__H||(ct.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:dt}),r.__[e]}function gt(e){return ft=1,function(e,t,n){var r=wt(at++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):kt(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=ct,!ct.u)){ct.u=!0;var o=ct.shouldComponentUpdate;ct.shouldComponentUpdate=function(e,t,n){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(e){return e.__c}));if(i.every((function(e){return!e.__N})))return!o||o.call(this,e,t,n);var s=!1;return i.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(s=!0)}})),!(!s&&r.__c.props===e)&&(!o||o.call(this,e,t,n))}}return r.__N||r.__}(kt,e)}function Ct(){for(var e;e=ut.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(bt),e.__H.__h.forEach(xt),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){ct=null,pt&&pt(e)},t.__r=function(e){ht&&ht(e),at=0;var t=(ct=e.__c).__H;t&&(lt===ct?(t.__h=[],ct.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=dt,e.__N=e.i=void 0}))):(t.__h.forEach(bt),t.__h.forEach(xt),t.__h=[])),lt=ct},t.diffed=function(e){_t&&_t(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==ut.push(n)&&At===t.requestAnimationFrame||((At=t.requestAnimationFrame)||Bt)(Ct)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==dt&&(e.__=e.__V),e.i=void 0,e.__V=dt}))),lt=ct=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(bt),e.__h=e.__h.filter((function(e){return!e.__||xt(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),yt&&yt(e,n)},t.unmount=function(e){mt&&mt(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{bt(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var vt="function"==typeof requestAnimationFrame;function Bt(e){var t,n=function(){clearTimeout(r),vt&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);vt&&(t=requestAnimationFrame(n))}function bt(e){var t=ct,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),ct=t}function xt(e){var t=ct;e.__c=e.__(),ct=t}function kt(e,t){return"function"==typeof t?t(e):t}const Et=function(e){let{additionalClasses:t}=e,n="copyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ge("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Ge("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};const St=function(e){let{iconClasses:t,displayText:n,copyText:r}=e;const[o,i]=gt(!1);return Ge("button",{class:"linkCopyBtn",onClick:function(){try{navigator.clipboard.writeText(r),i(!0),setTimeout((()=>{i(!1)}),2e3)}catch(e){console.error("Failed to copy: ",e)}},children:[Ge(Et,{additionalClasses:t}),n&&Ge("span",{class:"displayText",children:n}),Ge("span",{class:"copyText",children:r}),o&&Ge("span",{class:"tooltip",children:"Copied"})]})};var It=o(715);function Ht(e){let t=[];for(let n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t}const Nt=function(e){let t,n,{profilePkey:r,profile:o}=e;return r&&o&&(n=function(e){const t=Ht(e);console.log("pubkey",e,t);const n=It.gW.toWords(t);return It.gW.encode("npub",n,120)}(r),t=`https://media.nostr.band/thumbs/${r.slice(-4)}/${r}-picture-64`),Ge("div",{class:"cardProfile",children:[Ge("img",{class:"profileImg",src:t||"https://via.placeholder.com/48?text=Loading"}),Ge("div",{class:"profileDetails",children:[Ge("div",{class:"profileName",children:o.display_name||"Loading..."}),Ge("div",{class:"profilePkey",children:[Ge(Ye,{additionalClasses:"w-4 h-4"}),Ge("span",{class:"pkey",children:n||"npub..."}),Ge(St,{iconClasses:"w-4 h-4",copyText:n})]})]})]})};const Dt=function(e){let{additionalClasses:t}=e,n="heartIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ge("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ge("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const Pt=function(e){let{additionalClasses:t}=e,n="replyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ge("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ge("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const Ut=function(e){let{additionalClasses:t}=e,n="repostIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ge("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ge("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const Tt=function(e){let{additionalClasses:t}=e,n="linkIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ge("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Ge("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const jt=function(e){let t,n,r,{note:o,repliesCount:i,repostsCount:s,likesCount:a}=e;return o.id&&o.created_at&&(t=new Date(1e3*o.created_at),r=t.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"}),n=function(e){const t=Ht(e);console.log("note",e,t);const n=It.gW.toWords(t);return It.gW.encode("note",n,120)}(o.id)),Ge("div",{class:"cardMeta",children:[Ge("div",{class:"cardDate",children:r}),Ge("hr",{}),Ge("div",{class:"cardInteractions",children:[Ge("div",{class:"interactionContainer",children:[Ge(Pt,{additionalClasses:"w-5 h-5"}),Ge("span",{class:"repliesCount",children:i})]}),Ge("div",{class:"interactionContainer",children:[Ge(Ut,{additionalClasses:"w-5 h-5"}),Ge("span",{class:"repostsCount",children:s})]}),Ge("div",{class:"interactionContainer",children:[Ge(Dt,{additionalClasses:"w-5 h-5"}),Ge("span",{class:"likesCount",children:a})]}),Ge("div",{class:"interactionContainer",children:Ge("a",{href:`https://nostr.band/${n}`,class:"linkLink",children:[Ge(Tt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),Ge("span",{class:"displayText",children:"Open"})]})}),Ge("div",{class:"interactionContainer",children:Ge(St,{iconClasses:"w-5 h-5",displayText:"Copy Note ID",copyText:n})})]})]})};const Mt=class extends C{constructor(e){super(e),this.state={noteId:e.noteId,relay:e.relay||"wss://relay.nostr.band",note:{},profile:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0}}sha256(e){const t=(new TextEncoder).encode(e);return $e.sha256(t).then((e=>Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join("")))}async getNostrEventID(e){const t=[0,e.pubkey,e.created_at,e.kind,e.tags,e.content],n=JSON.stringify(t);return await this.sha256(n)}verifyNostrSignature(e){return ze.verify(e.sig,e.id,e.pubkey)}async validateNostrEvent(e){if(e.id!==await this.getNostrEventID(e))return!1;if("string"!=typeof e.content)return!1;if("number"!=typeof e.created_at)return!1;if(!Array.isArray(e.tags))return!1;for(let t=0;t<e.tags.length;t++){let n=e.tags[t];if(!Array.isArray(n))return!1;for(let e=0;e<n.length;e++)if("object"==typeof n[e])return!1}return!0}componentDidMount(){const e=new WebSocket(this.state.relay);e.onopen=()=>{this.fetchNote({socket:e}),console.log(`Connected to Nostr relay: ${e.url}`)},e.onerror=()=>{console.log(`Failed to connect to Nostr relay: ${e.url}`)};const t={};e.onmessage=async n=>{try{const r=JSON.parse(n.data);if(!r||!r.length)throw"Bad reply from relay";if("NOTICE"==r[0]&&2==r.length)return void console.log("notice from",e.url,r[1]);if("EOSE"==r[0]&&r.length>1)return void(r[1]in t&&t[r[1]].done());if("EVENT"!=r[0]||r.length<3)throw"Unknown reply from relay";const o=r[2];if(!(o.id&&o.pubkey&&o.sig&&await this.validateNostrEvent(o)&&this.verifyNostrSignature(o)))throw"Bad event from relay";if(r[1]in t){const e=t[r[1]];e.events.push(o),e.sub.limit&&1==e.sub.limit&&e.done()}}catch(t){console.log("relay",e.url,"bad message",n,"error",t),err(t)}},e.listEvents=n=>{let{sub:r,ok:o,err:i}=n,s="embed-"+Math.random();const a=["REQ",s,r];e.send(JSON.stringify(a));const c=()=>{const n=s;s=null,e.send(JSON.stringify(["CLOSE",n])),delete t[n]},l=[],A=()=>{s&&(clearTimeout(f),c(),o(l))},f=setTimeout((function(){c(),l.length?A():i("timeout on relay",e.url)}),r.limit&&1==r.limit?2e3:4e3);t[s]={ok:o,err:i,events:l,done:A,sub:r}}}getEvent(e){let{socket:t,sub:n,ok:r,err:o}=e;return new Promise(((e,r)=>{n.limit=1,t.listEvents({sub:n,ok:t=>{e(t?t[0]:null)},err:r})}))}listEvents(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{t.listEvents({sub:n,ok:e,err:r})}))}fetchNote(e){let{socket:t}=e;const n={ids:[this.state.noteId],kinds:[1]};this.getEvent({socket:t,sub:n}).then((e=>{e?(this.setState({note:e,profilePkey:e.pubkey}),this.fetchProfile({socket:t,profilePkey:e.pubkey}),this.fetchMeta({socket:t,noteId:this.state.noteId})):console.log("Error: We can't find that note on this relay")})).catch((e=>{console.log(`Error fetching note: ${e}`)}))}fetchProfile(e){let{socket:t,profilePkey:n}=e;const r={kinds:[0],authors:[n]};this.getEvent({socket:t,sub:r}).then((e=>{if(e){let t=JSON.parse(e.content);this.setState({profile:t})}})).catch((e=>{console.log(`Error fetching profile: ${e}`)}))}fetchMeta(e){let{socket:t,noteId:n}=e;const r={kinds:[1,6,7],"#e":[n]};this.listEvents({socket:t,sub:r}).then((e=>{for(let t of e)switch(t.kind){case 6:this.setState((e=>({repostsCount:e.repostsCount+1})));break;case 7:this.setState((e=>({likesCount:e.likesCount+1})));break;case 1:this.setState((e=>({repliesCount:e.repliesCount+1})));break;default:console.log("Unknown note kind")}}))}render(){return Ge("div",{class:"nostrEmbedCard",children:[Ge(Nt,{profilePkey:this.state.profilePkey,profile:this.state.profile}),Ge("div",{class:"cardContent",children:this.state.note.content}),Ge(jt,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount})]})}};function Rt(e,t,n){const r=document.querySelector(t)?document.querySelector(t):document.querySelector("body");M(p(Mt,{noteId:e,relay:n}),r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,