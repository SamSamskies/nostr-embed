/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nostrEmbed=t():e.nostrEmbed=t()}(this,(()=>(()=>{var e,t,n={187:(e,t)=>{"use strict";function n(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function r(...e){const t=(e,t)=>n=>e(t(n));return{encode:Array.from(e).reverse().reduce(((e,n)=>e?t(e,n.encode):n.encode),void 0),decode:e.reduce(((e,n)=>e?t(e,n.decode):n.decode),void 0)}}function o(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("alphabet.encode input should be an array of numbers");return t.map((t=>{if(n(t),t<0||t>=e.length)throw new Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);return e[t]}))},decode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("alphabet.decode input should be array of strings");return t.map((t=>{if("string"!=typeof t)throw new Error(`alphabet.decode: not string element=${t}`);const n=e.indexOf(t);if(-1===n)throw new Error(`Unknown letter: "${t}". Allowed: ${e}`);return n}))}}}function i(e=""){if("string"!=typeof e)throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("join.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`join.encode: non-string input=${e}`);return t.join(e)},decode:t=>{if("string"!=typeof t)throw new Error("join.decode input should be string");return t.split(e)}}}function s(e,t="="){if(n(e),"string"!=typeof t)throw new Error("padding chr should be string");return{encode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.encode: non-string input=${e}`);for(;n.length*e%8;)n.push(t);return n},decode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.decode: non-string input=${e}`);let r=n.length;if(r*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;r>0&&n[r-1]===t;r--)if(!((r-1)*e%8))throw new Error("Invalid padding: string has too much padding");return n.slice(0,r)}}}function a(e){if("function"!=typeof e)throw new Error("normalize fn should be function");return{encode:e=>e,decode:t=>e(t)}}function c(e,t,r){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let o=0;const i=[],s=Array.from(e);for(s.forEach((e=>{if(n(e),e<0||e>=t)throw new Error(`Wrong integer: ${e}`)}));;){let e=0,n=!0;for(let i=o;i<s.length;i++){const a=s[i],c=t*e+a;if(!Number.isSafeInteger(c)||t*e/t!==e||c-a!=t*e)throw new Error("convertRadix: carry overflow");if(e=c%r,s[i]=Math.floor(c/r),!Number.isSafeInteger(s[i])||s[i]*r+e!==c)throw new Error("convertRadix: carry overflow");n&&(s[i]?n=!1:o=i)}if(i.push(e),n)break}for(let t=0;t<e.length-1&&0===e[t];t++)i.push(0);return i.reverse()}Object.defineProperty(t,"__esModule",{value:!0}),t.bytes=t.stringToBytes=t.str=t.bytesToString=t.hex=t.utf8=t.bech32m=t.bech32=t.base58check=t.base58xmr=t.base58xrp=t.base58flickr=t.base58=t.base64url=t.base64=t.base32crockford=t.base32hex=t.base32=t.base16=t.utils=t.assertNumber=void 0,t.assertNumber=n;const l=(e,t)=>t?l(t,e%t):e,d=(e,t)=>e+(t-l(e,t));function f(e,t,r,o){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(t<=0||t>32)throw new Error(`convertRadix2: wrong from=${t}`);if(r<=0||r>32)throw new Error(`convertRadix2: wrong to=${r}`);if(d(t,r)>32)throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${d(t,r)}`);let i=0,s=0;const a=2**r-1,c=[];for(const o of e){if(n(o),o>=2**t)throw new Error(`convertRadix2: invalid data word=${o} from=${t}`);if(i=i<<t|o,s+t>32)throw new Error(`convertRadix2: carry overflow pos=${s} from=${t}`);for(s+=t;s>=r;s-=r)c.push((i>>s-r&a)>>>0);i&=2**s-1}if(i=i<<r-s&a,!o&&s>=t)throw new Error("Excess padding");if(!o&&i)throw new Error(`Non-zero padding: ${i}`);return o&&s>0&&c.push(i>>>0),c}function u(e){return n(e),{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return c(Array.from(t),256,e)},decode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("radix.decode input should be array of strings");return Uint8Array.from(c(t,e,256))}}}function h(e,t=!1){if(n(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(d(8,e)>32||d(e,8)>32)throw new Error("radix2: carry overflow");return{encode:n=>{if(!(n instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return f(Array.from(n),8,e,!t)},decode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(f(n,e,8,t))}}}function A(e){if("function"!=typeof e)throw new Error("unsafeWrapper fn should be function");return function(...t){try{return e.apply(null,t)}catch(e){}}}function p(e,t){if(n(e),"function"!=typeof t)throw new Error("checksum fn should be function");return{encode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.encode: input should be Uint8Array");const r=t(n).slice(0,e),o=new Uint8Array(n.length+e);return o.set(n),o.set(r,n.length),o},decode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.decode: input should be Uint8Array");const r=n.slice(0,-e),o=t(r).slice(0,e),i=n.slice(-e);for(let t=0;t<e;t++)if(o[t]!==i[t])throw new Error("Invalid checksum");return r}}}t.utils={alphabet:o,chain:r,checksum:p,radix:u,radix2:h,join:i,padding:s},t.base16=r(h(4),o("0123456789ABCDEF"),i("")),t.base32=r(h(5),o("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),s(5),i("")),t.base32hex=r(h(5),o("0123456789ABCDEFGHIJKLMNOPQRSTUV"),s(5),i("")),t.base32crockford=r(h(5),o("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),i(""),a((e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")))),t.base64=r(h(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),s(6),i("")),t.base64url=r(h(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),s(6),i(""));const g=e=>r(u(58),o(e),i(""));t.base58=g("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),t.base58flickr=g("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),t.base58xrp=g("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");const w=[0,2,3,5,6,7,9,10,11];t.base58xmr={encode(e){let n="";for(let r=0;r<e.length;r+=8){const o=e.subarray(r,r+8);n+=t.base58.encode(o).padStart(w[o.length],"1")}return n},decode(e){let n=[];for(let r=0;r<e.length;r+=11){const o=e.slice(r,r+11),i=w.indexOf(o.length),s=t.base58.decode(o);for(let e=0;e<s.length-i;e++)if(0!==s[e])throw new Error("base58xmr: wrong padding");n=n.concat(Array.from(s.slice(s.length-i)))}return Uint8Array.from(n)}};t.base58check=e=>r(p(4,(t=>e(e(t)))),t.base58);const y=r(o("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),i("")),m=[996825010,642813549,513874426,1027748829,705979059];function _(e){const t=e>>25;let n=(33554431&e)<<5;for(let e=0;e<m.length;e++)1==(t>>e&1)&&(n^=m[e]);return n}function C(e,t,n=1){const r=e.length;let o=1;for(let t=0;t<r;t++){const n=e.charCodeAt(t);if(n<33||n>126)throw new Error(`Invalid prefix (${e})`);o=_(o)^n>>5}o=_(o);for(let t=0;t<r;t++)o=_(o)^31&e.charCodeAt(t);for(let e of t)o=_(o)^e;for(let e=0;e<6;e++)o=_(o);return o^=n,y.encode(f([o%2**30],30,5,!1))}function b(e){const t="bech32"===e?1:734539939,n=h(5),r=n.decode,o=n.encode,i=A(r);function s(e,n=90){if("string"!=typeof e)throw new Error("bech32.decode input should be string, not "+typeof e);if(e.length<8||!1!==n&&e.length>n)throw new TypeError(`Wrong string length: ${e.length} (${e}). Expected (8..${n})`);const r=e.toLowerCase();if(e!==r&&e!==e.toUpperCase())throw new Error("String must be lowercase or uppercase");const o=(e=r).lastIndexOf("1");if(0===o||-1===o)throw new Error('Letter "1" must be present between prefix and data only');const i=e.slice(0,o),s=e.slice(o+1);if(s.length<6)throw new Error("Data must be at least 6 characters long");const a=y.decode(s).slice(0,-6),c=C(i,a,t);if(!s.endsWith(c))throw new Error(`Invalid checksum in ${e}: expected "${c}"`);return{prefix:i,words:a}}return{encode:function(e,n,r=90){if("string"!=typeof e)throw new Error("bech32.encode prefix should be string, not "+typeof e);if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("bech32.encode words should be array of numbers, not "+typeof n);const o=e.length+7+n.length;if(!1!==r&&o>r)throw new TypeError(`Length ${o} exceeds limit ${r}`);return`${e=e.toLowerCase()}1${y.encode(n)}${C(e,n,t)}`},decode:s,decodeToBytes:function(e){const{prefix:t,words:n}=s(e,!1);return{prefix:t,words:n,bytes:r(n)}},decodeUnsafe:A(s),fromWords:r,fromWordsUnsafe:i,toWords:o}}t.bech32=b("bech32"),t.bech32m=b("bech32m"),t.utf8={encode:e=>(new TextDecoder).decode(e),decode:e=>(new TextEncoder).encode(e)},t.hex=r(h(4),o("0123456789abcdef"),i(""),a((e=>{if("string"!=typeof e||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})));const v={utf8:t.utf8,hex:t.hex,base16:t.base16,base32:t.base32,base64:t.base64,base64url:t.base64url,base58:t.base58,base58xmr:t.base58xmr},k=`Invalid encoding type. Available types: ${Object.keys(v).join(", ")}`;t.bytesToString=(e,t)=>{if("string"!=typeof e||!v.hasOwnProperty(e))throw new TypeError(k);if(!(t instanceof Uint8Array))throw new TypeError("bytesToString() expects Uint8Array");return v[e].encode(t)},t.str=t.bytesToString;t.stringToBytes=(e,t)=>{if(!v.hasOwnProperty(e))throw new TypeError(k);if("string"!=typeof t)throw new TypeError("stringToBytes() expects string");return v[e].decode(t)},t.bytes=t.stringToBytes},715:(e,t)=>{"use strict";t.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let e=0;e<32;e++){const t=n.charAt(e);r[t]=e}function o(e){const t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function i(e){let t=1;for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=o(t)^r>>5}t=o(t);for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);t=o(t)^31&r}return t}function s(e,t,n,r){let o=0,i=0;const s=(1<<n)-1,a=[];for(let r=0;r<e.length;++r)for(o=o<<t|e[r],i+=t;i>=n;)i-=n,a.push(o>>i&s);if(r)i>0&&a.push(o<<n-i&s);else{if(i>=t)return"Excess padding";if(o<<n-i&s)return"Non-zero padding"}return a}function a(e){return s(e,8,5,!0)}function c(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t}function l(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}function d(e){let t;function s(e,n){if(n=n||90,e.length<8)return e+" too short";if(e.length>n)return"Exceeds length limit";const s=e.toLowerCase(),a=e.toUpperCase();if(e!==s&&e!==a)return"Mixed-case string "+e;const c=(e=s).lastIndexOf("1");if(-1===c)return"No separator character for "+e;if(0===c)return"Missing prefix for "+e;const l=e.slice(0,c),d=e.slice(c+1);if(d.length<6)return"Data too short";let f=i(l);if("string"==typeof f)return f;const u=[];for(let e=0;e<d.length;++e){const t=d.charAt(e),n=r[t];if(void 0===n)return"Unknown character "+t;f=o(f)^n,e+6>=d.length||u.push(n)}return f!==t?"Invalid checksum for "+e:{prefix:l,words:u}}return t="bech32"===e?1:734539939,{decodeUnsafe:function(e,t){const n=s(e,t);if("object"==typeof n)return n},decode:function(e,t){const n=s(e,t);if("object"==typeof n)return n;throw new Error(n)},encode:function(e,r,s){if(s=s||90,e.length+7+r.length>s)throw new TypeError("Exceeds length limit");let a=i(e=e.toLowerCase());if("string"==typeof a)throw new Error(a);let c=e+"1";for(let e=0;e<r.length;++e){const t=r[e];if(t>>5!=0)throw new Error("Non 5-bit word");a=o(a)^t,c+=n.charAt(t)}for(let e=0;e<6;++e)a=o(a);a^=t;for(let e=0;e<6;++e){c+=n.charAt(a>>5*(5-e)&31)}return c},toWords:a,fromWordsUnsafe:c,fromWords:l}}t.gW=d("bech32"),d("bech32m")},218:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.ne-relative{position:relative}.ne-block{display:block}.ne-flex{display:flex}.ne-hidden{display:none}.ne-h-12{height:3rem}.ne-w-12{width:3rem}.ne-w-5{width:1.25rem}.ne-w-full{width:100%}.ne-cursor-pointer{cursor:pointer}.ne-flex-row{flex-direction:row}.ne-flex-col{flex-direction:column}.ne-items-center{align-items:center}.ne-justify-between{justify-content:space-between}.ne-gap-1{gap:.25rem}.ne-gap-2{gap:.5rem}.ne-gap-4{gap:1rem}.ne-break-words{word-wrap:break-word}.ne-rounded-lg{border-radius:.5rem}.ne-bg-\\[\\#fcfcfc\\]{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity))}.ne-px-4{padding-left:1rem;padding-right:1rem}.ne-py-5{padding-bottom:1.25rem;padding-top:1.25rem}.ne-pb-3{padding-bottom:.75rem}.ne-font-sans{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.ne-text-lg{font-size:1.125rem;line-height:1.75rem}.ne-text-gray-900{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.ne-text-red-800{--tw-text-opacity:1;color:#991b1b;color:rgb(153 27 27/var(--tw-text-opacity))}.ne-no-underline{text-decoration-line:none}.ne-opacity-30{opacity:.3}.nostrEmbedCard{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity));border-radius:.5rem;display:flex;flex-direction:column;gap:2rem;padding:1.25rem 1rem .75rem}@media (min-width:768px){.nostrEmbedCard{max-width:600px}}.nostrEmbedCard{border:1px solid #ddd;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;text-align:left}.cardContent{word-wrap:break-word;font-size:1.125rem;line-height:1.75rem;white-space:pre-line}.cardContentMedia{text-align:center}.cardContentMedia>iframe,.cardContentMedia>img,.cardContentMedia>video{border-radius:15px;width:50%}.cardProfile{align-items:center;display:flex;flex-direction:row;gap:1rem}.profileImg{border-radius:9999px;height:3rem;width:3rem}.profileDetails{display:flex;flex-direction:column}.profileName{font-size:1.125rem;font-weight:700;line-height:1.75rem}.profileName a{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity));text-decoration-line:none}.profileName a:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.profilePkey{align-items:center;flex-direction:row}.cardMeta,.profilePkey{display:flex;gap:.25rem}.cardMeta{flex-direction:column}@media (min-width:768px){.cardMeta{gap:.5rem}}hr{border-color:#ddd;margin:.25rem;opacity:.3;width:100%}.cardInteractions{display:flex;flex-direction:row;justify-content:space-between}@media (min-width:768px){.cardInteractions{gap:2.5rem;justify-content:flex-start}}.interactionContainer{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyIcon,.heartIcon,.linkIcon,.replyIcon,.repostIcon{display:block;height:1.25rem;width:1.25rem}.copyIcon,.heartIcon,.linkCopyBtn,.linkIcon,.linkLink,.replyIcon,.repostIcon{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.linkCopyBtn,.linkLink{align-items:center;background-color:transparent;border:0;cursor:pointer;display:flex;flex-direction:row;gap:.5rem;position:relative;text-decoration-line:none}.linkCopyBtn:hover,.linkCopyBtn:hover .copyIcon,.linkLink:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.linkCopyBtn.green,.linkCopyBtn.green .copyIcon{--tw-text-opacity:1;color:#16a34a;color:rgb(22 163 74/var(--tw-text-opacity))}.displayText{display:none}@media (min-width:768px){.displayText{display:flex;font-size:.875rem;line-height:1.25rem;visibility:visible}}.copyText{display:none}.nostrichLink{display:flex;flex-grow:1;justify-content:flex-end}.cardTitle{margin:0}.cardDescription{margin-top:0}.cardList{display:flex;flex-direction:column;gap:20px;margin-top:10px}.profileWithoutImg{background-color:#e9e9e9;border-radius:50%;height:50px;width:50px}.diffProfiles{font-size:1.2rem;font-weight:700}@media (min-width:768px){.md\\:ne-visible{visibility:visible}.md\\:ne-flex{display:flex}.md\\:ne-max-w-\\[600px\\]{max-width:600px}.md\\:ne-justify-start{justify-content:flex-start}}","",{version:3,sources:["webpack://./src/components/style.css","<no source>"],names:[],mappings:"AAAA,iBAAA,uBAAc,CAAd,uBAAc,CAAd,kBAAc,CAAd,kBAAc,CAAd,aAAc,CAAd,aAAc,CAAd,aAAc,CAAd,cAAc,CAAd,cAAc,CAAd,YAAc,CAAd,YAAc,CAAd,iBAAc,CAAd,qCAAc,CAAd,6BAAc,CAAd,4BAAc,CAAd,2BAAc,CAAd,cAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,iBAAc,CAAd,0BAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,uCAAc,CAAd,gCAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,WAAc,CAAd,iBAAc,CAAd,eAAc,CAAd,gBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,eAAc,CAAd,YAAc,CAAd,kBAAc,CAAd,oBAAc,CAAd,0BAAc,CAAd,wBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,wBAAc,CAAd,qBAAc,CAAd,WAAA,uBAAc,CAAd,uBAAc,CAAd,kBAAc,CAAd,kBAAc,CAAd,aAAc,CAAd,aAAc,CAAd,aAAc,CAAd,cAAc,CAAd,cAAc,CAAd,YAAc,CAAd,YAAc,CAAd,iBAAc,CAAd,qCAAc,CAAd,6BAAc,CAAd,4BAAc,CAAd,2BAAc,CAAd,cAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,iBAAc,CAAd,0BAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,uCAAc,CAAd,gCAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,WAAc,CAAd,iBAAc,CAAd,eAAc,CAAd,gBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,eAAc,CAAd,YAAc,CAAd,kBAAc,CAAd,oBAAc,CAAd,0BAAc,CAAd,wBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,wBAAc,CAAd,qBAAc,CAEd,aAAA,iBAAmB,CAAnB,UAAA,aAAmB,CAAnB,SAAA,YAAmB,CAAnB,WAAA,YAAmB,CAAnB,SAAA,WAAmB,CAAnB,SAAA,UAAmB,CAAnB,QAAA,aAAmB,CAAnB,WAAA,UAAmB,CAAnB,mBAAA,cAAmB,CAAnB,aAAA,kBAAmB,CAAnB,aAAA,qBAAmB,CAAnB,iBAAA,kBAAmB,CAAnB,oBAAA,6BAAmB,CAAnB,UAAA,UAAmB,CAAnB,UAAA,SAAmB,CAAnB,UAAA,QAAmB,CAAnB,gBAAA,oBAAmB,CAAnB,eAAA,mBAAmB,CAAnB,oBAAA,iBAAmB,CAAnB,wBAAmB,CAAnB,sDAAmB,CAAnB,SAAA,iBAAmB,CAAnB,kBAAmB,CAAnB,SAAA,sBAAmB,CAAnB,mBAAmB,CAAnB,SAAA,qBAAmB,CAAnB,cAAA,iNAAmB,CAAnB,YAAA,kBAAmB,CAAnB,mBAAmB,CAAnB,kBAAA,mBAAmB,CAAnB,aAAmB,CAAnB,0CAAmB,CAAnB,iBAAA,mBAAmB,CAAnB,aAAmB,CAAnB,2CAAmB,CAAnB,iBAAA,yBAAmB,CAAnB,eAAA,UAAmB,CAGjB,gBAAA,iBAA6G,CAA7G,wBAA6G,CAA7G,sDAA6G,CAA7G,mBAA6G,CAA7G,YAA6G,CAA7G,qBAA6G,CAA7G,QAA6G,CAA7G,2BAA6G,CAA7G,yBAAA,gBAAA,eAA6G,CAAA,CAC7G,gBACA,qBAAsB,CADtB,iNAAgC,CAAhC,eAAgC,CAKhC,aAAA,oBAAuD,CAAvD,kBAAuD,CAAvD,mBAAuD,CAAvD,oBAAuD,CAGzD,kBACE,iBACF,CAEA,uEAGE,kBAAmB,CACnB,SACF,CAGE,aAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,QAAmD,CAInD,YAAA,oBAAsC,CAAtC,WAAsC,CAAtC,UAAsC,CAItC,gBAAA,YAA0B,CAA1B,qBAA0B,CAI1B,aAAA,kBAA8B,CAA9B,eAA8B,CAA9B,mBAA8B,CAI9B,eAAA,mBAAuC,CAAvC,aAAuC,CAAvC,0CAAuC,CAAvC,yBAAuC,CAGvC,qBAAA,mBAAuB,CAAvB,aAAuB,CAAvB,0CAAuB,CAIvB,aAAA,kBAAmD,CAAnD,kBAAmD,CAInD,uBAJA,YAAmD,CAAnD,UAI+C,CAA/C,UAAA,qBAA+C,CAA/C,yBAAA,UAAA,SAA+C,CAAA,CAI/C,GACA,iBAAkB,CADlB,aAAqC,CAArC,UAAqC,CAArC,UAAqC,CAKrC,kBAAA,YAA8E,CAA9E,kBAA8E,CAA9E,6BAA8E,CAA9E,yBAAA,kBAAA,UAA8E,CAA9E,0BAA8E,CAAA,CAI9E,sBAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,SAAmD,CAQnD,sDAAA,aAA8C,CAA9C,cAA8C,CAA9C,aAA8C,CAK9C,6EALA,mBAA8C,CAA9C,aAA8C,CAA9C,0CAKkH,CAAlH,uBAAA,kBAAkH,CAElH,4BAA6B,CAD7B,QAAS,CADT,cAAkH,CAAlH,YAAkH,CAAlH,kBAAkH,CAAlH,SAAkH,CAAlH,iBAAkH,CAAlH,yBAAkH,CAQlH,gEAAA,mBAAuB,CAAvB,aAAuB,CAAvB,0CAAuB,CAKvB,gDAAA,mBAAwB,CAAxB,aAAwB,CAAxB,2CAAwB,CAIxB,aAAA,YAAuD,CAAvD,yBAAA,aAAA,YAAuD,CAAvD,iBAAuD,CAAvD,mBAAuD,CAAvD,kBAAuD,CAAA,CAIvD,UAAA,YAAgB,CAIhB,cAAA,YAAc,CACd,WAAY,CACZ,wBAFc,CAKhB,WACE,QACF,CAEA,iBACE,YACF,CAEA,UACE,YAAa,CACb,qBAAsB,CACtB,QAAS,CACT,eACF,CAEA,mBAGE,wBAAyB,CACzB,iBAAkB,CAFlB,WAAY,CADZ,UAIF,CAEA,cAEE,gBAAiB,CADjB,eAEF,CAtIA,yBAAA,gBAAA,mBCAA,ADAA,aAAA,aCAA,ADAA,wBAAA,gBCAA,ADAA,sBAAA,2BCAA,CAAA",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.nostrEmbedCard {\n  @apply ne-px-4 ne-py-5 ne-pb-3 ne-bg-[#fcfcfc] ne-rounded-lg md:ne-max-w-[600px] ne-flex ne-flex-col ne-gap-8;\n  @apply ne-font-sans ne-text-left;\n  border: 1px solid #ddd;\n}\n\n.cardContent {\n  @apply ne-text-lg ne-break-words ne-whitespace-pre-line;\n}\n\n.cardContentMedia {\n  text-align: center;\n}\n\n.cardContentMedia > video,\n.cardContentMedia > img,\n.cardContentMedia > iframe {\n  border-radius: 15px;\n  width: 50%;\n}\n\n.cardProfile {\n  @apply ne-flex ne-flex-row ne-gap-4 ne-items-center;\n}\n\n.profileImg {\n  @apply ne-w-12 ne-h-12 ne-rounded-full;\n}\n\n.profileDetails {\n  @apply ne-flex ne-flex-col;\n}\n\n.profileName {\n  @apply ne-text-lg ne-font-bold;\n}\n\n.profileName a {\n  @apply ne-no-underline ne-text-gray-900;\n}\n.profileName a:hover {\n  @apply ne-text-gray-600;\n}\n\n.profilePkey {\n  @apply ne-flex ne-flex-row ne-gap-1 ne-items-center;\n}\n\n.cardMeta {\n  @apply ne-flex ne-flex-col ne-gap-1 md:ne-gap-2;\n}\n\nhr {\n  @apply ne-w-full ne-opacity-30 ne-m-1;\n  border-color: #ddd;\n}\n\n.cardInteractions {\n  @apply ne-flex ne-flex-row ne-justify-between md:ne-justify-start md:ne-gap-10;\n}\n\n.interactionContainer {\n  @apply ne-flex ne-flex-row ne-items-center ne-gap-2;\n}\n\n.replyIcon,\n.repostIcon,\n.heartIcon,\n.linkIcon,\n.copyIcon {\n  @apply ne-text-gray-900 ne-block ne-w-5 ne-h-5;\n}\n\n.linkCopyBtn,\n.linkLink {\n  @apply ne-text-gray-900 ne-no-underline ne-flex ne-flex-row ne-items-center ne-gap-2 ne-cursor-pointer ne-relative;\n  border: 0;\n  background-color: transparent;\n}\n\n.linkCopyBtn:hover,\n.linkLink:hover,\n.linkCopyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.linkCopyBtn.green,\n.linkCopyBtn.green .copyIcon {\n  @apply ne-text-green-600;\n}\n\n.displayText {\n  @apply ne-hidden md:ne-flex md:ne-visible md:ne-text-sm;\n}\n\n.copyText {\n  @apply ne-hidden;\n}\n\n.nostrichLink {\n  @apply ne-flex;\n  flex-grow: 1;\n  justify-content: flex-end;\n}\n\n.cardTitle {\n  margin: 0;\n}\n\n.cardDescription {\n  margin-top: 0;\n}\n\n.cardList {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 10px;\n}\n\n.profileWithoutImg {\n  width: 50px;\n  height: 50px;\n  background-color: #e9e9e9;\n  border-radius: 50%;\n}\n\n.diffProfiles {\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n",null],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},632:(e,t,n)=>{const{bech32:r,hex:o,utf8:i}=n(187),s={bech32:"bc",pubKeyHash:0,scriptHash:5,validWitnessVersions:[0]},a={bech32:"tb",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},c={bech32:"bcrt",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},l={bech32:"sb",pubKeyHash:63,scriptHash:123,validWitnessVersions:[0]},d=["option_data_loss_protect","initial_routing_sync","option_upfront_shutdown_script","gossip_queries","var_onion_optin","gossip_queries_ex","option_static_remotekey","payment_secret","basic_mpp","option_support_large_channel"],f={m:BigInt(1e3),u:BigInt(1e6),n:BigInt(1e9),p:BigInt(1e12)},u=BigInt("2100000000000000000"),h=BigInt(1e11),A={payment_hash:1,payment_secret:16,description:13,payee:19,description_hash:23,expiry:6,min_final_cltv_expiry:24,fallback_address:9,route_hint:3,feature_bits:5,metadata:27},p={};for(let e=0,t=Object.keys(A);e<t.length;e++){const n=t[e],r=A[t[e]].toString();p[r]=n}const g={1:e=>o.encode(r.fromWordsUnsafe(e)),16:e=>o.encode(r.fromWordsUnsafe(e)),13:e=>i.encode(r.fromWordsUnsafe(e)),19:e=>o.encode(r.fromWordsUnsafe(e)),23:e=>o.encode(r.fromWordsUnsafe(e)),27:e=>o.encode(r.fromWordsUnsafe(e)),6:y,24:y,3:function(e){const t=[];let n,i,s,a,c,l=r.fromWordsUnsafe(e);for(;l.length>0;)n=o.encode(l.slice(0,33)),i=o.encode(l.slice(33,41)),s=parseInt(o.encode(l.slice(41,45)),16),a=parseInt(o.encode(l.slice(45,49)),16),c=parseInt(o.encode(l.slice(49,51)),16),l=l.slice(51),t.push({pubkey:n,short_channel_id:i,fee_base_msat:s,fee_proportional_millionths:a,cltv_expiry_delta:c});return t},5:function(e){const t=e.slice().reverse().map((e=>[!!(1&e),!!(2&e),!!(4&e),!!(8&e),!!(16&e)])).reduce(((e,t)=>e.concat(t)),[]);for(;t.length<2*d.length;)t.push(!1);const n={};d.forEach(((e,r)=>{let o;o=t[2*r]?"required":t[2*r+1]?"supported":"unsupported",n[e]=o}));const r=t.slice(2*d.length);return n.extra_bits={start_bit:2*d.length,bits:r,has_required:r.reduce(((e,t,n)=>n%2!=0?e||!1:e||t),!1)},n}};function w(e){return t=>({tagCode:parseInt(e),words:r.encode("unknown",t,Number.MAX_SAFE_INTEGER)})}function y(e){return e.reverse().reduce(((e,t,n)=>e+t*Math.pow(32,n)),0)}function m(e,t){let n,r;if(e.slice(-1).match(/^[munp]$/))n=e.slice(-1),r=e.slice(0,-1);else{if(e.slice(-1).match(/^[^munp0-9]$/))throw new Error("Not a valid multiplier for the amount");r=e}if(!r.match(/^\d+$/))throw new Error("Not a valid human readable amount");const o=BigInt(r),i=n?o*h/f[n]:o*h;if("p"===n&&o%BigInt(10)!==BigInt(0)||i>u)throw new Error("Amount is outside of valid range");return t?i.toString():i}e.exports={decode:function(e,t){if("string"!=typeof e)throw new Error("Lightning Payment Request must be string");if("ln"!==e.slice(0,2).toLowerCase())throw new Error("Not a proper lightning payment request");const n=[],i=r.decode(e,Number.MAX_SAFE_INTEGER);e=e.toLowerCase();const d=i.prefix;let f=i.words,u=e.slice(d.length+1),h=f.slice(-104);f=f.slice(0,-104);let _=d.match(/^ln(\S+?)(\d*)([a-zA-Z]?)$/);if(_&&!_[2]&&(_=d.match(/^ln(\S+)$/)),!_)throw new Error("Not a proper lightning payment request");n.push({name:"lightning_network",letters:"ln"});const C=_[1];let b;if(t){if(void 0===t.bech32||void 0===t.pubKeyHash||void 0===t.scriptHash||!Array.isArray(t.validWitnessVersions))throw new Error("Invalid network");b=t}else switch(C){case s.bech32:b=s;break;case a.bech32:b=a;break;case c.bech32:b=c;break;case l.bech32:b=l}if(!b||b.bech32!==C)throw new Error("Unknown coin bech32 prefix");n.push({name:"coin_network",letters:C,value:b});const v=_[2];let k;if(v){k=m(v+_[3],!0),n.push({name:"amount",letters:_[2]+_[3],value:k})}else k=null;n.push({name:"separator",letters:"1"});const x=y(f.slice(0,7));let B,E,S,I;for(f=f.slice(7),n.push({name:"timestamp",letters:u.slice(0,7),value:x}),u=u.slice(7);f.length>0;){const e=f[0].toString();B=p[e]||"unknown_tag",E=g[e]||w(e),f=f.slice(1),S=y(f.slice(0,2)),f=f.slice(2),I=f.slice(0,S),f=f.slice(S),n.push({name:B,tag:u[0],letters:u.slice(0,3+S),value:E(I)}),u=u.slice(3+S)}n.push({name:"signature",letters:u.slice(0,104),value:o.encode(r.fromWordsUnsafe(h))}),u=u.slice(104),n.push({name:"checksum",letters:u});let P={paymentRequest:e,sections:n,get expiry(){let e=n.find((e=>"expiry"===e.name));if(e)return N("timestamp")+e.value},get route_hints(){return n.filter((e=>"route_hint"===e.name)).map((e=>e.value))}};for(let e in A)"route_hint"!==e&&Object.defineProperty(P,e,{get:()=>N(e)});return P;function N(e){let t=n.find((t=>t.name===e));return t?t.value:void 0}},hrpToMillisat:m}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],d=i[l]||0,f="".concat(l," ").concat(d);i[l]=d+1;var u=n(f),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var A=o(h,r);r.byIndex=a,t.splice(a,0,{identifier:f,updater:A,references:1})}s.push(f)}return s}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var c=r(e,o),l=0;l<i.length;l++){var d=n(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},856:()=>{}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>n[e]));return s.default=()=>n,o.d(i,s),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>nn});var e,t,n,r,s,a,c,l={},d=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,u=Array.isArray;function h(e,t){for(var n in t)e[n]=t[n];return e}function A(e){var t=e.parentNode;t&&t.removeChild(e)}function p(t,n,r){var o,i,s,a={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(s in t.defaultProps)void 0===a[s]&&(a[s]=t.defaultProps[s]);return g(t,a,o,i,null)}function g(e,r,o,i,s){var a={type:e,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++n:s};return null==s&&null!=t.vnode&&t.vnode(a),a}function w(e){return e.children}function y(e,t){this.props=e,this.context=t}function m(e,t){if(null==t)return e.__?m(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?m(e):null}function _(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return _(e)}}function C(e){(!e.__d&&(e.__d=!0)&&r.push(e)&&!b.__r++||s!==t.debounceRendering)&&((s=t.debounceRendering)||a)(b)}function b(){var e,t,n,o,i,s,a,l;for(r.sort(c);e=r.shift();)e.__d&&(t=r.length,o=void 0,i=void 0,a=(s=(n=e).__v).__e,(l=n.__P)&&(o=[],(i=h({},s)).__v=s.__v+1,N(l,s,i,n.__n,void 0!==l.ownerSVGElement,null!=s.__h?[a]:null,o,null==a?m(s):a,s.__h),T(o,s),s.__e!=a&&_(s)),r.length>t&&r.sort(c));b.__r=0}function v(e,t,n,r,o,i,s,a,c,f){var h,A,p,y,_,C,b,v=r&&r.__k||d,E=v.length;for(n.__k=[],h=0;h<t.length;h++)if(null!=(y=n.__k[h]=null==(y=t[h])||"boolean"==typeof y||"function"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?g(null,y,null,null,y):u(y)?g(w,{children:y},null,null,null):y.__b>0?g(y.type,y.props,y.key,y.ref?y.ref:null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(p=v[h])||p&&y.key==p.key&&y.type===p.type)v[h]=void 0;else for(A=0;A<E;A++){if((p=v[A])&&y.key==p.key&&y.type===p.type){v[A]=void 0;break}p=null}N(e,y,p=p||l,o,i,s,a,c,f),_=y.__e,(A=y.ref)&&p.ref!=A&&(b||(b=[]),p.ref&&b.push(p.ref,null,y),b.push(A,y.__c||_,y)),null!=_?(null==C&&(C=_),"function"==typeof y.type&&y.__k===p.__k?y.__d=c=k(y,c,e):c=x(e,y,p,v,_,c),"function"==typeof n.type&&(n.__d=c)):c&&p.__e==c&&c.parentNode!=e&&(c=m(p))}for(n.__e=C,h=E;h--;)null!=v[h]&&("function"==typeof n.type&&null!=v[h].__e&&v[h].__e==n.__d&&(n.__d=B(r).nextSibling),D(v[h],v[h]));if(b)for(h=0;h<b.length;h++)H(b[h],b[++h],b[++h])}function k(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?k(r,t,n):x(n,r,r,o,r.__e,t));return t}function x(e,t,n,r,o,i){var s,a,c;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(null==n||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),s=null;else{for(a=i,c=0;(a=a.nextSibling)&&c<r.length;c+=1)if(a==o)break e;e.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function B(e){var t,n,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=B(n)))return r;return null}function E(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function S(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||E(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||E(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?P:I,i):e.removeEventListener(t,i?P:I,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&"rowSpan"!==t&&"colSpan"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&"-"!==t[4]?e.removeAttribute(t):e.setAttribute(t,n))}}function I(e){return this.l[e.type+!1](t.event?t.event(e):e)}function P(e){return this.l[e.type+!0](t.event?t.event(e):e)}function N(e,n,r,o,i,s,a,c,l){var d,f,A,p,g,m,_,C,b,k,x,B,E,S,I,P=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(l=r.__h,c=n.__e=r.__e,n.__h=null,s=[c]),(d=t.__b)&&d(n);try{e:if("function"==typeof P){if(C=n.props,b=(d=P.contextType)&&o[d.__c],k=d?b?b.props.value:d.__:o,r.__c?_=(f=n.__c=r.__c).__=f.__E:("prototype"in P&&P.prototype.render?n.__c=f=new P(C,k):(n.__c=f=new y(C,k),f.constructor=P,f.render=M),b&&b.sub(f),f.props=C,f.state||(f.state={}),f.context=k,f.__n=o,A=f.__d=!0,f.__h=[],f._sb=[]),null==f.__s&&(f.__s=f.state),null!=P.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=h({},f.__s)),h(f.__s,P.getDerivedStateFromProps(C,f.__s))),p=f.props,g=f.state,f.__v=n,A)null==P.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==P.getDerivedStateFromProps&&C!==p&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(C,k),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(C,f.__s,k)||n.__v===r.__v){for(n.__v!==r.__v&&(f.props=C,f.state=f.__s,f.__d=!1),f.__e=!1,n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),x=0;x<f._sb.length;x++)f.__h.push(f._sb[x]);f._sb=[],f.__h.length&&a.push(f);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(C,f.__s,k),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(p,g,m)}))}if(f.context=k,f.props=C,f.__P=e,B=t.__r,E=0,"prototype"in P&&P.prototype.render){for(f.state=f.__s,f.__d=!1,B&&B(n),d=f.render(f.props,f.state,f.context),S=0;S<f._sb.length;S++)f.__h.push(f._sb[S]);f._sb=[]}else do{f.__d=!1,B&&B(n),d=f.render(f.props,f.state,f.context),f.state=f.__s}while(f.__d&&++E<25);f.state=f.__s,null!=f.getChildContext&&(o=h(h({},o),f.getChildContext())),A||null==f.getSnapshotBeforeUpdate||(m=f.getSnapshotBeforeUpdate(p,g)),v(e,u(I=null!=d&&d.type===w&&null==d.key?d.props.children:d)?I:[I],n,r,o,i,s,a,c,l),f.base=n.__e,n.__h=null,f.__h.length&&a.push(f),_&&(f.__E=f.__=null),f.__e=!1}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=U(r.__e,n,r,o,i,s,a,l);(d=t.diffed)&&d(n)}catch(e){n.__v=null,(l||null!=s)&&(n.__e=c,n.__h=!!l,s[s.indexOf(c)]=null),t.__e(e,n,r)}}function T(e,n){t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function U(t,n,r,o,i,s,a,c){var d,f,h,p=r.props,g=n.props,w=n.type,y=0;if("svg"===w&&(i=!0),null!=s)for(;y<s.length;y++)if((d=s[y])&&"setAttribute"in d==!!w&&(w?d.localName===w:3===d.nodeType)){t=d,s[y]=null;break}if(null==t){if(null===w)return document.createTextNode(g);t=i?document.createElementNS("http://www.w3.org/2000/svg",w):document.createElement(w,g.is&&g),s=null,c=!1}if(null===w)p===g||c&&t.data===g||(t.data=g);else{if(s=s&&e.call(t.childNodes),f=(p=r.props||l).dangerouslySetInnerHTML,h=g.dangerouslySetInnerHTML,!c){if(null!=s)for(p={},y=0;y<t.attributes.length;y++)p[t.attributes[y].name]=t.attributes[y].value;(h||f)&&(h&&(f&&h.__html==f.__html||h.__html===t.innerHTML)||(t.innerHTML=h&&h.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||S(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||S(e,i,t[i],n[i],r)}(t,g,p,i,c),h)n.__k=[];else if(v(t,u(y=n.props.children)?y:[y],n,r,o,i&&"foreignObject"!==w,s,a,s?s[0]:r.__k&&m(r,0),c),null!=s)for(y=s.length;y--;)null!=s[y]&&A(s[y]);c||("value"in g&&void 0!==(y=g.value)&&(y!==t.value||"progress"===w&&!y||"option"===w&&y!==p.value)&&S(t,"value",y,p.value,!1),"checked"in g&&void 0!==(y=g.checked)&&y!==t.checked&&S(t,"checked",y,p.checked,!1))}return t}function H(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function D(e,n,r){var o,i;if(t.unmount&&t.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||H(o,null,n)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){t.__e(e,n)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&D(o[i],n,r||"function"!=typeof e.type);r||null==e.__e||A(e.__e),e.__=e.__e=e.__d=void 0}function M(e,t,n){return this.constructor(e,n)}function L(n,r,o){var i,s,a;t.__&&t.__(n,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,a=[],N(r,n=(!i&&o||r).__k=p(w,null,[n]),s||l,l,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?e.call(r.childNodes):null,a,!i&&o?o:s?s.__e:r.firstChild,i),T(a,n)}e=d.slice,t={__e:function(e,t,n,r){for(var o,i,s;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),s=o.__d),s)return o.__E=o}catch(t){e=t}throw e}},n=0,y.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h({},this.state),"function"==typeof e&&(e=e(h({},n),this.props)),e&&h(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),C(this))},y.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),C(this))},y.prototype.render=w,r=[],a="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,c=function(e,t){return e.__v.__b-t.__v.__b},b.__r=0;var $=o(856),W=o.t($,2);const j=BigInt(0),z=BigInt(1),R=BigInt(2),O=BigInt(3),q=BigInt(8),V=Object.freeze({a:j,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:z,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),F=(e,t)=>(e+t/R)/t,G={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=V,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-z*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,s=BigInt("0x100000000000000000000000000000000"),a=F(i*e,t),c=F(-r*e,t);let l=Ce(e-a*n-c*o,t),d=Ce(-a*r-c*i,t);const f=l>s,u=d>s;if(f&&(l=t-l),u&&(d=t-d),l>s||d>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:f,k1:l,k2neg:u,k2:d}}},Z=32,Y=32,K=Z+1,J=2*Z+1;function Q(e){const{a:t,b:n}=V,r=Ce(e*e),o=Ce(r*e);return Ce(o+t*e+n)}const X=V.a===j;class ee extends Error{constructor(e){super(e)}}function te(e){if(!(e instanceof ne))throw new TypeError("JacobianPoint expected")}class ne{constructor(e,t,n){this.x=e,this.y=t,this.z=n}static fromAffine(e){if(!(e instanceof ie))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(ie.ZERO)?ne.ZERO:new ne(e.x,e.y,z)}static toAffineBatch(e){const t=function(e,t=V.P){const n=new Array(e.length),r=e.reduce(((e,r,o)=>r===j?e:(n[o]=e,Ce(e*r,t))),z),o=ve(r,t);return e.reduceRight(((e,r,o)=>r===j?e:(n[o]=Ce(e*n[o],t),Ce(e*r,t))),o),n}(e.map((e=>e.z)));return e.map(((e,n)=>e.toAffine(t[n])))}static normalizeZ(e){return ne.toAffineBatch(e).map(ne.fromAffine)}equals(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e,a=Ce(r*r),c=Ce(s*s),l=Ce(t*c),d=Ce(o*a),f=Ce(Ce(n*s)*c),u=Ce(Ce(i*r)*a);return l===d&&f===u}negate(){return new ne(this.x,Ce(-this.y),this.z)}double(){const{x:e,y:t,z:n}=this,r=Ce(e*e),o=Ce(t*t),i=Ce(o*o),s=e+o,a=Ce(R*(Ce(s*s)-r-i)),c=Ce(O*r),l=Ce(c*c),d=Ce(l-R*a),f=Ce(c*(a-d)-q*i),u=Ce(R*t*n);return new ne(d,f,u)}add(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e;if(o===j||i===j)return this;if(t===j||n===j)return e;const a=Ce(r*r),c=Ce(s*s),l=Ce(t*c),d=Ce(o*a),f=Ce(Ce(n*s)*c),u=Ce(Ce(i*r)*a),h=Ce(d-l),A=Ce(u-f);if(h===j)return A===j?this.double():ne.ZERO;const p=Ce(h*h),g=Ce(h*p),w=Ce(l*p),y=Ce(A*A-g-R*w),m=Ce(A*(w-y)-f*g),_=Ce(r*s*h);return new ne(y,m,_)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const t=ne.ZERO;if("bigint"==typeof e&&e===j)return t;let n=_e(e);if(n===z)return this;if(!X){let e=t,r=this;for(;n>j;)n&z&&(e=e.add(r)),r=r.double(),n>>=z;return e}let{k1neg:r,k1:o,k2neg:i,k2:s}=G.splitScalar(n),a=t,c=t,l=this;for(;o>j||s>j;)o&z&&(a=a.add(l)),s&z&&(c=c.add(l)),l=l.double(),o>>=z,s>>=z;return r&&(a=a.negate()),i&&(c=c.negate()),c=new ne(Ce(c.x*G.beta),c.y,c.z),a.add(c)}precomputeWindow(e){const t=X?128/e+1:256/e+1,n=[];let r=this,o=r;for(let i=0;i<t;i++){o=r,n.push(o);for(let t=1;t<2**(e-1);t++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(e,t){!t&&this.equals(ne.BASE)&&(t=ie.BASE);const n=t&&t._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=t&&oe.get(t);r||(r=this.precomputeWindow(n),t&&1!==n&&(r=ne.normalizeZ(r),oe.set(t,r)));let o=ne.ZERO,i=ne.BASE;const s=1+(X?128/n:256/n),a=2**(n-1),c=BigInt(2**n-1),l=2**n,d=BigInt(n);for(let t=0;t<s;t++){const n=t*a;let s=Number(e&c);e>>=d,s>a&&(s-=l,e+=z);const f=n,u=n+Math.abs(s)-1,h=t%2!=0,A=s<0;0===s?i=i.add(re(h,r[f])):o=o.add(re(A,r[u]))}return{p:o,f:i}}multiply(e,t){let n,r,o=_e(e);if(X){const{k1neg:e,k1:i,k2neg:s,k2:a}=G.splitScalar(o);let{p:c,f:l}=this.wNAF(i,t),{p:d,f}=this.wNAF(a,t);c=re(e,c),d=re(s,d),d=new ne(Ce(d.x*G.beta),d.y,d.z),n=c.add(d),r=l.add(f)}else{const{p:e,f:i}=this.wNAF(o,t);n=e,r=i}return ne.normalizeZ([n,r])[0]}toAffine(e){const{x:t,y:n,z:r}=this,o=this.equals(ne.ZERO);null==e&&(e=o?q:ve(r));const i=e,s=Ce(i*i),a=Ce(s*i),c=Ce(t*s),l=Ce(n*a),d=Ce(r*i);if(o)return ie.ZERO;if(d!==z)throw new Error("invZ was invalid");return new ie(c,l)}}function re(e,t){const n=t.negate();return e?n:t}ne.BASE=new ne(V.Gx,V.Gy,z),ne.ZERO=new ne(j,z,j);const oe=new WeakMap;class ie{constructor(e,t){this.x=e,this.y=t}_setWindowSize(e){this._WINDOW_SIZE=e,oe.delete(this)}hasEvenY(){return this.y%R===j}static fromCompressedHex(e){const t=32===e.length,n=ye(t?e:e.subarray(1));if(!Se(n))throw new Error("Point is not on curve");let r=function(e){const{P:t}=V,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),a=BigInt(88),c=e*e*e%t,l=c*c*e%t,d=be(l,O)*l%t,f=be(d,O)*l%t,u=be(f,R)*c%t,h=be(u,r)*u%t,A=be(h,o)*h%t,p=be(A,s)*A%t,g=be(p,a)*p%t,w=be(g,s)*A%t,y=be(w,O)*l%t,m=be(y,i)*h%t,_=be(m,n)*c%t,C=be(_,R),b=C*C%t;if(b!==e)throw new Error("Cannot find square root");return C}(Q(n));const o=(r&z)===z;if(t)o&&(r=Ce(-r));else{1==(1&e[0])!==o&&(r=Ce(-r))}const i=new ie(n,r);return i.assertValidity(),i}static fromUncompressedHex(e){const t=ye(e.subarray(1,Z+1)),n=ye(e.subarray(Z+1,2*Z+1)),r=new ie(t,n);return r.assertValidity(),r}static fromHex(e){const t=me(e),n=t.length,r=t[0];if(n===Z)return this.fromCompressedHex(t);if(n===K&&(2===r||3===r))return this.fromCompressedHex(t);if(n===J&&4===r)return this.fromUncompressedHex(t);throw new Error(`Point.fromHex: received invalid point. Expected 32-${K} compressed bytes or ${J} uncompressed bytes, not ${n}`)}static fromPrivateKey(e){return ie.BASE.multiply(Ie(e))}static fromSignature(e,t,n){const{r,s:o}=Ne(t);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=ke(me(e)),{n:s}=V,a=2===n||3===n?r+s:r,c=ve(a,s),l=Ce(-i*c,s),d=Ce(o*c,s),f=1&n?"03":"02",u=ie.fromHex(f+he(a)),h=ie.BASE.multiplyAndAddUnsafe(u,l,d);if(!h)throw new Error("Cannot recover signature: point at infinify");return h.assertValidity(),h}toRawBytes(e=!1){return we(this.toHex(e))}toHex(e=!1){const t=he(this.x);if(e){return`${this.hasEvenY()?"02":"03"}${t}`}return`04${t}${he(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:t,y:n}=this;if(!Se(t)||!Se(n))throw new Error(e);const r=Ce(n*n);if(Ce(r-Q(t))!==j)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new ie(this.x,Ce(-this.y))}double(){return ne.fromAffine(this).double().toAffine()}add(e){return ne.fromAffine(this).add(ne.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return ne.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,t,n){const r=ne.fromAffine(this),o=t===j||t===z||this!==ie.BASE?r.multiplyUnsafe(t):r.multiply(t),i=ne.fromAffine(e).multiplyUnsafe(n),s=o.add(i);return s.equals(ne.ZERO)?void 0:s.toAffine()}}function se(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function ae(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${fe(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:ye(n),left:e.subarray(t+2)}}ie.BASE=new ie(V.Gx,V.Gy),ie.ZERO=new ie(j,j);class ce{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromCompact(e){const t=e instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof e&&!t)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=t?fe(e):e;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new ce(ge(r.slice(0,64)),ge(r.slice(64,128)))}static fromDER(e){const t=e instanceof Uint8Array;if("string"!=typeof e&&!t)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${fe(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=ae(e.subarray(2)),{data:r,left:o}=ae(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${fe(o)}`);return{r:t,s:r}}(t?e:we(e));return new ce(n,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:t}=this;if(!Ee(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Ee(t))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=V.n>>z;return this.s>e}normalizeS(){return this.hasHighS()?new ce(this.r,Ce(-this.s,V.n)):this}toDERRawBytes(){return we(this.toDERHex())}toDERHex(){const e=se(pe(this.s)),t=se(pe(this.r)),n=e.length/2,r=t.length/2,o=pe(n),i=pe(r);return`30${pe(r+n+4)}02${i}${t}02${o}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return we(this.toCompactHex())}toCompactHex(){return he(this.r)+he(this.s)}}function le(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const o=e[t];n.set(o,r),r+=o.length}return n}const de=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function fe(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=de[e[n]];return t}const ue=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function he(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(j<=e&&e<ue))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function Ae(e){const t=we(he(e));if(32!==t.length)throw new Error("Error: expected 32 bytes");return t}function pe(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function ge(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function we(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=2*n,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[n]=i}return t}function ye(e){return ge(fe(e))}function me(e){return e instanceof Uint8Array?Uint8Array.from(e):we(e)}function _e(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&Ee(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function Ce(e,t=V.P){const n=e%t;return n>=j?n:t+n}function be(e,t){const{P:n}=V;let r=e;for(;t-- >j;)r*=r,r%=n;return r}function ve(e,t=V.P){if(e===j||t<=j)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=Ce(e,t),r=t,o=j,i=z,s=z,a=j;for(;n!==j;){const e=r/n,t=r%n,c=o-s*e,l=i-a*e;r=n,n=t,o=s,i=a,s=c,a=l}if(r!==z)throw new Error("invert: does not exist");return Ce(o,t)}function ke(e,t=!1){const n=function(e){const t=8*e.length-8*Y,n=ye(e);return t>0?n>>BigInt(t):n}(e);if(t)return n;const{n:r}=V;return n>=r?n-r:n}let xe,Be;function Ee(e){return j<e&&e<V.n}function Se(e){return j<e&&e<V.P}function Ie(e){let t;if("bigint"==typeof e)t=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if("string"==typeof e){if(e.length!==2*Y)throw new Error("Expected 32 bytes of private key");t=ge(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==Y)throw new Error("Expected 32 bytes of private key");t=ye(e)}if(!Ee(t))throw new Error("Expected private key: 0 < key < n");return t}function Pe(e){return e instanceof ie?(e.assertValidity(),e):ie.fromHex(e)}function Ne(e){if(e instanceof ce)return e.assertValidity(),e;try{return ce.fromDER(e)}catch(t){return ce.fromCompact(e)}}function Te(e){return Ce(ye(e),V.n)}class Ue{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromHex(e){const t=me(e);if(64!==t.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${t.length}`);const n=ye(t.subarray(0,32)),r=ye(t.subarray(32,64));return new Ue(n,r)}assertValidity(){const{r:e,s:t}=this;if(!Se(e)||!Ee(t))throw new Error("Invalid signature")}toHex(){return he(this.r)+he(this.s)}toRawBytes(){return we(this.toHex())}}class He{constructor(e,t,n=Oe.randomBytes()){if(null==e)throw new TypeError(`sign: Expected valid message, not "${e}"`);this.m=me(e);const{x:r,scalar:o}=this.getScalar(Ie(t));if(this.px=r,this.d=o,this.rand=me(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(e){const t=ie.fromPrivateKey(e),n=t.hasEvenY()?e:V.n-e;return{point:t,scalar:n,x:t.toRawX()}}initNonce(e,t){return Ae(e^ye(t))}finalizeNonce(e){const t=Ce(ye(e),V.n);if(t===j)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(t);return{R:n,rx:r,k:o}}finalizeSig(e,t,n,r){return new Ue(e.x,Ce(t+n*r,V.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:e,d:t,px:n,rand:r}=this,o=Oe.taggedHash,i=this.initNonce(t,await o(ze.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(await o(ze.nonce,i,n,e)),l=Te(await o(ze.challenge,a,n,e)),d=this.finalizeSig(s,c,l,t);return await Le(d,e,n)||this.error(),d}calcSync(){const{m:e,d:t,px:n,rand:r}=this,o=Oe.taggedHashSync,i=this.initNonce(t,o(ze.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(o(ze.nonce,i,n,e)),l=Te(o(ze.challenge,a,n,e)),d=this.finalizeSig(s,c,l,t);return $e(d,e,n)||this.error(),d}}function De(e,t,n){const r=e instanceof Ue,o=r?e:Ue.fromHex(e);return r&&o.assertValidity(),{...o,m:me(t),P:Pe(n)}}function Me(e,t,n,r){const o=ie.BASE.multiplyAndAddUnsafe(t,Ie(n),Ce(-r,V.n));return!(!o||!o.hasEvenY()||o.x!==e)}async function Le(e,t,n){try{const{r,s:o,m:i,P:s}=De(e,t,n),a=Te(await Oe.taggedHash(ze.challenge,Ae(r),s.toRawX(),i));return Me(r,s,o,a)}catch(e){return!1}}function $e(e,t,n){try{const{r,s:o,m:i,P:s}=De(e,t,n),a=Te(Oe.taggedHashSync(ze.challenge,Ae(r),s.toRawX(),i));return Me(r,s,o,a)}catch(e){if(e instanceof ee)throw e;return!1}}const We={Signature:Ue,getPublicKey:function(e){return ie.fromPrivateKey(e).toRawX()},sign:async function(e,t,n){return new He(e,t,n).calc()},verify:Le,signSync:function(e,t,n){return new He(e,t,n).calcSync()},verifySync:$e};ie.BASE._setWindowSize(8);const je={node:W,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},ze={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},Re={},Oe={bytesToHex:fe,hexToBytes:we,concatBytes:le,mod:Ce,invert:ve,isValidPrivateKey(e){try{return Ie(e),!0}catch(e){return!1}},_bigintTo32Bytes:Ae,_normalizePrivateKey:Ie,hashToPrivateKey:e=>{e=me(e);const t=Y+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return Ae(Ce(ye(e),V.n-z)+z)},randomBytes:(e=32)=>{if(je.web)return je.web.getRandomValues(new Uint8Array(e));if(je.node){const{randomBytes:t}=je.node;return Uint8Array.from(t(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>Oe.hashToPrivateKey(Oe.randomBytes(Y+8)),precompute(e=8,t=ie.BASE){const n=t===ie.BASE?t:new ie(t.x,t.y);return n._setWindowSize(e),n.multiply(O),n},sha256:async(...e)=>{if(je.web){const t=await je.web.subtle.digest("SHA-256",le(...e));return new Uint8Array(t)}if(je.node){const{createHash:t}=je.node,n=t("sha256");return e.forEach((e=>n.update(e))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(je.web){const n=await je.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=le(...t),o=await je.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(je.node){const{createHmac:n}=je.node,r=n("sha256",e);return t.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=Re[e];if(void 0===n){const t=await Oe.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Re[e]=n}return Oe.sha256(n,...t)},taggedHashSync:(e,...t)=>{if("function"!=typeof xe)throw new ee("sha256Sync is undefined, you need to set it");let n=Re[e];if(void 0===n){const t=xe(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Re[e]=n}return xe(n,...t)},_JacobianPoint:ne};Object.defineProperties(Oe,{sha256Sync:{configurable:!1,get:()=>xe,set(e){xe||(xe=e)}},hmacSha256Sync:{configurable:!1,get:()=>Be,set(e){Be||(Be=e)}}});var qe=o(632),Ve=o(715);const Fe=new TextDecoder("utf-8"),Ge=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function Ze(e){let t=[];for(let n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t}function Ye(e){const t=Ze(e),n=Ve.gW.toWords(t);return Ve.gW.encode("note",n,120)}function Ke(e){const t=Ze(e),n=Ve.gW.toWords(t);return Ve.gW.encode("npub",n,120)}function Je(e){return Ve.gW.fromWords(e).map((e=>e.toString(16).padStart(2,"0"))).join("")}function Qe(e){const t=Ve.gW.decode(e,120);return"npub"!=t.prefix?"":Je(t.words)}function Xe(e){return`${e.slice(0,12)}...${e.slice(-4)}`}function et(e){return(e/=1e3)>=1e6?Math.round(e/1e5)/10+"M":e>=1e3?Math.round(e/100)/10+"K":e}function tt(e){if(!(e instanceof Uint8Array))throw new Error("Uint8Array expected");let t="";for(let n=0;n<e.length;n++)t+=Ge[e[n]];return t}var nt,rt,ot,it,st=0,at=[],ct=[],lt=t.__b,dt=t.__r,ft=t.diffed,ut=t.__c,ht=t.unmount;function At(e,n){t.__h&&t.__h(rt,e,st||n),st=0;var r=rt.__H||(rt.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:ct}),r.__[e]}function pt(e){return st=1,function(e,t,n){var r=At(nt++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):Ct(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=rt,!rt.u)){var o=function(e,t,n){if(!r.__c.__H)return!0;var o=r.__c.__H.__.filter((function(e){return e.__c}));if(o.every((function(e){return!e.__N})))return!i||i.call(this,e,t,n);var s=!1;return o.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(s=!0)}})),!(!s&&r.__c.props===e)&&(!i||i.call(this,e,t,n))};rt.u=!0;var i=rt.shouldComponentUpdate,s=rt.componentWillUpdate;rt.componentWillUpdate=function(e,t,n){if(this.__e){var r=i;i=void 0,o(e,t,n),i=r}s&&s.call(this,e,t,n)},rt.shouldComponentUpdate=o}return r.__N||r.__}(Ct,e)}function gt(){for(var e;e=at.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(mt),e.__H.__h.forEach(_t),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){rt=null,lt&&lt(e)},t.__r=function(e){dt&&dt(e),nt=0;var t=(rt=e.__c).__H;t&&(ot===rt?(t.__h=[],rt.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=ct,e.__N=e.i=void 0}))):(t.__h.forEach(mt),t.__h.forEach(_t),t.__h=[])),ot=rt},t.diffed=function(e){ft&&ft(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==at.push(n)&&it===t.requestAnimationFrame||((it=t.requestAnimationFrame)||yt)(gt)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==ct&&(e.__=e.__V),e.i=void 0,e.__V=ct}))),ot=rt=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(mt),e.__h=e.__h.filter((function(e){return!e.__||_t(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),ut&&ut(e,n)},t.unmount=function(e){ht&&ht(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{mt(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var wt="function"==typeof requestAnimationFrame;function yt(e){var t,n=function(){clearTimeout(r),wt&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);wt&&(t=requestAnimationFrame(n))}function mt(e){var t=rt,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),rt=t}function _t(e){var t=rt;e.__c=e.__(),rt=t}function Ct(e,t){return"function"==typeof t?t(e):t}var bt=0;function vt(e,n,r,o,i,s){var a,c,l={};for(c in n)"ref"==c?a=n[c]:l[c]=n[c];var d={type:e,props:l,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--bt,__source:i,__self:s};if("function"==typeof e&&(a=e.defaultProps))for(c in a)void 0===l[c]&&(l[c]=a[c]);return t.vnode&&t.vnode(d),d}const kt=function(e){let{additionalClasses:t}=e,n="copyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};var xt=o(379),Bt=o.n(xt),Et=o(795),St=o.n(Et),It=o(569),Pt=o.n(It),Nt=o(565),Tt=o.n(Nt),Ut=o(216),Ht=o.n(Ut),Dt=o(589),Mt=o.n(Dt),Lt=o(218),$t={};$t.styleTagTransform=Mt(),$t.setAttributes=Tt(),$t.insert=Pt().bind(null,"head"),$t.domAPI=St(),$t.insertStyleElement=Ht();Bt()(Lt.Z,$t);Lt.Z&&Lt.Z.locals&&Lt.Z.locals;const Wt=function(e){let{iconClasses:t,displayText:n,copyText:r}=e;const[o,i]=pt("linkCopyBtn");return vt("button",{class:o,onClick:()=>function(){try{navigator.clipboard.writeText(r),i(`${o} green`),setTimeout((()=>{i(o.replace("green","").trim())}),500)}catch(e){console.error("Failed to copy: ",e)}}(),children:[vt(kt,{additionalClasses:t}),n&&vt("span",{class:"displayText",children:n}),vt("span",{class:"copyText",children:r})]})};const jt=function(e){let{additionalClasses:t}=e,n="boltIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z"})})};const zt=function(e){let{additionalClasses:t}=e,n="heartIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const Rt=function(e){let{additionalClasses:t}=e,n="linkIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const Ot=function(e){let{additionalClasses:t}=e,n="replyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const qt=function(e){let{additionalClasses:t}=e,n="repostIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const Vt=function(e){let t,n,r,o,{note:i,profilesList:s,repliesCount:a,repostsCount:c,likesCount:l,zapAmount:d,options:f}=e,u=i?i.created_at:s?s.created_at:null;return u&&(t=new Date(1e3*u),r=t.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"})),i&&i.id&&(n=Ye(i.id)),s&&(n=s.id),o=et(d),vt("div",{class:"cardMeta",children:[vt("div",{class:"cardDate",children:r}),vt("hr",{}),vt("div",{class:"cardInteractions",children:[f&&f.showZaps?vt("div",{className:"interactionContainer",title:"Total sats zapped",children:[vt(jt,{additionalClasses:"w-5 h-5"}),vt("span",{className:"zapAmount",children:o})]}):null,vt("div",{class:"interactionContainer",title:"Number of replies",children:[vt(Ot,{additionalClasses:"w-5 h-5"}),vt("span",{class:"repliesCount",children:a})]}),vt("div",{class:"interactionContainer",title:"Number of reposts",children:[vt(qt,{additionalClasses:"w-5 h-5"}),vt("span",{class:"repostsCount",children:c})]}),vt("div",{class:"interactionContainer",title:"Number of likes",children:[vt(zt,{additionalClasses:"w-5 h-5"}),vt("span",{class:"likesCount",children:l})]}),vt("div",{class:"interactionContainer",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:i?`https://nostr.band/${n}`:`https://listr.lol/a/${s.naddr}`,class:"linkLink",children:[vt(Rt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),vt("span",{class:"displayText",children:"Open"})]})}),f&&f.showCopyAddr?vt("div",{className:"interactionContainer",children:vt(Wt,{iconClasses:"w-5 h-5",displayText:i?"Copy Note ID":"Copy ID",copyText:i||s.naddr})}):null]})]})};const Ft=function(e){let{additionalClasses:t}=e,n="keyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};const Gt=function(e){let{additionalClasses:t}=e,n="nostrichIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{width:"3rem",height:"3rem",viewBox:"0 0 674 769",xmlns:"http://www.w3.org/2000/svg",class:n,children:vt("path",{d:"M567.729 324.967C582.946 428.084 475.795 449.465 415.027 447.318C411.705 447.2 408.57 448.819 406.631 451.519C400.387 460.214 389.956 472.017 381.958 472.017C373.127 472.017 365.191 489.217 361.675 499.621C361.36 500.555 362.279 501.414 363.216 501.11C459.852 469.719 497.737 458.954 514.046 461.974C527.194 464.409 551.785 508.438 562.437 530.148C535.959 531.67 527.133 507.931 521.046 503.67C516.176 500.261 514.35 515.844 514.046 524.061C508.263 521.018 500.959 516.757 500.35 503.67C499.741 490.583 493.046 493.931 487.872 494.539C482.698 495.148 403.263 520.713 391.393 524.061C379.523 527.409 365.828 531.974 354.567 539.887C335.697 549.018 323.523 542.626 320.175 527.105C317.497 514.687 334.886 476.481 343.915 458.93C332.755 463.09 309.584 471.53 306.175 472.017C302.854 472.492 260.547 505.172 238.203 522.707C237.091 523.58 236.38 524.849 236.134 526.241C232.627 546.054 221.157 551.516 201.175 561.8C185.117 570.066 128.822 656.684 100.272 702.803C98.5858 705.526 96.1126 707.629 93.4202 709.363C74.9686 721.249 56.0179 753.013 48.3915 768.453C37.6784 737.532 51.6379 710.931 59.9568 701.497C56.3046 698.331 47.8843 700.178 44.1306 701.497C54.4785 665.888 90.6961 665.888 89.4787 665.888C96.1744 660.105 174.696 547.8 176.523 542.626C178.336 537.488 175.346 513.436 214.962 500.287C215.495 500.11 216.024 499.866 216.497 499.563C247.306 479.802 270.423 447.869 278.175 434.278C236.462 431.409 188.596 407.816 164.366 393.152C159.873 390.432 155.077 388.105 149.871 387.407C115.764 382.835 81.3285 404.791 67.5655 417.235C61.9655 409.443 68.2757 386.8 72.1308 376.452C58.4959 374.504 38.4495 394.307 30.1306 404.452C21.1218 390.33 29.0146 365.089 34.0871 354.234C16.0696 354.721 3.85509 362.959 0 367.017C14.9131 255.93 128.984 288.237 130.261 289.712C124.174 283.382 124.682 275.104 125.696 271.756C194.783 273.582 227.045 262.017 247.436 250.147C408.132 160.364 477.372 215.451 502.937 229.299C528.502 243.147 574.916 248.777 607.025 235.995C645.373 218.647 639.599 173.93 631.829 156.864C623.307 138.146 575.22 112.276 558.176 79.5591C541.133 46.8422 555.825 5.93789 575.728 1.51061C594.802 -2.73213 607.975 2.37383 618.285 11.6891C625.159 17.8994 644.46 22.3413 652.525 25.2326C660.59 28.1239 673.981 31.9283 673.221 34.2109C672.46 36.4935 659.548 36.1889 657.547 36.1889C653.438 36.1889 648.568 36.7976 653.438 39.0802C659.243 41.4348 668.053 44.8745 672.095 47.088C672.549 47.3366 672.454 47.9791 671.955 48.1156C643.858 55.798 618.768 40.1108 600.177 58.102C581.307 76.363 621.481 90.363 642.177 112.276C662.873 134.189 684.177 160.363 667.134 220.016C653.874 266.424 598.093 305.848 569.654 321.045C568.255 321.793 567.497 323.398 567.729 324.967Z",fill:"#7A3BFF"})})};const Zt=function(e){let{thumbnail:t,fullImage:n}=e;const[r,o]=pt(!1),[i,s]=pt(t);return i?vt("img",{className:"profileImg",src:i,onError:()=>{r?s(null):(s(n),o(!0))}}):vt("div",{class:"profileWithoutImg"})};const Yt=function(e){let t,n,r,{profilePkey:o,profile:i,options:s}=e;return o&&(n=Ke(o),r=`${Xe(n)}`,t=`https://media.nostr.band/thumbs/${o.slice(-4)}/${o}-picture-64`),vt("div",{class:"cardProfile",children:[t&&i.picture?vt(Zt,{thumbnail:t,fullImage:i.picture}):vt("div",{class:"profileWithoutImg"}),vt("div",{class:"profileDetails",children:[vt("div",{class:"profileName",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${n}`,children:i.display_name||i.name||"Loading..."})}),vt("div",{class:"profilePkey",children:[vt(Ft,{additionalClasses:"w-4 h-4"}),vt("span",{class:"pkey",children:r||"npub..."}),vt(Wt,{iconClasses:"w-4 h-4",copyText:n})]})]}),s&&!s.hideNostrich?vt("div",{className:"nostrichLink",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://heynostr.com",className:"linkLink",children:vt(Gt,{additionalClasses:"w-4 h-4"})})}):null]})};const Kt=function(e){let{additionalClasses:t}=e,n="followersIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"})})};const Jt=function(e){let t,n,{profile:r,followersCount:o,zapAmount:i,options:s}=e;return r&&r.pubkey&&(t=Ke(r.pubkey),n=et(i)),vt("div",{class:"cardMeta",children:[vt("hr",{}),vt("div",{class:"cardInteractions",children:[s&&s.showZaps?vt("div",{className:"interactionContainer",title:"Total sats zapped",children:[vt(jt,{additionalClasses:"w-5 h-5"}),vt("span",{className:"zapAmount",children:n})]}):null,vt("div",{class:"interactionContainer",title:"Number of followers",children:[vt(Kt,{additionalClasses:"w-5 h-5"}),vt("span",{class:"followersCount",children:o})]}),vt("div",{class:"interactionContainer",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${t}`,class:"linkLink",children:[vt(Rt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),vt("span",{class:"displayText",children:"Open"})]})}),s&&s.showCopyAddr?vt("div",{className:"interactionContainer",children:vt(Wt,{iconClasses:"w-5 h-5",displayText:"Copy Npub",copyText:t})}):null]})]})},Qt=[".jpg",".jpeg",".png",".webp",".gif"],Xt=[".mov",".mp4"],en=["youtube"];const tn=class extends y{constructor(e){super(e);let t=e.id,n=1;e.id.startsWith("npub1")?(t=Qe(e.id),n=0):e.id.startsWith("note1")?t=function(e){const t=Ve.gW.decode(e,120);return"note"!=t.prefix?"":Je(t.words)}(e.id):e.id.startsWith("naddr")&&(t=function(e){if(!e)return;const t=Ve.gW.decode(e,120);let n=function(e){let t={},n=e;for(;n.length>0;){let e=n[0],r=n[1],o=n.slice(2,2+r);n=n.slice(2+r),o.length<r||(t[e]=t[e]||[],t[e].push(o))}return t}(new Uint8Array(Ve.gW.fromWords(t.words)));if(!n[0]?.[0])throw new Error("missing TLV 0 for naddr");if(!n[2]?.[0])throw new Error("missing TLV 2 for naddr");if(32!==n[2][0].length)throw new Error("TLV 2 should be 32 bytes");if(!n[3]?.[0])throw new Error("missing TLV 3 for naddr");if(4!==n[3][0].length)throw new Error("TLV 3 should be 4 bytes");return{type:"naddr",data:{identifier:Fe.decode(n[0][0]),pubkey:tt(n[2][0]),kind:parseInt(tt(n[3][0]),16),relays:n[1]?n[1].map((e=>Fe.decode(e))):[]}}}(e.id),n=t.data.identifier?2:3),this.state={id:t,kind:n,relay:e.relay,note:{},profile:{},profilesList:{},taggedProfiles:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0,zapAmount:0,followersCount:0,countTaggedProfiles:0}}sha256(e){const t=(new TextEncoder).encode(e);return Oe.sha256(t).then((e=>Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join("")))}async getNostrEventID(e){const t=[0,e.pubkey,e.created_at,e.kind,e.tags,e.content],n=JSON.stringify(t);return await this.sha256(n)}verifyNostrSignature(e){return We.verify(e.sig,e.id,e.pubkey)}async validateNostrEvent(e){if(e.id!==await this.getNostrEventID(e))return!1;if("string"!=typeof e.content)return!1;if("number"!=typeof e.created_at)return!1;if(!Array.isArray(e.tags))return!1;for(let t=0;t<e.tags.length;t++){let n=e.tags[t];if(!Array.isArray(n))return!1;for(let e=0;e<n.length;e++)if("object"==typeof n[e])return!1}return!0}async isValidEvent(e){return e.id&&e.pubkey&&e.sig&&await this.validateNostrEvent(e)&&this.verifyNostrSignature(e)}componentDidMount(){const e=e=>{switch(this.state.kind){case 0:return this.fetchProfile({socket:e,profilePkey:this.state.id});case 1:return this.fetchNote({socket:e,noteId:this.state.id});case 2:case 3:return this.fetchProfilesList({socket:e,data:this.state.id.data})}};window.__nostrEmbed||(window.__nostrEmbed={sockets:{}});let t=null;if(this.state.relay in window.__nostrEmbed.sockets&&(t=window.__nostrEmbed.sockets[this.state.relay],1==t.readyState?e(t):0==t.readyState?t.starts.push(e):t=null),t)return;t=new WebSocket(this.state.relay),window.__nostrEmbed.sockets[this.state.relay]=t,t.starts=[e],t.onopen=()=>{console.log(`Connected to Nostr relay: ${t.url}`);for(const e of t.starts)e(t);t.starts=null},t.onerror=e=>{console.log(`Failed to connect to Nostr relay: ${t.url}}`)};const n={};t.onmessage=e=>{try{const r=JSON.parse(e.data);if(!r||!r.length)throw"Bad reply from relay";if("NOTICE"==r[0]&&2==r.length)return void console.log("notice from",t.url,r[1]);if("EOSE"==r[0]&&r.length>1)return void(r[1]in n&&n[r[1]].on_event(null));if("COUNT"==r[0]&&3==r.length)return void(r[1]in n&&n[r[1]].on_count(r[2]));if("EVENT"!=r[0]||r.length<3)throw"Unknown reply from relay";r[1]in n&&n[r[1]].on_event(r[2])}catch(n){console.log("relay",t.url,"bad message",e,"error",n),err(n)}},t.subscribe=e=>{let{type:r,sub:o,ok:i,err:s}=e,a="embed-"+Math.random();const c=[r,a,o];t.send(JSON.stringify(c));const l=()=>{const e=a;a=null,t.send(JSON.stringify(["CLOSE",e])),delete n[e]},d=[],f=[],u=()=>{a&&(clearTimeout(h),l(),i(d))},h=setTimeout((function(){l(),d.length||f.length?A(null):s("timeout on relay",t.url)}),o.limit&&1==o.limit?2e3:6e3),A=async e=>{if(f.push(e),!(f.length>1))for(;f.length;)if((e=f[0])&&await this.isValidEvent(e)&&d.push(e),f.shift(),!e||o.limit&&o.limit==d.length){f.splice(0,f.length),u();break}};n[a]={ok:i,err:s,on_event:A,on_count:async e=>{"COUNT"==r&&(d.push(e),u())}}},t.listEvents=e=>{let{sub:n,ok:r,err:o}=e;t.subscribe({type:"REQ",sub:n,ok:r,err:o})},t.countEvents=e=>{let{sub:n,ok:r,err:o}=e;t.subscribe({type:"COUNT",sub:n,ok:e=>{r(e.length?e[0]:null)},err:o})}}getEvent(e){let{socket:t,sub:n,ok:r,err:o}=e;return new Promise(((e,r)=>{n.limit=1,t.listEvents({sub:n,ok:t=>{e(t?t[0]:null)},err:r})}))}listEvents(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{t.listEvents({sub:n,ok:e,err:r})}))}countEvents(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{t.countEvents({sub:n,ok:e,err:r})}))}fetchNote(e){let{socket:t,noteId:n}=e;const r={ids:[n],kinds:[1]};this.getEvent({socket:t,sub:r}).then((e=>{if(!e)throw console.log("Error: We can't find that note on this relay"),"Event not found";this.setState({note:e,profilePkey:e.pubkey}),this.fetchProfile({socket:t,profilePkey:e.pubkey}),this.fetchMeta({socket:t,noteId:n}),this.fetchTags({socket:t,tags:e.tags})})).catch((e=>{console.log(`Error fetching note: ${e}`),this.setState({note:{error:!0,content:"Sorry, we weren't able to find and parse this note on the specified relay."}})}))}fetchProfile(e){let{socket:t,profilePkey:n}=e;const r={kinds:[0],authors:[n]};this.getEvent({socket:t,sub:r}).then((e=>{if(!e)throw"Event not found";{let r=JSON.parse(e.content);r.pubkey=n,this.setState({profile:r}),0==this.state.kind&&this.fetchProfileMeta({socket:t,pubkey:n})}})).catch((e=>{console.log(`Error fetching profile: ${e}`),this.setState({profile:{pubkey:n,error:!0,about:"Sorry, we weren't able to find this profile on the specified relay."}})}))}fetchProfilesList(e){let{socket:t,data:n}=e;const r={kinds:[n.kind],"#d":[n.identifier],authors:[n.pubkey]};this.getEvent({socket:t,sub:r}).then((e=>{if(!e)throw"Event not found";{let r=this.getProfilesListObj(e.tags);r.created_at=e.created_at,r.id=`${n.kind}:${n.pubkey}:${n.identifier}`,r.naddr=this.props.id,this.setState({profilesList:r}),this.fetchProfile({socket:t,profilePkey:e.pubkey}),this.fetchTags({socket:t,tags:e.tags}),this.fetchMeta({socket:t,data:n})}})).catch((e=>{console.log(`Error fetching profileList: ${e}`),this.setState({profilesList:{error:!0,content:"Sorry, we weren't able to find this profile on the specified relay."}})}))}fetchTags(e){let{socket:t,tags:n}=e;const r={kinds:[0],authors:[]};let o=0;for(const e of n)r.authors.length<100&&e.length>=2&&"p"==e[0]&&r.authors.push(e[1]),e.length>=2&&"p"==e[0]&&o++;this.setState((e=>({countTaggedProfiles:e.countTaggedProfiles+o}))),r.authors.length&&this.listEvents({socket:t,sub:r}).then((e=>{const t={};for(const n of e)try{let e=JSON.parse(n.content);t[n.pubkey]=e}catch(e){console.log("Error bad event content",e,n.content)}this.setState({taggedProfiles:t})})).catch((e=>{console.log(`Error fetching tagged profiles: ${e}`)}))}getProfilesListObj(e){let t={};return e.forEach((e=>{e&&e[0]&&("name"===e[0]&&(t.name=e[1]),"d"===e[0]&&(t.d=e[1]),"description"===e[0]&&(t.description=e[1]))})),t}getZapAmount(e){try{for(const t of e.tags)if(t.length>=2&&"bolt11"==t[0]){const e=(0,qe.decode)(t[1]);for(const t of e.sections)if("amount"==t.name)return parseInt(t.value);break}}catch(t){console.log("Error bad zap",t,e)}return 0}onListMetaEvents(e){for(let t of e)switch(t.kind){case 6:this.setState((e=>({repostsCount:e.repostsCount+1})));break;case 7:this.setState((e=>({likesCount:e.likesCount+1})));break;case 1:this.setState((e=>({repliesCount:e.repliesCount+1})));break;case 9735:this.setState((e=>({zapAmount:e.zapAmount+this.getZapAmount(t)})));break;default:console.log("Unknown note kind")}}fetchMeta(e){let{socket:t,noteId:n,data:r}=e;return t.url.includes("wss://relay.nostr.band")?this.fetchMetaCount({socket:t,noteId:n,data:r}):this.fetchMetaList({socket:t,noteId:n,data:r})}fetchMetaCount(e){let{socket:t,noteId:n,data:r}=e;const o=e=>n?{kinds:[e],"#e":[n]}:r?{kinds:[e],"#a":[`${r.kind}:${r.pubkey}:${r.identifier}`]}:void 0;this.countEvents({socket:t,sub:o(1)}).then((e=>{this.setState((t=>({repliesCount:e?e.count:0})))})),this.countEvents({socket:t,sub:o(6)}).then((e=>{this.setState((t=>({repostsCount:e?e.count:0})))})),this.countEvents({socket:t,sub:o(7)}).then((e=>{this.setState((t=>({likesCount:e?e.count:0})))})),this.listEvents({socket:t,sub:o(9735)}).then((e=>{this.onListMetaEvents(e)}))}fetchMetaList(e){let{socket:t,noteId:n,data:r}=e;const o=this.getSubOnFetchMetaList({noteId:n,data:r});this.listEvents({socket:t,sub:o}).then((e=>{this.onListMetaEvents(e)}))}getSubOnFetchMetaList(e){let{noteId:t,data:n}=e;return t?{kinds:[1,6,7,9735],"#e":[t]}:n?{kinds:[1,6,7,9735],"#a":[`${n.kind}:${n.pubkey}:${n.identifier}`]}:void 0}onListProfileMetaEvents(e){for(let t of e)switch(t.kind){case 3:this.setState((e=>({followersCount:e.followersCount+1})));break;case 9735:this.setState((e=>({zapAmount:e.zapAmount+this.getZapAmount(t)})));break;default:console.log("Unknown event kind")}}fetchProfileMetaCount(e){let{socket:t,pubkey:n}=e;const r=e=>({kinds:[e],"#p":[n]});this.countEvents({socket:t,sub:r(3)}).then((e=>{this.setState((t=>({followersCount:e?e.count:0})))})),this.listEvents({socket:t,sub:r(9735)}).then((e=>{this.onListProfileMetaEvents(e)}))}fetchProfileMetaList(e){let{socket:t,pubkey:n}=e;const r={kinds:[3,9735],"#p":[n]};this.listEvents({socket:t,sub:r}).then((e=>{this.onListProfileMetaEvents(e)}))}fetchProfileMeta(e){let{socket:t,pubkey:n}=e;return t.url.includes("wss://relay.nostr.band")?this.fetchProfileMetaCount({socket:t,pubkey:n}):this.fetchProfileMetaList({socket:t,pubkey:n})}formatLink(e){return this.isVideo(e)?vt("div",{class:"cardContentMedia",children:vt("video",{src:e,controls:!0})}):this.isImage(e)?vt("div",{className:"cardContentMedia",children:vt("img",{className:"cardContentImage",src:e,alt:""})}):this.isYoutube(e)?(e.includes("/watch")&&(e=(e=e.replace("/watch","/embed")).replace("?v=","/")),vt("div",{className:"cardContentMedia",children:vt("iframe",{src:e})})):vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:e,children:e})}changeLinkRegister(e){return e.toLowerCase()}splitLink(e,t){const n=e.split("?");return n.length>t?n[t]:e}isAnyEndWith(e,t){return t.some((function(t){return e.endsWith(t)}))}isAnyContains(e,t){return t.some((function(t){return e.includes(t)}))}isImage(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyEndWith(t,Qt)}isVideo(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyEndWith(t,Xt)}isYoutube(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyContains(t,en)}formatContent(){if(!this.state.note.content)return"";const e=e=>{const t=function(e){return`${e.slice(0,10)}...${e.slice(-4)}`}(e);return vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${e}`,children:t})},t=(e,t)=>{let n=Xe(e);if(t in this.state.taggedProfiles){const e=this.state.taggedProfiles[t];n=e?.name||e?.display_name||n}return vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${e}`,children:["@",n]})},n=this.state.note,r=n.content.split(/(#\[\d+\])/gi).map((r=>{const o=r.match(/#\[(\d+)\]/);if(o&&2===o.length){const i=parseInt(o[1]);if(i<n.tags.length&&n.tags[i].length>=2){const r=n.tags[i];switch(r[0]){case"p":return t(Ke(r[1]),r[1]);case"e":return e(Ye(r[1]));case"t":return vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/?q=%23${r[1]}`,children:["#",r[1]]})}}return r}return r.split(/(nostr:[a-z0-9]+)/gi).map((n=>{const r=n.match(/nostr:([a-z0-9]+)/);if(r&&2===r.length)return r[1].startsWith("note1")||r[1].startsWith("nevent1")?e(r[1]):r.startsWith("npub1")?t(r[1],Qe(r[1])):n;return n.split(/((?:http|ftp|https):\/\/(?:[\w+?.\w+])+(?:[a-zA-Z0-9~!@#$%^&*()_\-=+\\/?.:;',]*)?(?:[-A-Za-z0-9+&@#/%=~_|]))/i).map((e=>e.match(/^https?:\/\//)?this.formatLink(e):e))}))}));return r}getDiff(){let e;return Object.keys(this.state.taggedProfiles).length>0&&this.state.countTaggedProfiles&&(e=this.state.countTaggedProfiles-Object.keys(this.state.taggedProfiles).length),e}renderNote(){return vt("div",{class:"nostrEmbedCard",children:[vt(Yt,{profilePkey:this.state.profilePkey,profile:this.state.profile,options:this.props.options}),vt("div",{class:this.state.note.error?"cardContent ne-text-red-800":"cardContent",children:this.formatContent()}),vt(Vt,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount,zapAmount:this.state.zapAmount,options:this.props.options})]})}renderProfile(){return vt("div",{class:"nostrEmbedCard",children:[vt(Yt,{profilePkey:this.state.id,profile:this.state.profile,options:this.props.options}),vt("div",{class:this.state.profile.error?"cardContent ne-text-red-800":"cardContent",children:[this.state.profile?.website?vt("p",{children:["Website:"," ",vt("a",{href:this.state.profile?.website,target:"_blank",rel:"noopener noreferrer nofollow",children:this.state.profile?.website})]}):"",this.state.profile?.about||"Loading..."]}),vt(Jt,{profile:this.state.profile,followersCount:this.state.followersCount,zapAmount:this.state.zapAmount,options:this.props.options})]})}renderProfilesList(){return vt("div",{class:"nostrEmbedCard",children:[vt(Yt,{profilePkey:this.props.id,profile:this.state.profile,options:this.props.options}),vt("div",{children:[vt("h3",{class:"cardTitle",children:[2===this.state.kind&&this.state.profilesList.name?this.state.profilesList.name:this.state.profilesList.d,3===this.state.kind&&"Following","(",this.state.taggedProfiles?this.state.countTaggedProfiles:0,")"]}),2===this.state.kind&&vt("p",{class:"cardDescription",children:this.state.profilesList.description}),vt("div",{class:"cardList",children:[Object.keys(this.state.taggedProfiles).map((e=>vt("div",{children:vt(Yt,{profilePkey:e,profile:this.state.taggedProfiles[e]})},e+"taggedProfile"))),this.state.countTaggedProfiles>0&&this.state.countTaggedProfiles>Object.keys(this.state.taggedProfiles).length?vt("div",{class:"diffProfiles",children:["And ",this.getDiff()," more profiles."]}):null]})]}),vt(Vt,{profilesList:this.state.profilesList,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount,zapAmount:this.state.zapAmount,options:this.props.options})]})}render(){switch(this.state.kind){case 0:return this.renderProfile();case 1:return this.renderNote();case 2:case 3:return this.renderProfilesList()}}};function nn(e,t,n,r){n||(n="wss://relay.nostr.band/");const o=document.querySelector(t)?document.querySelector(t):document.querySelector("body");L(p(tn,{id:e,relay:n,options:r}),o)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,