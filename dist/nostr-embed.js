/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nostrEmbed=t():e.nostrEmbed=t()}(this,(()=>(()=>{var e,t,n={187:(e,t)=>{"use strict";function n(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function r(...e){const t=(e,t)=>n=>e(t(n));return{encode:Array.from(e).reverse().reduce(((e,n)=>e?t(e,n.encode):n.encode),void 0),decode:e.reduce(((e,n)=>e?t(e,n.decode):n.decode),void 0)}}function o(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("alphabet.encode input should be an array of numbers");return t.map((t=>{if(n(t),t<0||t>=e.length)throw new Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);return e[t]}))},decode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("alphabet.decode input should be array of strings");return t.map((t=>{if("string"!=typeof t)throw new Error(`alphabet.decode: not string element=${t}`);const n=e.indexOf(t);if(-1===n)throw new Error(`Unknown letter: "${t}". Allowed: ${e}`);return n}))}}}function i(e=""){if("string"!=typeof e)throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("join.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`join.encode: non-string input=${e}`);return t.join(e)},decode:t=>{if("string"!=typeof t)throw new Error("join.decode input should be string");return t.split(e)}}}function s(e,t="="){if(n(e),"string"!=typeof t)throw new Error("padding chr should be string");return{encode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.encode: non-string input=${e}`);for(;n.length*e%8;)n.push(t);return n},decode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.decode: non-string input=${e}`);let r=n.length;if(r*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;r>0&&n[r-1]===t;r--)if(!((r-1)*e%8))throw new Error("Invalid padding: string has too much padding");return n.slice(0,r)}}}function a(e){if("function"!=typeof e)throw new Error("normalize fn should be function");return{encode:e=>e,decode:t=>e(t)}}function c(e,t,r){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let o=0;const i=[],s=Array.from(e);for(s.forEach((e=>{if(n(e),e<0||e>=t)throw new Error(`Wrong integer: ${e}`)}));;){let e=0,n=!0;for(let i=o;i<s.length;i++){const a=s[i],c=t*e+a;if(!Number.isSafeInteger(c)||t*e/t!==e||c-a!=t*e)throw new Error("convertRadix: carry overflow");if(e=c%r,s[i]=Math.floor(c/r),!Number.isSafeInteger(s[i])||s[i]*r+e!==c)throw new Error("convertRadix: carry overflow");n&&(s[i]?n=!1:o=i)}if(i.push(e),n)break}for(let t=0;t<e.length-1&&0===e[t];t++)i.push(0);return i.reverse()}Object.defineProperty(t,"__esModule",{value:!0}),t.bytes=t.stringToBytes=t.str=t.bytesToString=t.hex=t.utf8=t.bech32m=t.bech32=t.base58check=t.base58xmr=t.base58xrp=t.base58flickr=t.base58=t.base64url=t.base64=t.base32crockford=t.base32hex=t.base32=t.base16=t.utils=t.assertNumber=void 0,t.assertNumber=n;const l=(e,t)=>t?l(t,e%t):e,f=(e,t)=>e+(t-l(e,t));function d(e,t,r,o){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(t<=0||t>32)throw new Error(`convertRadix2: wrong from=${t}`);if(r<=0||r>32)throw new Error(`convertRadix2: wrong to=${r}`);if(f(t,r)>32)throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${f(t,r)}`);let i=0,s=0;const a=2**r-1,c=[];for(const o of e){if(n(o),o>=2**t)throw new Error(`convertRadix2: invalid data word=${o} from=${t}`);if(i=i<<t|o,s+t>32)throw new Error(`convertRadix2: carry overflow pos=${s} from=${t}`);for(s+=t;s>=r;s-=r)c.push((i>>s-r&a)>>>0);i&=2**s-1}if(i=i<<r-s&a,!o&&s>=t)throw new Error("Excess padding");if(!o&&i)throw new Error(`Non-zero padding: ${i}`);return o&&s>0&&c.push(i>>>0),c}function u(e){return n(e),{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return c(Array.from(t),256,e)},decode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("radix.decode input should be array of strings");return Uint8Array.from(c(t,e,256))}}}function A(e,t=!1){if(n(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(f(8,e)>32||f(e,8)>32)throw new Error("radix2: carry overflow");return{encode:n=>{if(!(n instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return d(Array.from(n),8,e,!t)},decode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(d(n,e,8,t))}}}function h(e){if("function"!=typeof e)throw new Error("unsafeWrapper fn should be function");return function(...t){try{return e.apply(null,t)}catch(e){}}}function p(e,t){if(n(e),"function"!=typeof t)throw new Error("checksum fn should be function");return{encode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.encode: input should be Uint8Array");const r=t(n).slice(0,e),o=new Uint8Array(n.length+e);return o.set(n),o.set(r,n.length),o},decode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.decode: input should be Uint8Array");const r=n.slice(0,-e),o=t(r).slice(0,e),i=n.slice(-e);for(let t=0;t<e;t++)if(o[t]!==i[t])throw new Error("Invalid checksum");return r}}}t.utils={alphabet:o,chain:r,checksum:p,radix:u,radix2:A,join:i,padding:s},t.base16=r(A(4),o("0123456789ABCDEF"),i("")),t.base32=r(A(5),o("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),s(5),i("")),t.base32hex=r(A(5),o("0123456789ABCDEFGHIJKLMNOPQRSTUV"),s(5),i("")),t.base32crockford=r(A(5),o("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),i(""),a((e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")))),t.base64=r(A(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),s(6),i("")),t.base64url=r(A(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),s(6),i(""));const g=e=>r(u(58),o(e),i(""));t.base58=g("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),t.base58flickr=g("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),t.base58xrp=g("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");const _=[0,2,3,5,6,7,9,10,11];t.base58xmr={encode(e){let n="";for(let r=0;r<e.length;r+=8){const o=e.subarray(r,r+8);n+=t.base58.encode(o).padStart(_[o.length],"1")}return n},decode(e){let n=[];for(let r=0;r<e.length;r+=11){const o=e.slice(r,r+11),i=_.indexOf(o.length),s=t.base58.decode(o);for(let e=0;e<s.length-i;e++)if(0!==s[e])throw new Error("base58xmr: wrong padding");n=n.concat(Array.from(s.slice(s.length-i)))}return Uint8Array.from(n)}};t.base58check=e=>r(p(4,(t=>e(e(t)))),t.base58);const y=r(o("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),i("")),w=[996825010,642813549,513874426,1027748829,705979059];function m(e){const t=e>>25;let n=(33554431&e)<<5;for(let e=0;e<w.length;e++)1==(t>>e&1)&&(n^=w[e]);return n}function b(e,t,n=1){const r=e.length;let o=1;for(let t=0;t<r;t++){const n=e.charCodeAt(t);if(n<33||n>126)throw new Error(`Invalid prefix (${e})`);o=m(o)^n>>5}o=m(o);for(let t=0;t<r;t++)o=m(o)^31&e.charCodeAt(t);for(let e of t)o=m(o)^e;for(let e=0;e<6;e++)o=m(o);return o^=n,y.encode(d([o%2**30],30,5,!1))}function v(e){const t="bech32"===e?1:734539939,n=A(5),r=n.decode,o=n.encode,i=h(r);function s(e,n=90){if("string"!=typeof e)throw new Error("bech32.decode input should be string, not "+typeof e);if(e.length<8||!1!==n&&e.length>n)throw new TypeError(`Wrong string length: ${e.length} (${e}). Expected (8..${n})`);const r=e.toLowerCase();if(e!==r&&e!==e.toUpperCase())throw new Error("String must be lowercase or uppercase");const o=(e=r).lastIndexOf("1");if(0===o||-1===o)throw new Error('Letter "1" must be present between prefix and data only');const i=e.slice(0,o),s=e.slice(o+1);if(s.length<6)throw new Error("Data must be at least 6 characters long");const a=y.decode(s).slice(0,-6),c=b(i,a,t);if(!s.endsWith(c))throw new Error(`Invalid checksum in ${e}: expected "${c}"`);return{prefix:i,words:a}}return{encode:function(e,n,r=90){if("string"!=typeof e)throw new Error("bech32.encode prefix should be string, not "+typeof e);if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("bech32.encode words should be array of numbers, not "+typeof n);const o=e.length+7+n.length;if(!1!==r&&o>r)throw new TypeError(`Length ${o} exceeds limit ${r}`);return`${e=e.toLowerCase()}1${y.encode(n)}${b(e,n,t)}`},decode:s,decodeToBytes:function(e){const{prefix:t,words:n}=s(e,!1);return{prefix:t,words:n,bytes:r(n)}},decodeUnsafe:h(s),fromWords:r,fromWordsUnsafe:i,toWords:o}}t.bech32=v("bech32"),t.bech32m=v("bech32m"),t.utf8={encode:e=>(new TextDecoder).decode(e),decode:e=>(new TextEncoder).encode(e)},t.hex=r(A(4),o("0123456789abcdef"),i(""),a((e=>{if("string"!=typeof e||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})));const C={utf8:t.utf8,hex:t.hex,base16:t.base16,base32:t.base32,base64:t.base64,base64url:t.base64url,base58:t.base58,base58xmr:t.base58xmr},x=`Invalid encoding type. Available types: ${Object.keys(C).join(", ")}`;t.bytesToString=(e,t)=>{if("string"!=typeof e||!C.hasOwnProperty(e))throw new TypeError(x);if(!(t instanceof Uint8Array))throw new TypeError("bytesToString() expects Uint8Array");return C[e].encode(t)},t.str=t.bytesToString;t.stringToBytes=(e,t)=>{if(!C.hasOwnProperty(e))throw new TypeError(x);if("string"!=typeof t)throw new TypeError("stringToBytes() expects string");return C[e].decode(t)},t.bytes=t.stringToBytes},715:(e,t)=>{"use strict";t.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let e=0;e<n.length;e++){const t=n.charAt(e);r[t]=e}function o(e){const t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function i(e){let t=1;for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=o(t)^r>>5}t=o(t);for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);t=o(t)^31&r}return t}function s(e,t,n,r){let o=0,i=0;const s=(1<<n)-1,a=[];for(let r=0;r<e.length;++r)for(o=o<<t|e[r],i+=t;i>=n;)i-=n,a.push(o>>i&s);if(r)i>0&&a.push(o<<n-i&s);else{if(i>=t)return"Excess padding";if(o<<n-i&s)return"Non-zero padding"}return a}function a(e){return s(e,8,5,!0)}function c(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t}function l(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}function f(e){let t;function s(e,n){if(n=n||90,e.length<8)return e+" too short";if(e.length>n)return"Exceeds length limit";const s=e.toLowerCase(),a=e.toUpperCase();if(e!==s&&e!==a)return"Mixed-case string "+e;const c=(e=s).lastIndexOf("1");if(-1===c)return"No separator character for "+e;if(0===c)return"Missing prefix for "+e;const l=e.slice(0,c),f=e.slice(c+1);if(f.length<6)return"Data too short";let d=i(l);if("string"==typeof d)return d;const u=[];for(let e=0;e<f.length;++e){const t=f.charAt(e),n=r[t];if(void 0===n)return"Unknown character "+t;d=o(d)^n,e+6>=f.length||u.push(n)}return d!==t?"Invalid checksum for "+e:{prefix:l,words:u}}return t="bech32"===e?1:734539939,{decodeUnsafe:function(e,t){const n=s(e,t);if("object"==typeof n)return n},decode:function(e,t){const n=s(e,t);if("object"==typeof n)return n;throw new Error(n)},encode:function(e,r,s){if(s=s||90,e.length+7+r.length>s)throw new TypeError("Exceeds length limit");let a=i(e=e.toLowerCase());if("string"==typeof a)throw new Error(a);let c=e+"1";for(let e=0;e<r.length;++e){const t=r[e];if(t>>5!=0)throw new Error("Non 5-bit word");a=o(a)^t,c+=n.charAt(t)}for(let e=0;e<6;++e)a=o(a);a^=t;for(let e=0;e<6;++e){const t=a>>5*(5-e)&31;c+=n.charAt(t)}return c},toWords:a,fromWordsUnsafe:c,fromWords:l}}t.gW=f("bech32"),f("bech32m")},218:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.ne-relative{position:relative}.ne-block{display:block}.ne-flex{display:flex}.ne-hidden{display:none}.ne-h-12{height:3rem}.ne-w-12{width:3rem}.ne-w-5{width:1.25rem}.ne-w-full{width:100%}.ne-cursor-pointer{cursor:pointer}.ne-flex-row{flex-direction:row}.ne-flex-col{flex-direction:column}.ne-items-center{align-items:center}.ne-justify-between{justify-content:space-between}.ne-gap-1{gap:.25rem}.ne-gap-2{gap:.5rem}.ne-gap-4{gap:1rem}.ne-break-words{word-wrap:break-word}.ne-rounded-lg{border-radius:.5rem}.ne-bg-\\[\\#fcfcfc\\]{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity))}.ne-px-4{padding-left:1rem;padding-right:1rem}.ne-py-5{padding-bottom:1.25rem;padding-top:1.25rem}.ne-pb-3{padding-bottom:.75rem}.ne-font-sans{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.ne-text-lg{font-size:1.125rem;line-height:1.75rem}.ne-text-gray-900{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.ne-text-red-800{--tw-text-opacity:1;color:#991b1b;color:rgb(153 27 27/var(--tw-text-opacity))}.ne-no-underline{text-decoration-line:none}.ne-opacity-30{opacity:.3}.nostrEmbedCard{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity));border-radius:.5rem;display:flex;flex-direction:column;gap:2rem;padding:1.25rem 1rem .75rem}@media (min-width:768px){.nostrEmbedCard{max-width:600px}}.nostrEmbedCard{border:1px solid #ddd;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;text-align:left}.cardContent{word-wrap:break-word;font-size:1.125rem;line-height:1.75rem;white-space:pre-line}.cardContentMedia{text-align:center}.cardContentMedia>video,iframe,img{border-radius:15px;width:50%}.cardProfile{align-items:center;display:flex;flex-direction:row;gap:1rem}.profileImg{border-radius:9999px;height:3rem;width:3rem}.profileDetails{display:flex;flex-direction:column}.profileName{font-size:1.125rem;font-weight:700;line-height:1.75rem}.profileName a{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity));text-decoration-line:none}.profileName a:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.profilePkey{align-items:center;display:flex;flex-direction:row;gap:.5rem}.cardMeta{display:flex;flex-direction:column;gap:.25rem}@media (min-width:768px){.cardMeta{gap:.5rem}}hr{margin:.25rem;opacity:.3;width:100%}.cardInteractions{display:flex;flex-direction:row;justify-content:space-between}@media (min-width:768px){.cardInteractions{gap:2.5rem;justify-content:flex-start}}.interactionContainer{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyIcon,.heartIcon,.linkIcon,.replyIcon,.repostIcon{display:block;height:1.25rem;width:1.25rem}.copyIcon,.heartIcon,.linkCopyBtn,.linkIcon,.linkLink,.replyIcon,.repostIcon{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.linkCopyBtn,.linkLink{align-items:center;background-color:transparent;border:0;cursor:pointer;display:flex;flex-direction:row;gap:.5rem;position:relative;text-decoration-line:none}.linkCopyBtn:hover,.linkCopyBtn:hover .copyIcon,.linkLink:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.linkCopyBtn.green,.linkCopyBtn.green .copyIcon{--tw-text-opacity:1;color:#16a34a;color:rgb(22 163 74/var(--tw-text-opacity))}.displayText{display:none}@media (min-width:768px){.displayText{display:flex;font-size:.875rem;line-height:1.25rem;visibility:visible}}.copyText{display:none}@media (min-width:768px){.md\\:ne-visible{visibility:visible}.md\\:ne-flex{display:flex}.md\\:ne-max-w-\\[600px\\]{max-width:600px}.md\\:ne-justify-start{justify-content:flex-start}}","",{version:3,sources:["webpack://./src/components/style.css","<no source>"],names:[],mappings:"AAAA,iBAAA,uBAAc,CAAd,uBAAc,CAAd,kBAAc,CAAd,kBAAc,CAAd,aAAc,CAAd,aAAc,CAAd,aAAc,CAAd,cAAc,CAAd,cAAc,CAAd,YAAc,CAAd,YAAc,CAAd,iBAAc,CAAd,qCAAc,CAAd,cAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,iBAAc,CAAd,0BAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,uCAAc,CAAd,gCAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,WAAc,CAAd,iBAAc,CAAd,eAAc,CAAd,gBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,eAAc,CAAd,YAAc,CAAd,kBAAc,CAAd,oBAAc,CAAd,0BAAc,CAAd,wBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,wBAAc,CAAd,qBAAc,CAAd,WAAA,uBAAc,CAAd,uBAAc,CAAd,kBAAc,CAAd,kBAAc,CAAd,aAAc,CAAd,aAAc,CAAd,aAAc,CAAd,cAAc,CAAd,cAAc,CAAd,YAAc,CAAd,YAAc,CAAd,iBAAc,CAAd,qCAAc,CAAd,cAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,iBAAc,CAAd,0BAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,uCAAc,CAAd,gCAAc,CAAd,2BAAc,CAAd,mCAAc,CAAd,WAAc,CAAd,iBAAc,CAAd,eAAc,CAAd,gBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,eAAc,CAAd,YAAc,CAAd,kBAAc,CAAd,oBAAc,CAAd,0BAAc,CAAd,wBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,wBAAc,CAAd,qBAAc,CAEd,aAAA,iBAAmB,CAAnB,UAAA,aAAmB,CAAnB,SAAA,YAAmB,CAAnB,WAAA,YAAmB,CAAnB,SAAA,WAAmB,CAAnB,SAAA,UAAmB,CAAnB,QAAA,aAAmB,CAAnB,WAAA,UAAmB,CAAnB,mBAAA,cAAmB,CAAnB,aAAA,kBAAmB,CAAnB,aAAA,qBAAmB,CAAnB,iBAAA,kBAAmB,CAAnB,oBAAA,6BAAmB,CAAnB,UAAA,UAAmB,CAAnB,UAAA,SAAmB,CAAnB,UAAA,QAAmB,CAAnB,gBAAA,oBAAmB,CAAnB,eAAA,mBAAmB,CAAnB,oBAAA,iBAAmB,CAAnB,wBAAmB,CAAnB,sDAAmB,CAAnB,SAAA,iBAAmB,CAAnB,kBAAmB,CAAnB,SAAA,sBAAmB,CAAnB,mBAAmB,CAAnB,SAAA,qBAAmB,CAAnB,cAAA,iNAAmB,CAAnB,YAAA,kBAAmB,CAAnB,mBAAmB,CAAnB,kBAAA,mBAAmB,CAAnB,aAAmB,CAAnB,0CAAmB,CAAnB,iBAAA,mBAAmB,CAAnB,aAAmB,CAAnB,2CAAmB,CAAnB,iBAAA,yBAAmB,CAAnB,eAAA,UAAmB,CAGjB,gBAAA,iBAA6G,CAA7G,wBAA6G,CAA7G,sDAA6G,CAA7G,mBAA6G,CAA7G,YAA6G,CAA7G,qBAA6G,CAA7G,QAA6G,CAA7G,2BAA6G,CAA7G,yBAAA,gBAAA,eAA6G,CAAA,CAC7G,gBACA,qBAAsB,CADtB,iNAAgC,CAAhC,eAAgC,CAKhC,aAAA,oBAAuD,CAAvD,kBAAuD,CAAvD,mBAAuD,CAAvD,oBAAuD,CAGzD,kBACE,iBACF,CAEA,mCACE,kBAAmB,CACnB,SACF,CAGE,aAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,QAAmD,CAInD,YAAA,oBAAsC,CAAtC,WAAsC,CAAtC,UAAsC,CAItC,gBAAA,YAA0B,CAA1B,qBAA0B,CAI1B,aAAA,kBAA8B,CAA9B,eAA8B,CAA9B,mBAA8B,CAI9B,eAAA,mBAAuC,CAAvC,aAAuC,CAAvC,0CAAuC,CAAvC,yBAAuC,CAGvC,qBAAA,mBAAuB,CAAvB,aAAuB,CAAvB,0CAAuB,CAIvB,aAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,SAAmD,CAInD,UAAA,YAA+C,CAA/C,qBAA+C,CAA/C,UAA+C,CAA/C,yBAAA,UAAA,SAA+C,CAAA,CAI/C,GAAA,aAAqC,CAArC,UAAqC,CAArC,UAAqC,CAIrC,kBAAA,YAA8E,CAA9E,kBAA8E,CAA9E,6BAA8E,CAA9E,yBAAA,kBAAA,UAA8E,CAA9E,0BAA8E,CAAA,CAI9E,sBAAA,kBAAmD,CAAnD,YAAmD,CAAnD,kBAAmD,CAAnD,SAAmD,CAQnD,sDAAA,aAA8C,CAA9C,cAA8C,CAA9C,aAA8C,CAK9C,6EALA,mBAA8C,CAA9C,aAA8C,CAA9C,0CAKkH,CAAlH,uBAAA,kBAAkH,CAElH,4BAA6B,CAD7B,QAAS,CADT,cAAkH,CAAlH,YAAkH,CAAlH,kBAAkH,CAAlH,SAAkH,CAAlH,iBAAkH,CAAlH,yBAAkH,CAQlH,gEAAA,mBAAuB,CAAvB,aAAuB,CAAvB,0CAAuB,CAKvB,gDAAA,mBAAwB,CAAxB,aAAwB,CAAxB,2CAAwB,CAIxB,aAAA,YAAuD,CAAvD,yBAAA,aAAA,YAAuD,CAAvD,iBAAuD,CAAvD,mBAAuD,CAAvD,kBAAuD,CAAA,CAIvD,UAAA,YAAgB,CAjGlB,yBAAA,gBAAA,mBCAA,ADAA,aAAA,aCAA,ADAA,wBAAA,gBCAA,ADAA,sBAAA,2BCAA,CAAA",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.nostrEmbedCard {\n  @apply ne-px-4 ne-py-5 ne-pb-3 ne-bg-[#fcfcfc] ne-rounded-lg md:ne-max-w-[600px] ne-flex ne-flex-col ne-gap-8;\n  @apply ne-font-sans ne-text-left;\n  border: 1px solid #ddd;\n}\n\n.cardContent {\n  @apply ne-text-lg ne-break-words ne-whitespace-pre-line;\n}\n\n.cardContentMedia {\n  text-align: center;\n}\n\n.cardContentMedia > video, img, iframe {\n  border-radius: 15px;\n  width: 50%;\n}\n\n.cardProfile {\n  @apply ne-flex ne-flex-row ne-gap-4 ne-items-center;\n}\n\n.profileImg {\n  @apply ne-w-12 ne-h-12 ne-rounded-full;\n}\n\n.profileDetails {\n  @apply ne-flex ne-flex-col;\n}\n\n.profileName {\n  @apply ne-text-lg ne-font-bold;\n}\n\n.profileName a {\n  @apply ne-no-underline ne-text-gray-900;\n}\n.profileName a:hover {\n  @apply ne-text-gray-600;\n}\n\n.profilePkey {\n  @apply ne-flex ne-flex-row ne-gap-2 ne-items-center;\n}\n\n.cardMeta {\n  @apply ne-flex ne-flex-col ne-gap-1 md:ne-gap-2;\n}\n\nhr {\n  @apply ne-w-full ne-opacity-30 ne-m-1;\n}\n\n.cardInteractions {\n  @apply ne-flex ne-flex-row ne-justify-between md:ne-justify-start md:ne-gap-10;\n}\n\n.interactionContainer {\n  @apply ne-flex ne-flex-row ne-items-center ne-gap-2;\n}\n\n.replyIcon,\n.repostIcon,\n.heartIcon,\n.linkIcon,\n.copyIcon {\n  @apply ne-text-gray-900 ne-block ne-w-5 ne-h-5;\n}\n\n.linkCopyBtn,\n.linkLink {\n  @apply ne-text-gray-900 ne-no-underline ne-flex ne-flex-row ne-items-center ne-gap-2 ne-cursor-pointer ne-relative;\n  border: 0;\n  background-color: transparent;\n}\n\n.linkCopyBtn:hover,\n.linkLink:hover,\n.linkCopyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.linkCopyBtn.green,\n.linkCopyBtn.green .copyIcon {\n  @apply ne-text-green-600;\n}\n\n.displayText {\n  @apply ne-hidden md:ne-flex md:ne-visible md:ne-text-sm;\n}\n\n.copyText {\n  @apply ne-hidden;\n}\n",null],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var f=[].concat(e[l]);r&&s[f[0]]||(void 0!==i&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=i),n&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=n):f[2]=n),o&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=o):f[4]="".concat(o)),t.push(f))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},632:(e,t,n)=>{const{bech32:r,hex:o,utf8:i}=n(187),s={bech32:"bc",pubKeyHash:0,scriptHash:5,validWitnessVersions:[0]},a={bech32:"tb",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},c={bech32:"bcrt",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},l={bech32:"sb",pubKeyHash:63,scriptHash:123,validWitnessVersions:[0]},f=["option_data_loss_protect","initial_routing_sync","option_upfront_shutdown_script","gossip_queries","var_onion_optin","gossip_queries_ex","option_static_remotekey","payment_secret","basic_mpp","option_support_large_channel"],d={m:BigInt(1e3),u:BigInt(1e6),n:BigInt(1e9),p:BigInt(1e12)},u=BigInt("2100000000000000000"),A=BigInt(1e11),h={payment_hash:1,payment_secret:16,description:13,payee:19,description_hash:23,expiry:6,min_final_cltv_expiry:24,fallback_address:9,route_hint:3,feature_bits:5,metadata:27},p={};for(let e=0,t=Object.keys(h);e<t.length;e++){const n=t[e],r=h[t[e]].toString();p[r]=n}const g={1:e=>o.encode(r.fromWordsUnsafe(e)),16:e=>o.encode(r.fromWordsUnsafe(e)),13:e=>i.encode(r.fromWordsUnsafe(e)),19:e=>o.encode(r.fromWordsUnsafe(e)),23:e=>o.encode(r.fromWordsUnsafe(e)),27:e=>o.encode(r.fromWordsUnsafe(e)),6:y,24:y,3:function(e){const t=[];let n,i,s,a,c,l=r.fromWordsUnsafe(e);for(;l.length>0;)n=o.encode(l.slice(0,33)),i=o.encode(l.slice(33,41)),s=parseInt(o.encode(l.slice(41,45)),16),a=parseInt(o.encode(l.slice(45,49)),16),c=parseInt(o.encode(l.slice(49,51)),16),l=l.slice(51),t.push({pubkey:n,short_channel_id:i,fee_base_msat:s,fee_proportional_millionths:a,cltv_expiry_delta:c});return t},5:function(e){const t=e.slice().reverse().map((e=>[!!(1&e),!!(2&e),!!(4&e),!!(8&e),!!(16&e)])).reduce(((e,t)=>e.concat(t)),[]);for(;t.length<2*f.length;)t.push(!1);const n={};f.forEach(((e,r)=>{let o;o=t[2*r]?"required":t[2*r+1]?"supported":"unsupported",n[e]=o}));const r=t.slice(2*f.length);return n.extra_bits={start_bit:2*f.length,bits:r,has_required:r.reduce(((e,t,n)=>n%2!=0?e||!1:e||t),!1)},n}};function _(e){return t=>({tagCode:parseInt(e),words:r.encode("unknown",t,Number.MAX_SAFE_INTEGER)})}function y(e){return e.reverse().reduce(((e,t,n)=>e+t*Math.pow(32,n)),0)}function w(e,t){let n,r;if(e.slice(-1).match(/^[munp]$/))n=e.slice(-1),r=e.slice(0,-1);else{if(e.slice(-1).match(/^[^munp0-9]$/))throw new Error("Not a valid multiplier for the amount");r=e}if(!r.match(/^\d+$/))throw new Error("Not a valid human readable amount");const o=BigInt(r),i=n?o*A/d[n]:o*A;if("p"===n&&o%BigInt(10)!==BigInt(0)||i>u)throw new Error("Amount is outside of valid range");return t?i.toString():i}e.exports={decode:function(e,t){if("string"!=typeof e)throw new Error("Lightning Payment Request must be string");if("ln"!==e.slice(0,2).toLowerCase())throw new Error("Not a proper lightning payment request");const n=[],i=r.decode(e,Number.MAX_SAFE_INTEGER);e=e.toLowerCase();const f=i.prefix;let d=i.words,u=e.slice(f.length+1),A=d.slice(-104);d=d.slice(0,-104);let m=f.match(/^ln(\S+?)(\d*)([a-zA-Z]?)$/);if(m&&!m[2]&&(m=f.match(/^ln(\S+)$/)),!m)throw new Error("Not a proper lightning payment request");n.push({name:"lightning_network",letters:"ln"});const b=m[1];let v;if(t){if(void 0===t.bech32||void 0===t.pubKeyHash||void 0===t.scriptHash||!Array.isArray(t.validWitnessVersions))throw new Error("Invalid network");v=t}else switch(b){case s.bech32:v=s;break;case a.bech32:v=a;break;case c.bech32:v=c;break;case l.bech32:v=l}if(!v||v.bech32!==b)throw new Error("Unknown coin bech32 prefix");n.push({name:"coin_network",letters:b,value:v});const C=m[2];let x;if(C){x=w(C+m[3],!0),n.push({name:"amount",letters:m[2]+m[3],value:x})}else x=null;n.push({name:"separator",letters:"1"});const B=y(d.slice(0,7));let k,E,S,I;for(d=d.slice(7),n.push({name:"timestamp",letters:u.slice(0,7),value:B}),u=u.slice(7);d.length>0;){const e=d[0].toString();k=p[e]||"unknown_tag",E=g[e]||_(e),d=d.slice(1),S=y(d.slice(0,2)),d=d.slice(2),I=d.slice(0,S),d=d.slice(S),n.push({name:k,tag:u[0],letters:u.slice(0,3+S),value:E(I)}),u=u.slice(3+S)}n.push({name:"signature",letters:u.slice(0,104),value:o.encode(r.fromWordsUnsafe(A))}),u=u.slice(104),n.push({name:"checksum",letters:u});let N={paymentRequest:e,sections:n,get expiry(){let e=n.find((e=>"expiry"===e.name));if(e)return U("timestamp")+e.value},get route_hints(){return n.filter((e=>"route_hint"===e.name)).map((e=>e.value))}};for(let e in h)"route_hint"!==e&&Object.defineProperty(N,e,{get:()=>U(e)});return N;function U(e){let t=n.find((t=>t.name===e));return t?t.value:void 0}},hrpToMillisat:w}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],f=i[l]||0,d="".concat(l," ").concat(f);i[l]=f+1;var u=n(d),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var h=o(A,r);r.byIndex=a,t.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var c=r(e,o),l=0;l<i.length;l++){var f=n(i[l]);0===t[f].references&&(t[f].updater(),t.splice(f,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},856:()=>{}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>n[e]));return s.default=()=>n,o.d(i,s),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>Gt});var e,t,n,r,s,a,c,l={},f=[],d=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function u(e,t){for(var n in t)e[n]=t[n];return e}function A(e){var t=e.parentNode;t&&t.removeChild(e)}function h(t,n,r){var o,i,s,a={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(s in t.defaultProps)void 0===a[s]&&(a[s]=t.defaultProps[s]);return p(t,a,o,i,null)}function p(e,r,o,i,s){var a={type:e,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++n:s};return null==s&&null!=t.vnode&&t.vnode(a),a}function g(e){return e.children}function _(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||d.test(t)?n:n+"px"}function y(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||_(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||_(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?m:w,i):e.removeEventListener(t,i?m:w,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&-1==t.indexOf("-")?e.removeAttribute(t):e.setAttribute(t,n))}}function w(e){r=!0;try{return this.l[e.type+!1](t.event?t.event(e):e)}finally{r=!1}}function m(e){r=!0;try{return this.l[e.type+!0](t.event?t.event(e):e)}finally{r=!1}}function b(e,t){this.props=e,this.context=t}function v(e,t){if(null==t)return e.__?v(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?v(e):null}function C(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return C(e)}}function x(e){r?setTimeout(e):c(e)}function B(e){(!e.__d&&(e.__d=!0)&&s.push(e)&&!k.__r++||a!==t.debounceRendering)&&((a=t.debounceRendering)||x)(k)}function k(){var e,t,n,r,o,i,a,c;for(s.sort((function(e,t){return e.__v.__b-t.__v.__b}));e=s.shift();)e.__d&&(t=s.length,r=void 0,o=void 0,a=(i=(n=e).__v).__e,(c=n.__P)&&(r=[],(o=u({},i)).__v=i.__v+1,U(c,i,o,n.__n,void 0!==c.ownerSVGElement,null!=i.__h?[a]:null,r,null==a?v(i):a,i.__h),H(r,i),i.__e!=a&&C(i)),s.length>t&&s.sort((function(e,t){return e.__v.__b-t.__v.__b})));k.__r=0}function E(e,t,n,r,o,i,s,a,c,d){var u,A,h,_,y,w,m,b=r&&r.__k||f,C=b.length;for(n.__k=[],u=0;u<t.length;u++)if(null!=(_=n.__k[u]=null==(_=t[u])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?p(null,_,null,null,_):Array.isArray(_)?p(g,{children:_},null,null,null):_.__b>0?p(_.type,_.props,_.key,_.ref?_.ref:null,_.__v):_)){if(_.__=n,_.__b=n.__b+1,null===(h=b[u])||h&&_.key==h.key&&_.type===h.type)b[u]=void 0;else for(A=0;A<C;A++){if((h=b[A])&&_.key==h.key&&_.type===h.type){b[A]=void 0;break}h=null}U(e,_,h=h||l,o,i,s,a,c,d),y=_.__e,(A=_.ref)&&h.ref!=A&&(m||(m=[]),h.ref&&m.push(h.ref,null,_),m.push(A,_.__c||y,_)),null!=y?(null==w&&(w=y),"function"==typeof _.type&&_.__k===h.__k?_.__d=c=S(_,c,e):c=I(e,_,h,b,y,c),"function"==typeof n.type&&(n.__d=c)):c&&h.__e==c&&c.parentNode!=e&&(c=v(h))}for(n.__e=w,u=C;u--;)null!=b[u]&&("function"==typeof n.type&&null!=b[u].__e&&b[u].__e==n.__d&&(n.__d=N(r).nextSibling),P(b[u],b[u]));if(m)for(u=0;u<m.length;u++)D(m[u],m[++u],m[++u])}function S(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?S(r,t,n):I(n,r,r,o,r.__e,t));return t}function I(e,t,n,r,o,i){var s,a,c;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(null==n||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),s=null;else{for(a=i,c=0;(a=a.nextSibling)&&c<r.length;c+=1)if(a==o)break e;e.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function N(e){var t,n,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=N(n)))return r;return null}function U(e,n,r,o,i,s,a,c,l){var f,d,A,h,p,_,y,w,m,v,C,x,B,k,S,I=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(l=r.__h,c=n.__e=r.__e,n.__h=null,s=[c]),(f=t.__b)&&f(n);try{e:if("function"==typeof I){if(w=n.props,m=(f=I.contextType)&&o[f.__c],v=f?m?m.props.value:f.__:o,r.__c?y=(d=n.__c=r.__c).__=d.__E:("prototype"in I&&I.prototype.render?n.__c=d=new I(w,v):(n.__c=d=new b(w,v),d.constructor=I,d.render=$),m&&m.sub(d),d.props=w,d.state||(d.state={}),d.context=v,d.__n=o,A=d.__d=!0,d.__h=[],d._sb=[]),null==d.__s&&(d.__s=d.state),null!=I.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=u({},d.__s)),u(d.__s,I.getDerivedStateFromProps(w,d.__s))),h=d.props,p=d.state,d.__v=n,A)null==I.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(null==I.getDerivedStateFromProps&&w!==h&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(w,v),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(w,d.__s,v)||n.__v===r.__v){for(n.__v!==r.__v&&(d.props=w,d.state=d.__s,d.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),C=0;C<d._sb.length;C++)d.__h.push(d._sb[C]);d._sb=[],d.__h.length&&a.push(d);break e}null!=d.componentWillUpdate&&d.componentWillUpdate(w,d.__s,v),null!=d.componentDidUpdate&&d.__h.push((function(){d.componentDidUpdate(h,p,_)}))}if(d.context=v,d.props=w,d.__P=e,x=t.__r,B=0,"prototype"in I&&I.prototype.render){for(d.state=d.__s,d.__d=!1,x&&x(n),f=d.render(d.props,d.state,d.context),k=0;k<d._sb.length;k++)d.__h.push(d._sb[k]);d._sb=[]}else do{d.__d=!1,x&&x(n),f=d.render(d.props,d.state,d.context),d.state=d.__s}while(d.__d&&++B<25);d.state=d.__s,null!=d.getChildContext&&(o=u(u({},o),d.getChildContext())),A||null==d.getSnapshotBeforeUpdate||(_=d.getSnapshotBeforeUpdate(h,p)),S=null!=f&&f.type===g&&null==f.key?f.props.children:f,E(e,Array.isArray(S)?S:[S],n,r,o,i,s,a,c,l),d.base=n.__e,n.__h=null,d.__h.length&&a.push(d),y&&(d.__E=d.__=null),d.__e=!1}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=T(r.__e,n,r,o,i,s,a,l);(f=t.diffed)&&f(n)}catch(e){n.__v=null,(l||null!=s)&&(n.__e=c,n.__h=!!l,s[s.indexOf(c)]=null),t.__e(e,n,r)}}function H(e,n){t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function T(t,n,r,o,i,s,a,c){var f,d,u,h=r.props,p=n.props,g=n.type,_=0;if("svg"===g&&(i=!0),null!=s)for(;_<s.length;_++)if((f=s[_])&&"setAttribute"in f==!!g&&(g?f.localName===g:3===f.nodeType)){t=f,s[_]=null;break}if(null==t){if(null===g)return document.createTextNode(p);t=i?document.createElementNS("http://www.w3.org/2000/svg",g):document.createElement(g,p.is&&p),s=null,c=!1}if(null===g)h===p||c&&t.data===p||(t.data=p);else{if(s=s&&e.call(t.childNodes),d=(h=r.props||l).dangerouslySetInnerHTML,u=p.dangerouslySetInnerHTML,!c){if(null!=s)for(h={},_=0;_<t.attributes.length;_++)h[t.attributes[_].name]=t.attributes[_].value;(u||d)&&(u&&(d&&u.__html==d.__html||u.__html===t.innerHTML)||(t.innerHTML=u&&u.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||y(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||y(e,i,t[i],n[i],r)}(t,p,h,i,c),u)n.__k=[];else if(_=n.props.children,E(t,Array.isArray(_)?_:[_],n,r,o,i&&"foreignObject"!==g,s,a,s?s[0]:r.__k&&v(r,0),c),null!=s)for(_=s.length;_--;)null!=s[_]&&A(s[_]);c||("value"in p&&void 0!==(_=p.value)&&(_!==t.value||"progress"===g&&!_||"option"===g&&_!==h.value)&&y(t,"value",_,h.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==t.checked&&y(t,"checked",_,h.checked,!1))}return t}function D(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function P(e,n,r){var o,i;if(t.unmount&&t.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||D(o,null,n)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){t.__e(e,n)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&P(o[i],n,r||"function"!=typeof e.type);r||null==e.__e||A(e.__e),e.__=e.__e=e.__d=void 0}function $(e,t,n){return this.constructor(e,n)}function j(n,r,o){var i,s,a;t.__&&t.__(n,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,a=[],U(r,n=(!i&&o||r).__k=h(g,null,[n]),s||l,l,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?e.call(r.childNodes):null,a,!i&&o?o:s?s.__e:r.firstChild,i),H(a,n)}e=f.slice,t={__e:function(e,t,n,r){for(var o,i,s;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),s=o.__d),s)return o.__E=o}catch(t){e=t}throw e}},n=0,r=!1,b.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=u({},this.state),"function"==typeof e&&(e=e(u({},n),this.props)),e&&u(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),B(this))},b.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),B(this))},b.prototype.render=g,s=[],c="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,k.__r=0;var R=o(856),M=o.t(R,2);const W=BigInt(0),z=BigInt(1),O=BigInt(2),L=BigInt(3),q=BigInt(8),V=Object.freeze({a:W,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:z,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),G=(e,t)=>(e+t/O)/t,F={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=V,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-z*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,s=BigInt("0x100000000000000000000000000000000"),a=G(i*e,t),c=G(-r*e,t);let l=be(e-a*n-c*o,t),f=be(-a*r-c*i,t);const d=l>s,u=f>s;if(d&&(l=t-l),u&&(f=t-f),l>s||f>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:d,k1:l,k2neg:u,k2:f}}},Y=32,Z=32,K=Y+1,J=2*Y+1;function Q(e){const{a:t,b:n}=V,r=be(e*e),o=be(r*e);return be(o+t*e+n)}const X=V.a===W;class ee extends Error{constructor(e){super(e)}}function te(e){if(!(e instanceof ne))throw new TypeError("JacobianPoint expected")}class ne{constructor(e,t,n){this.x=e,this.y=t,this.z=n}static fromAffine(e){if(!(e instanceof ie))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(ie.ZERO)?ne.ZERO:new ne(e.x,e.y,z)}static toAffineBatch(e){const t=function(e,t=V.P){const n=new Array(e.length),r=e.reduce(((e,r,o)=>r===W?e:(n[o]=e,be(e*r,t))),z),o=Ce(r,t);return e.reduceRight(((e,r,o)=>r===W?e:(n[o]=be(e*n[o],t),be(e*r,t))),o),n}(e.map((e=>e.z)));return e.map(((e,n)=>e.toAffine(t[n])))}static normalizeZ(e){return ne.toAffineBatch(e).map(ne.fromAffine)}equals(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e,a=be(r*r),c=be(s*s),l=be(t*c),f=be(o*a),d=be(be(n*s)*c),u=be(be(i*r)*a);return l===f&&d===u}negate(){return new ne(this.x,be(-this.y),this.z)}double(){const{x:e,y:t,z:n}=this,r=be(e*e),o=be(t*t),i=be(o*o),s=e+o,a=be(O*(be(s*s)-r-i)),c=be(L*r),l=be(c*c),f=be(l-O*a),d=be(c*(a-f)-q*i),u=be(O*t*n);return new ne(f,d,u)}add(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e;if(o===W||i===W)return this;if(t===W||n===W)return e;const a=be(r*r),c=be(s*s),l=be(t*c),f=be(o*a),d=be(be(n*s)*c),u=be(be(i*r)*a),A=be(f-l),h=be(u-d);if(A===W)return h===W?this.double():ne.ZERO;const p=be(A*A),g=be(A*p),_=be(l*p),y=be(h*h-g-O*_),w=be(h*(_-y)-d*g),m=be(r*s*A);return new ne(y,w,m)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const t=ne.ZERO;if("bigint"==typeof e&&e===W)return t;let n=me(e);if(n===z)return this;if(!X){let e=t,r=this;for(;n>W;)n&z&&(e=e.add(r)),r=r.double(),n>>=z;return e}let{k1neg:r,k1:o,k2neg:i,k2:s}=F.splitScalar(n),a=t,c=t,l=this;for(;o>W||s>W;)o&z&&(a=a.add(l)),s&z&&(c=c.add(l)),l=l.double(),o>>=z,s>>=z;return r&&(a=a.negate()),i&&(c=c.negate()),c=new ne(be(c.x*F.beta),c.y,c.z),a.add(c)}precomputeWindow(e){const t=X?128/e+1:256/e+1,n=[];let r=this,o=r;for(let i=0;i<t;i++){o=r,n.push(o);for(let t=1;t<2**(e-1);t++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(e,t){!t&&this.equals(ne.BASE)&&(t=ie.BASE);const n=t&&t._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=t&&oe.get(t);r||(r=this.precomputeWindow(n),t&&1!==n&&(r=ne.normalizeZ(r),oe.set(t,r)));let o=ne.ZERO,i=ne.BASE;const s=1+(X?128/n:256/n),a=2**(n-1),c=BigInt(2**n-1),l=2**n,f=BigInt(n);for(let t=0;t<s;t++){const n=t*a;let s=Number(e&c);e>>=f,s>a&&(s-=l,e+=z);const d=n,u=n+Math.abs(s)-1,A=t%2!=0,h=s<0;0===s?i=i.add(re(A,r[d])):o=o.add(re(h,r[u]))}return{p:o,f:i}}multiply(e,t){let n,r,o=me(e);if(X){const{k1neg:e,k1:i,k2neg:s,k2:a}=F.splitScalar(o);let{p:c,f:l}=this.wNAF(i,t),{p:f,f:d}=this.wNAF(a,t);c=re(e,c),f=re(s,f),f=new ne(be(f.x*F.beta),f.y,f.z),n=c.add(f),r=l.add(d)}else{const{p:e,f:i}=this.wNAF(o,t);n=e,r=i}return ne.normalizeZ([n,r])[0]}toAffine(e){const{x:t,y:n,z:r}=this,o=this.equals(ne.ZERO);null==e&&(e=o?q:Ce(r));const i=e,s=be(i*i),a=be(s*i),c=be(t*s),l=be(n*a),f=be(r*i);if(o)return ie.ZERO;if(f!==z)throw new Error("invZ was invalid");return new ie(c,l)}}function re(e,t){const n=t.negate();return e?n:t}ne.BASE=new ne(V.Gx,V.Gy,z),ne.ZERO=new ne(W,z,W);const oe=new WeakMap;class ie{constructor(e,t){this.x=e,this.y=t}_setWindowSize(e){this._WINDOW_SIZE=e,oe.delete(this)}hasEvenY(){return this.y%O===W}static fromCompressedHex(e){const t=32===e.length,n=ye(t?e:e.subarray(1));if(!Se(n))throw new Error("Point is not on curve");let r=function(e){const{P:t}=V,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),a=BigInt(88),c=e*e*e%t,l=c*c*e%t,f=ve(l,L)*l%t,d=ve(f,L)*l%t,u=ve(d,O)*c%t,A=ve(u,r)*u%t,h=ve(A,o)*A%t,p=ve(h,s)*h%t,g=ve(p,a)*p%t,_=ve(g,s)*h%t,y=ve(_,L)*l%t,w=ve(y,i)*A%t,m=ve(w,n)*c%t,b=ve(m,O),v=b*b%t;if(v!==e)throw new Error("Cannot find square root");return b}(Q(n));const o=(r&z)===z;if(t)o&&(r=be(-r));else{1==(1&e[0])!==o&&(r=be(-r))}const i=new ie(n,r);return i.assertValidity(),i}static fromUncompressedHex(e){const t=ye(e.subarray(1,Y+1)),n=ye(e.subarray(Y+1,2*Y+1)),r=new ie(t,n);return r.assertValidity(),r}static fromHex(e){const t=we(e),n=t.length,r=t[0];if(n===Y)return this.fromCompressedHex(t);if(n===K&&(2===r||3===r))return this.fromCompressedHex(t);if(n===J&&4===r)return this.fromUncompressedHex(t);throw new Error(`Point.fromHex: received invalid point. Expected 32-${K} compressed bytes or ${J} uncompressed bytes, not ${n}`)}static fromPrivateKey(e){return ie.BASE.multiply(Ie(e))}static fromSignature(e,t,n){const{r,s:o}=Ue(t);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=xe(we(e)),{n:s}=V,a=2===n||3===n?r+s:r,c=Ce(a,s),l=be(-i*c,s),f=be(o*c,s),d=1&n?"03":"02",u=ie.fromHex(d+Ae(a)),A=ie.BASE.multiplyAndAddUnsafe(u,l,f);if(!A)throw new Error("Cannot recover signature: point at infinify");return A.assertValidity(),A}toRawBytes(e=!1){return _e(this.toHex(e))}toHex(e=!1){const t=Ae(this.x);if(e){return`${this.hasEvenY()?"02":"03"}${t}`}return`04${t}${Ae(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:t,y:n}=this;if(!Se(t)||!Se(n))throw new Error(e);const r=be(n*n);if(be(r-Q(t))!==W)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new ie(this.x,be(-this.y))}double(){return ne.fromAffine(this).double().toAffine()}add(e){return ne.fromAffine(this).add(ne.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return ne.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,t,n){const r=ne.fromAffine(this),o=t===W||t===z||this!==ie.BASE?r.multiplyUnsafe(t):r.multiply(t),i=ne.fromAffine(e).multiplyUnsafe(n),s=o.add(i);return s.equals(ne.ZERO)?void 0:s.toAffine()}}function se(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function ae(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${de(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:ye(n),left:e.subarray(t+2)}}ie.BASE=new ie(V.Gx,V.Gy),ie.ZERO=new ie(W,W);class ce{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromCompact(e){const t=e instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof e&&!t)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=t?de(e):e;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new ce(ge(r.slice(0,64)),ge(r.slice(64,128)))}static fromDER(e){const t=e instanceof Uint8Array;if("string"!=typeof e&&!t)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${de(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=ae(e.subarray(2)),{data:r,left:o}=ae(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${de(o)}`);return{r:t,s:r}}(t?e:_e(e));return new ce(n,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:t}=this;if(!Ee(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Ee(t))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=V.n>>z;return this.s>e}normalizeS(){return this.hasHighS()?new ce(this.r,be(-this.s,V.n)):this}toDERRawBytes(){return _e(this.toDERHex())}toDERHex(){const e=se(pe(this.s)),t=se(pe(this.r)),n=e.length/2,r=t.length/2,o=pe(n),i=pe(r);return`30${pe(r+n+4)}02${i}${t}02${o}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return _e(this.toCompactHex())}toCompactHex(){return Ae(this.r)+Ae(this.s)}}function le(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const o=e[t];n.set(o,r),r+=o.length}return n}const fe=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function de(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=fe[e[n]];return t}const ue=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function Ae(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(W<=e&&e<ue))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function he(e){const t=_e(Ae(e));if(32!==t.length)throw new Error("Error: expected 32 bytes");return t}function pe(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function ge(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function _e(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=2*n,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[n]=i}return t}function ye(e){return ge(de(e))}function we(e){return e instanceof Uint8Array?Uint8Array.from(e):_e(e)}function me(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&Ee(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function be(e,t=V.P){const n=e%t;return n>=W?n:t+n}function ve(e,t){const{P:n}=V;let r=e;for(;t-- >W;)r*=r,r%=n;return r}function Ce(e,t=V.P){if(e===W||t<=W)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=be(e,t),r=t,o=W,i=z,s=z,a=W;for(;n!==W;){const e=r/n,t=r%n,c=o-s*e,l=i-a*e;r=n,n=t,o=s,i=a,s=c,a=l}if(r!==z)throw new Error("invert: does not exist");return be(o,t)}function xe(e,t=!1){const n=function(e){const t=8*e.length-8*Z,n=ye(e);return t>0?n>>BigInt(t):n}(e);if(t)return n;const{n:r}=V;return n>=r?n-r:n}let Be,ke;function Ee(e){return W<e&&e<V.n}function Se(e){return W<e&&e<V.P}function Ie(e){let t;if("bigint"==typeof e)t=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if("string"==typeof e){if(e.length!==2*Z)throw new Error("Expected 32 bytes of private key");t=ge(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==Z)throw new Error("Expected 32 bytes of private key");t=ye(e)}if(!Ee(t))throw new Error("Expected private key: 0 < key < n");return t}function Ne(e){return e instanceof ie?(e.assertValidity(),e):ie.fromHex(e)}function Ue(e){if(e instanceof ce)return e.assertValidity(),e;try{return ce.fromDER(e)}catch(t){return ce.fromCompact(e)}}function He(e){return be(ye(e),V.n)}class Te{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromHex(e){const t=we(e);if(64!==t.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${t.length}`);const n=ye(t.subarray(0,32)),r=ye(t.subarray(32,64));return new Te(n,r)}assertValidity(){const{r:e,s:t}=this;if(!Se(e)||!Ee(t))throw new Error("Invalid signature")}toHex(){return Ae(this.r)+Ae(this.s)}toRawBytes(){return _e(this.toHex())}}class De{constructor(e,t,n=Le.randomBytes()){if(null==e)throw new TypeError(`sign: Expected valid message, not "${e}"`);this.m=we(e);const{x:r,scalar:o}=this.getScalar(Ie(t));if(this.px=r,this.d=o,this.rand=we(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(e){const t=ie.fromPrivateKey(e),n=t.hasEvenY()?e:V.n-e;return{point:t,scalar:n,x:t.toRawX()}}initNonce(e,t){return he(e^ye(t))}finalizeNonce(e){const t=be(ye(e),V.n);if(t===W)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(t);return{R:n,rx:r,k:o}}finalizeSig(e,t,n,r){return new Te(e.x,be(t+n*r,V.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:e,d:t,px:n,rand:r}=this,o=Le.taggedHash,i=this.initNonce(t,await o(ze.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(await o(ze.nonce,i,n,e)),l=He(await o(ze.challenge,a,n,e)),f=this.finalizeSig(s,c,l,t);return await je(f,e,n)||this.error(),f}calcSync(){const{m:e,d:t,px:n,rand:r}=this,o=Le.taggedHashSync,i=this.initNonce(t,o(ze.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(o(ze.nonce,i,n,e)),l=He(o(ze.challenge,a,n,e)),f=this.finalizeSig(s,c,l,t);return Re(f,e,n)||this.error(),f}}function Pe(e,t,n){const r=e instanceof Te,o=r?e:Te.fromHex(e);return r&&o.assertValidity(),{...o,m:we(t),P:Ne(n)}}function $e(e,t,n,r){const o=ie.BASE.multiplyAndAddUnsafe(t,Ie(n),be(-r,V.n));return!(!o||!o.hasEvenY()||o.x!==e)}async function je(e,t,n){try{const{r,s:o,m:i,P:s}=Pe(e,t,n),a=He(await Le.taggedHash(ze.challenge,he(r),s.toRawX(),i));return $e(r,s,o,a)}catch(e){return!1}}function Re(e,t,n){try{const{r,s:o,m:i,P:s}=Pe(e,t,n),a=He(Le.taggedHashSync(ze.challenge,he(r),s.toRawX(),i));return $e(r,s,o,a)}catch(e){if(e instanceof ee)throw e;return!1}}const Me={Signature:Te,getPublicKey:function(e){return ie.fromPrivateKey(e).toRawX()},sign:async function(e,t,n){return new De(e,t,n).calc()},verify:je,signSync:function(e,t,n){return new De(e,t,n).calcSync()},verifySync:Re};ie.BASE._setWindowSize(8);const We={node:M,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},ze={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},Oe={},Le={bytesToHex:de,hexToBytes:_e,concatBytes:le,mod:be,invert:Ce,isValidPrivateKey(e){try{return Ie(e),!0}catch(e){return!1}},_bigintTo32Bytes:he,_normalizePrivateKey:Ie,hashToPrivateKey:e=>{e=we(e);const t=Z+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return he(be(ye(e),V.n-z)+z)},randomBytes:(e=32)=>{if(We.web)return We.web.getRandomValues(new Uint8Array(e));if(We.node){const{randomBytes:t}=We.node;return Uint8Array.from(t(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>Le.hashToPrivateKey(Le.randomBytes(Z+8)),precompute(e=8,t=ie.BASE){const n=t===ie.BASE?t:new ie(t.x,t.y);return n._setWindowSize(e),n.multiply(L),n},sha256:async(...e)=>{if(We.web){const t=await We.web.subtle.digest("SHA-256",le(...e));return new Uint8Array(t)}if(We.node){const{createHash:t}=We.node,n=t("sha256");return e.forEach((e=>n.update(e))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(We.web){const n=await We.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=le(...t),o=await We.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(We.node){const{createHmac:n}=We.node,r=n("sha256",e);return t.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=Oe[e];if(void 0===n){const t=await Le.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Oe[e]=n}return Le.sha256(n,...t)},taggedHashSync:(e,...t)=>{if("function"!=typeof Be)throw new ee("sha256Sync is undefined, you need to set it");let n=Oe[e];if(void 0===n){const t=Be(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Oe[e]=n}return Be(n,...t)},_JacobianPoint:ne};Object.defineProperties(Le,{sha256Sync:{configurable:!1,get:()=>Be,set(e){Be||(Be=e)}},hmacSha256Sync:{configurable:!1,get:()=>ke,set(e){ke||(ke=e)}}});var qe=0;function Ve(e,n,r,o,i,s){var a,c,l={};for(c in n)"ref"==c?a=n[c]:l[c]=n[c];var f={type:e,props:l,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--qe,__source:i,__self:s};if("function"==typeof e&&(a=e.defaultProps))for(c in a)void 0===l[c]&&(l[c]=a[c]);return t.vnode&&t.vnode(f),f}const Ge=function(e){let{additionalClasses:t}=e,n="keyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ve("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:Ve("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};var Fe,Ye,Ze,Ke,Je=0,Qe=[],Xe=[],et=t.__b,tt=t.__r,nt=t.diffed,rt=t.__c,ot=t.unmount;function it(e,n){t.__h&&t.__h(Ye,e,Je||n),Je=0;var r=Ye.__H||(Ye.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:Xe}),r.__[e]}function st(e){return Je=1,function(e,t,n){var r=it(Fe++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):ut(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=Ye,!Ye.u)){Ye.u=!0;var o=Ye.shouldComponentUpdate;Ye.shouldComponentUpdate=function(e,t,n){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(e){return e.__c}));if(i.every((function(e){return!e.__N})))return!o||o.call(this,e,t,n);var s=!1;return i.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(s=!0)}})),!(!s&&r.__c.props===e)&&(!o||o.call(this,e,t,n))}}return r.__N||r.__}(ut,e)}function at(){for(var e;e=Qe.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(ft),e.__H.__h.forEach(dt),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){Ye=null,et&&et(e)},t.__r=function(e){tt&&tt(e),Fe=0;var t=(Ye=e.__c).__H;t&&(Ze===Ye?(t.__h=[],Ye.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=Xe,e.__N=e.i=void 0}))):(t.__h.forEach(ft),t.__h.forEach(dt),t.__h=[])),Ze=Ye},t.diffed=function(e){nt&&nt(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==Qe.push(n)&&Ke===t.requestAnimationFrame||((Ke=t.requestAnimationFrame)||lt)(at)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==Xe&&(e.__=e.__V),e.i=void 0,e.__V=Xe}))),Ze=Ye=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(ft),e.__h=e.__h.filter((function(e){return!e.__||dt(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),rt&&rt(e,n)},t.unmount=function(e){ot&&ot(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{ft(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var ct="function"==typeof requestAnimationFrame;function lt(e){var t,n=function(){clearTimeout(r),ct&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);ct&&(t=requestAnimationFrame(n))}function ft(e){var t=Ye,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),Ye=t}function dt(e){var t=Ye;e.__c=e.__(),Ye=t}function ut(e,t){return"function"==typeof t?t(e):t}const At=function(e){let{additionalClasses:t}=e,n="copyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ve("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Ve("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};var ht=o(379),pt=o.n(ht),gt=o(795),_t=o.n(gt),yt=o(569),wt=o.n(yt),mt=o(565),bt=o.n(mt),vt=o(216),Ct=o.n(vt),xt=o(589),Bt=o.n(xt),kt=o(218),Et={};Et.styleTagTransform=Bt(),Et.setAttributes=bt(),Et.insert=wt().bind(null,"head"),Et.domAPI=_t(),Et.insertStyleElement=Ct();pt()(kt.Z,Et);kt.Z&&kt.Z.locals&&kt.Z.locals;const St=function(e){let{iconClasses:t,displayText:n,copyText:r}=e;const[o,i]=st("linkCopyBtn");return Ve("button",{class:o,onClick:()=>function(){try{navigator.clipboard.writeText(r),i(`${o} green`),setTimeout((()=>{i(o.replace("green","").trim())}),500)}catch(e){console.error("Failed to copy: ",e)}}(),children:[Ve(At,{additionalClasses:t}),n&&Ve("span",{class:"displayText",children:n}),Ve("span",{class:"copyText",children:r})]})};var It=o(715);function Nt(e){let t=[];for(let n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t}function Ut(e){const t=Nt(e),n=It.gW.toWords(t);return It.gW.encode("note",n,120)}function Ht(e){const t=Nt(e),n=It.gW.toWords(t);return It.gW.encode("npub",n,120)}function Tt(e){return`${e.slice(0,13)}...${e.slice(-6)}`}const Dt=function(e){let t,n,r,{profilePkey:o,profile:i}=e;return o&&i&&(n=Ht(o),r=`${Tt(n)}`,t=`https://media.nostr.band/thumbs/${o.slice(-4)}/${o}-picture-64`),Ve("div",{class:"cardProfile",children:[Ve("img",{class:"profileImg",src:t||"https://via.placeholder.com/48?text=Loading"}),Ve("div",{class:"profileDetails",children:[Ve("div",{class:"profileName",children:Ve("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${n}`,children:i.display_name||"Loading..."})}),Ve("div",{class:"profilePkey",children:[Ve(Ge,{additionalClasses:"w-4 h-4"}),Ve("span",{class:"pkey",children:r||"npub..."}),Ve(St,{iconClasses:"w-4 h-4",copyText:n})]})]})]})};const Pt=function(e){let{additionalClasses:t}=e,n="heartIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ve("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ve("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const $t=function(e){let{additionalClasses:t}=e,n="replyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ve("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ve("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const jt=function(e){let{additionalClasses:t}=e,n="repostIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ve("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ve("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const Rt=function(e){let{additionalClasses:t}=e,n="linkIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ve("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Ve("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const Mt=function(e){let{additionalClasses:t}=e,n="boltIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ve("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Ve("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z"})})};const Wt=function(e){let t,n,r,o,{note:i,repliesCount:s,repostsCount:a,likesCount:c,zapAmount:l}=e;return i.id&&i.created_at&&(t=new Date(1e3*i.created_at),r=t.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"}),n=Ut(i.id),o=(e=>(e/=1e3)>=1e6?Math.round(e/1e5)/10+"M":e>=1e3?Math.round(e/100)/10+"K":e)(l)),Ve("div",{class:"cardMeta",children:[Ve("div",{class:"cardDate",children:r}),Ve("hr",{}),Ve("div",{class:"cardInteractions",children:[Ve("div",{class:"interactionContainer",title:"Total sats zapped",children:[Ve(Mt,{additionalClasses:"w-5 h-5"}),Ve("span",{class:"zapAmount",children:o})]}),Ve("div",{class:"interactionContainer",title:"Number of replies",children:[Ve($t,{additionalClasses:"w-5 h-5"}),Ve("span",{class:"repliesCount",children:s})]}),Ve("div",{class:"interactionContainer",title:"Number of reposts",children:[Ve(jt,{additionalClasses:"w-5 h-5"}),Ve("span",{class:"repostsCount",children:a})]}),Ve("div",{class:"interactionContainer",title:"Number of likes",children:[Ve(Pt,{additionalClasses:"w-5 h-5"}),Ve("span",{class:"likesCount",children:c})]}),Ve("div",{class:"interactionContainer",children:Ve("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${n}`,class:"linkLink",children:[Ve(Rt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),Ve("span",{class:"displayText",children:"Open"})]})}),Ve("div",{class:"interactionContainer",children:Ve(St,{iconClasses:"w-5 h-5",displayText:"Copy Note ID",copyText:n})})]})]})};var zt=o(632);const Ot=[".jpg",".jpeg",".png",".webp",".gif"],Lt=[".mov",".mp4"],qt=["youtube"];const Vt=class extends b{constructor(e){super(e),this.state={noteId:e.noteId,relay:e.relay,note:{},profile:{},taggedProfiles:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0,zapAmount:0}}sha256(e){const t=(new TextEncoder).encode(e);return Le.sha256(t).then((e=>Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join("")))}async getNostrEventID(e){const t=[0,e.pubkey,e.created_at,e.kind,e.tags,e.content],n=JSON.stringify(t);return await this.sha256(n)}verifyNostrSignature(e){return Me.verify(e.sig,e.id,e.pubkey)}async validateNostrEvent(e){if(e.id!==await this.getNostrEventID(e))return!1;if("string"!=typeof e.content)return!1;if("number"!=typeof e.created_at)return!1;if(!Array.isArray(e.tags))return!1;for(let t=0;t<e.tags.length;t++){let n=e.tags[t];if(!Array.isArray(n))return!1;for(let e=0;e<n.length;e++)if("object"==typeof n[e])return!1}return!0}async isValidEvent(e){return e.id&&e.pubkey&&e.sig&&await this.validateNostrEvent(e)&&this.verifyNostrSignature(e)}componentDidMount(){const e=e=>{this.fetchNote({socket:e})};window.__nostrEmbed||(window.__nostrEmbed={sockets:{}});let t=null;if(this.state.relay in window.__nostrEmbed.sockets&&(t=window.__nostrEmbed.sockets[this.state.relay],1==t.readyState?e(t):0==t.readyState?t.starts.push(e):t=null),t)return;t=new WebSocket(this.state.relay),window.__nostrEmbed.sockets[this.state.relay]=t,t.starts=[e],t.onopen=()=>{console.log(`Connected to Nostr relay: ${t.url}`);for(const e of t.starts)e(t);t.starts=null},t.onerror=()=>{console.log(`Failed to connect to Nostr relay: ${t.url}`)};const n={};t.onmessage=e=>{try{const r=JSON.parse(e.data);if(!r||!r.length)throw"Bad reply from relay";if("NOTICE"==r[0]&&2==r.length)return void console.log("notice from",t.url,r[1]);if("EOSE"==r[0]&&r.length>1)return void(r[1]in n&&n[r[1]].on_event(null));if("EVENT"!=r[0]||r.length<3)throw"Unknown reply from relay";r[1]in n&&n[r[1]].on_event(r[2])}catch(n){console.log("relay",t.url,"bad message",e,"error",n),err(n)}},t.listEvents=e=>{let{sub:r,ok:o,err:i}=e,s="embed-"+Math.random();const a=["REQ",s,r];t.send(JSON.stringify(a));const c=()=>{const e=s;s=null,t.send(JSON.stringify(["CLOSE",e])),delete n[e]},l=[],f=[],d=setTimeout((function(){c(),l.length||f.length?u(null):i("timeout on relay",t.url)}),r.limit&&1==r.limit?2e3:4e3),u=async e=>{if(f.push(e),!(f.length>1))for(;f.length;)if((e=f[0])&&await this.isValidEvent(e)&&l.push(e),f.shift(),!e||r.limit&&r.limit==l.length){f.splice(0,f.length),s&&(clearTimeout(d),c(),o(l));break}};n[s]={ok:o,err:i,on_event:u}}}getEvent(e){let{socket:t,sub:n,ok:r,err:o}=e;return new Promise(((e,r)=>{n.limit=1,t.listEvents({sub:n,ok:t=>{e(t?t[0]:null)},err:r})}))}listEvents(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{t.listEvents({sub:n,ok:e,err:r})}))}fetchNote(e){let{socket:t}=e;const n={ids:[this.state.noteId],kinds:[1]};this.getEvent({socket:t,sub:n}).then((e=>{e?(this.setState({note:e,profilePkey:e.pubkey}),this.fetchProfile({socket:t,profilePkey:e.pubkey}),this.fetchMeta({socket:t,noteId:this.state.noteId}),this.fetchTags({socket:t,tags:e.tags})):(console.log("Error: We can't find that note on this relay"),this.setState({note:{error:!0,content:"Sorry, we weren't able to find this note on the specified relay."}}))})).catch((e=>{console.log(`Error fetching note: ${e}`),this.setState({note:{error:!0,content:"Sorry, there was an error fetching this note from the specified relay. Most often, this is because the relay isn't responding."}})}))}fetchProfile(e){let{socket:t,profilePkey:n}=e;const r={kinds:[0],authors:[n]};this.getEvent({socket:t,sub:r}).then((e=>{if(e)try{let t=JSON.parse(e.content);this.setState({profile:t})}catch(t){console.log("Error bad event content",t,e.content)}})).catch((e=>{console.log(`Error fetching profile: ${e}`)}))}fetchTags(e){let{socket:t,tags:n}=e;const r={kinds:[0],authors:[]};for(const e of n)e.length>=2&&"p"==e[0]&&r.authors.push(e[1]);r.authors.length&&this.listEvents({socket:t,sub:r}).then((e=>{const t={};for(const n of e)try{let e=JSON.parse(n.content);t[n.pubkey]=e}catch(e){console.log("Error bad event content",e,n.content)}this.setState({taggedProfiles:t})})).catch((e=>{console.log(`Error fetching tagged profiles: ${e}`)}))}getZapAmount(e){try{for(const t of e.tags)if(t.length>=2&&"bolt11"==t[0]){const e=(0,zt.decode)(t[1]);for(const t of e.sections)if("amount"==t.name)return parseInt(t.value);break}}catch(t){console.log("Error bad zap",t,e)}return 0}fetchMeta(e){let{socket:t,noteId:n}=e;const r={kinds:[1,6,7,9735],"#e":[n]};this.listEvents({socket:t,sub:r}).then((e=>{for(let t of e)switch(t.kind){case 6:this.setState((e=>({repostsCount:e.repostsCount+1})));break;case 7:this.setState((e=>({likesCount:e.likesCount+1})));break;case 1:this.setState((e=>({repliesCount:e.repliesCount+1})));break;case 9735:this.setState((e=>({zapAmount:e.zapAmount+this.getZapAmount(t)})));break;default:console.log("Unknown note kind")}}))}formatLink(e){return this.isVideo(e)?Ve("div",{class:"cardContentMedia",children:Ve("video",{src:e,controls:!0})}):this.isImage(e)?Ve("div",{className:"cardContentMedia",children:Ve("img",{className:"cardContentImage",src:e,alt:""})}):this.isYoutube(e)?(e.includes("/watch")&&(e=(e=e.replace("/watch","/embed")).replace("?v=","/")),Ve("div",{className:"cardContentMedia",children:Ve("iframe",{src:e})})):Ve("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:e,children:e})}changeLinkRegister(e){return e.toLowerCase()}splitLink(e,t){const n=e.split("?");return n.length>t?n[t]:e}isAnyEndWith(e,t){return t.some((function(t){return e.endsWith(t)}))}isAnyContains(e,t){return t.some((function(t){return e.includes(t)}))}isImage(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyEndWith(t,Ot)}isVideo(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyEndWith(t,Lt)}isYoutube(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyContains(t,qt)}formatContent(){if(!this.state.note.content)return"";const e=this.state.note,t=e.content.split(/(#\[\d+\])/gi).map((t=>{const n=t.match(/#\[(\d+)\]/);if(!n||2!==n.length){const e=/((?:http|ftp|https):\/\/(?:[\w+?.\w+])+(?:[a-zA-Z0-9~!@#$%^&*()_\-=+\\/?.:;',]*)?(?:[-A-Za-z0-9+&@#/%=~_|]))/i;return t.split(e).map((e=>e.match(/^https?:\/\//)?this.formatLink(e):e))}{const t=parseInt(n[1]);if(t<e.tags.length&&e.tags[t].length>=2){const n=e.tags[t];switch(n[0]){case"p":{const e=Ht(n[1]);let t=Tt(e);if(n[1]in this.state.taggedProfiles){const e=this.state.taggedProfiles[n[1]];t=e?.name||e?.display_name||t}return Ve("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${e}`,children:["@",t]})}case"e":{const e=Ut(n[1]),t=function(e){return`${e.slice(0,10)}...${e.slice(-6)}`}(e);return Ve("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${e}`,children:t})}case"t":return Ve("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/?q=%23${n[1]}`,children:["#",n[1]]})}}}return t}));return t}render(){return Ve("div",{class:"nostrEmbedCard",children:[Ve(Dt,{profilePkey:this.state.profilePkey,profile:this.state.profile}),Ve("div",{class:this.state.note.error?"cardContent ne-text-red-800":"cardContent",children:this.formatContent()}),Ve(Wt,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount,zapAmount:this.state.zapAmount})]})}};function Gt(e,t,n){n||(n="wss://relay.nostr.band/all");const r=document.querySelector(t)?document.querySelector(t):document.querySelector("body");j(h(Vt,{noteId:e,relay:n}),r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,