/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nostrEmbed=e():t.nostrEmbed=e()}(this,(()=>(()=>{var t,e,n={715:(t,e)=>{"use strict";e.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let t=0;t<n.length;t++){const e=n.charAt(t);r[e]=t}function o(t){const e=t>>25;return(33554431&t)<<5^996825010&-(e>>0&1)^642813549&-(e>>1&1)^513874426&-(e>>2&1)^1027748829&-(e>>3&1)^705979059&-(e>>4&1)}function i(t){let e=1;for(let n=0;n<t.length;++n){const r=t.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+t+")";e=o(e)^r>>5}e=o(e);for(let n=0;n<t.length;++n){const r=t.charCodeAt(n);e=o(e)^31&r}return e}function s(t,e,n,r){let o=0,i=0;const s=(1<<n)-1,l=[];for(let r=0;r<t.length;++r)for(o=o<<e|t[r],i+=e;i>=n;)i-=n,l.push(o>>i&s);if(r)i>0&&l.push(o<<n-i&s);else{if(i>=e)return"Excess padding";if(o<<n-i&s)return"Non-zero padding"}return l}function l(t){return s(t,8,5,!0)}function a(t){const e=s(t,5,8,!1);if(Array.isArray(e))return e}function c(t){const e=s(t,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}function f(t){let e;function s(t,n){if(n=n||90,t.length<8)return t+" too short";if(t.length>n)return"Exceeds length limit";const s=t.toLowerCase(),l=t.toUpperCase();if(t!==s&&t!==l)return"Mixed-case string "+t;const a=(t=s).lastIndexOf("1");if(-1===a)return"No separator character for "+t;if(0===a)return"Missing prefix for "+t;const c=t.slice(0,a),f=t.slice(a+1);if(f.length<6)return"Data too short";let u=i(c);if("string"==typeof u)return u;const _=[];for(let t=0;t<f.length;++t){const e=f.charAt(t),n=r[e];if(void 0===n)return"Unknown character "+e;u=o(u)^n,t+6>=f.length||_.push(n)}return u!==e?"Invalid checksum for "+t:{prefix:c,words:_}}return e="bech32"===t?1:734539939,{decodeUnsafe:function(t,e){const n=s(t,e);if("object"==typeof n)return n},decode:function(t,e){const n=s(t,e);if("object"==typeof n)return n;throw new Error(n)},encode:function(t,r,s){if(s=s||90,t.length+7+r.length>s)throw new TypeError("Exceeds length limit");let l=i(t=t.toLowerCase());if("string"==typeof l)throw new Error(l);let a=t+"1";for(let t=0;t<r.length;++t){const e=r[t];if(e>>5!=0)throw new Error("Non 5-bit word");l=o(l)^e,a+=n.charAt(e)}for(let t=0;t<6;++t)l=o(l);l^=e;for(let t=0;t<6;++t){const e=l>>5*(5-t)&31;a+=n.charAt(e)}return a},toWords:l,fromWordsUnsafe:a,fromWords:c}}e.gW=f("bech32"),f("bech32m")},856:()=>{}},r={};function o(t){var e=r[t];if(void 0!==e)return e.exports;var i=r[t]={exports:{}};return n[t](i,i.exports,o),i.exports}e=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var s={};t=t||[null,e({}),e([]),e(e)];for(var l=2&r&&n;"object"==typeof l&&!~t.indexOf(l);l=e(l))Object.getOwnPropertyNames(l).forEach((t=>s[t]=()=>n[t]));return s.default=()=>n,o.d(i,s),i},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>ke});var t,e,n,r,s,l,a,c={},f=[],u=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function _(t,e){for(var n in e)t[n]=e[n];return t}function h(t){var e=t.parentNode;e&&e.removeChild(t)}function d(e,n,r){var o,i,s,l={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:l[s]=n[s];if(arguments.length>2&&(l.children=arguments.length>3?t.call(arguments,2):r),"function"==typeof e&&null!=e.defaultProps)for(s in e.defaultProps)void 0===l[s]&&(l[s]=e.defaultProps[s]);return p(e,l,o,i,null)}function p(t,r,o,i,s){var l={type:t,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++n:s};return null==s&&null!=e.vnode&&e.vnode(l),l}function y(t){return t.children}function g(t,e,n){"-"===e[0]?t.setProperty(e,null==n?"":n):t[e]=null==n?"":"number"!=typeof n||u.test(e)?n:n+"px"}function v(t,e,n,r,o){var i;t:if("style"===e)if("string"==typeof n)t.style.cssText=n;else{if("string"==typeof r&&(t.style.cssText=r=""),r)for(e in r)n&&e in n||g(t.style,e,"");if(n)for(e in n)r&&n[e]===r[e]||g(t.style,e,n[e])}else if("o"===e[0]&&"n"===e[1])i=e!==(e=e.replace(/Capture$/,"")),e=e.toLowerCase()in t?e.toLowerCase().slice(2):e.slice(2),t.l||(t.l={}),t.l[e+i]=n,n?r||t.addEventListener(e,i?m:w,i):t.removeEventListener(e,i?m:w,i);else if("dangerouslySetInnerHTML"!==e){if(o)e=e.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==e&&"height"!==e&&"href"!==e&&"list"!==e&&"form"!==e&&"tabIndex"!==e&&"download"!==e&&e in t)try{t[e]=null==n?"":n;break t}catch(t){}"function"==typeof n||(null==n||!1===n&&-1==e.indexOf("-")?t.removeAttribute(e):t.setAttribute(e,n))}}function w(t){r=!0;try{return this.l[t.type+!1](e.event?e.event(t):t)}finally{r=!1}}function m(t){r=!0;try{return this.l[t.type+!0](e.event?e.event(t):t)}finally{r=!1}}function b(t,e){this.props=t,this.context=e}function x(t,e){if(null==e)return t.__?x(t.__,t.__.__k.indexOf(t)+1):null;for(var n;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e)return n.__e;return"function"==typeof t.type?x(t):null}function E(t){var e,n;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e){t.__e=t.__c.base=n.__e;break}return E(t)}}function k(t){r?setTimeout(t):a(t)}function S(t){(!t.__d&&(t.__d=!0)&&s.push(t)&&!A.__r++||l!==e.debounceRendering)&&((l=e.debounceRendering)||k)(A)}function A(){var t,e,n,r,o,i,l,a;for(s.sort((function(t,e){return t.__v.__b-e.__v.__b}));t=s.shift();)t.__d&&(e=s.length,r=void 0,o=void 0,l=(i=(n=t).__v).__e,(a=n.__P)&&(r=[],(o=_({},i)).__v=i.__v+1,H(a,i,o,n.__n,void 0!==a.ownerSVGElement,null!=i.__h?[l]:null,r,null==l?x(i):l,i.__h),N(r,i),i.__e!=l&&E(i)),s.length>e&&s.sort((function(t,e){return t.__v.__b-e.__v.__b})));A.__r=0}function C(t,e,n,r,o,i,s,l,a,u){var _,h,d,g,v,w,m,b=r&&r.__k||f,E=b.length;for(n.__k=[],_=0;_<e.length;_++)if(null!=(g=n.__k[_]=null==(g=e[_])||"boolean"==typeof g?null:"string"==typeof g||"number"==typeof g||"bigint"==typeof g?p(null,g,null,null,g):Array.isArray(g)?p(y,{children:g},null,null,null):g.__b>0?p(g.type,g.props,g.key,g.ref?g.ref:null,g.__v):g)){if(g.__=n,g.__b=n.__b+1,null===(d=b[_])||d&&g.key==d.key&&g.type===d.type)b[_]=void 0;else for(h=0;h<E;h++){if((d=b[h])&&g.key==d.key&&g.type===d.type){b[h]=void 0;break}d=null}H(t,g,d=d||c,o,i,s,l,a,u),v=g.__e,(h=g.ref)&&d.ref!=h&&(m||(m=[]),d.ref&&m.push(d.ref,null,g),m.push(h,g.__c||v,g)),null!=v?(null==w&&(w=v),"function"==typeof g.type&&g.__k===d.__k?g.__d=a=I(g,a,t):a=B(t,g,d,b,v,a),"function"==typeof n.type&&(n.__d=a)):a&&d.__e==a&&a.parentNode!=t&&(a=x(d))}for(n.__e=w,_=E;_--;)null!=b[_]&&("function"==typeof n.type&&null!=b[_].__e&&b[_].__e==n.__d&&(n.__d=P(r).nextSibling),R(b[_],b[_]));if(m)for(_=0;_<m.length;_++)U(m[_],m[++_],m[++_])}function I(t,e,n){for(var r,o=t.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=t,e="function"==typeof r.type?I(r,e,n):B(n,r,r,o,r.__e,e));return e}function B(t,e,n,r,o,i){var s,l,a;if(void 0!==e.__d)s=e.__d,e.__d=void 0;else if(null==n||o!=i||null==o.parentNode)t:if(null==i||i.parentNode!==t)t.appendChild(o),s=null;else{for(l=i,a=0;(l=l.nextSibling)&&a<r.length;a+=1)if(l==o)break t;t.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function P(t){var e,n,r;if(null==t.type||"string"==typeof t.type)return t.__e;if(t.__k)for(e=t.__k.length-1;e>=0;e--)if((n=t.__k[e])&&(r=P(n)))return r;return null}function H(t,n,r,o,i,s,l,a,c){var f,u,h,d,p,g,v,w,m,x,E,k,S,A,I,B=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(c=r.__h,a=n.__e=r.__e,n.__h=null,s=[a]),(f=e.__b)&&f(n);try{t:if("function"==typeof B){if(w=n.props,m=(f=B.contextType)&&o[f.__c],x=f?m?m.props.value:f.__:o,r.__c?v=(u=n.__c=r.__c).__=u.__E:("prototype"in B&&B.prototype.render?n.__c=u=new B(w,x):(n.__c=u=new b(w,x),u.constructor=B,u.render=O),m&&m.sub(u),u.props=w,u.state||(u.state={}),u.context=x,u.__n=o,h=u.__d=!0,u.__h=[],u._sb=[]),null==u.__s&&(u.__s=u.state),null!=B.getDerivedStateFromProps&&(u.__s==u.state&&(u.__s=_({},u.__s)),_(u.__s,B.getDerivedStateFromProps(w,u.__s))),d=u.props,p=u.state,u.__v=n,h)null==B.getDerivedStateFromProps&&null!=u.componentWillMount&&u.componentWillMount(),null!=u.componentDidMount&&u.__h.push(u.componentDidMount);else{if(null==B.getDerivedStateFromProps&&w!==d&&null!=u.componentWillReceiveProps&&u.componentWillReceiveProps(w,x),!u.__e&&null!=u.shouldComponentUpdate&&!1===u.shouldComponentUpdate(w,u.__s,x)||n.__v===r.__v){for(n.__v!==r.__v&&(u.props=w,u.state=u.__s,u.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(t){t&&(t.__=n)})),E=0;E<u._sb.length;E++)u.__h.push(u._sb[E]);u._sb=[],u.__h.length&&l.push(u);break t}null!=u.componentWillUpdate&&u.componentWillUpdate(w,u.__s,x),null!=u.componentDidUpdate&&u.__h.push((function(){u.componentDidUpdate(d,p,g)}))}if(u.context=x,u.props=w,u.__P=t,k=e.__r,S=0,"prototype"in B&&B.prototype.render){for(u.state=u.__s,u.__d=!1,k&&k(n),f=u.render(u.props,u.state,u.context),A=0;A<u._sb.length;A++)u.__h.push(u._sb[A]);u._sb=[]}else do{u.__d=!1,k&&k(n),f=u.render(u.props,u.state,u.context),u.state=u.__s}while(u.__d&&++S<25);u.state=u.__s,null!=u.getChildContext&&(o=_(_({},o),u.getChildContext())),h||null==u.getSnapshotBeforeUpdate||(g=u.getSnapshotBeforeUpdate(d,p)),I=null!=f&&f.type===y&&null==f.key?f.props.children:f,C(t,Array.isArray(I)?I:[I],n,r,o,i,s,l,a,c),u.base=n.__e,n.__h=null,u.__h.length&&l.push(u),v&&(u.__E=u.__=null),u.__e=!1}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=T(r.__e,n,r,o,i,s,l,c);(f=e.diffed)&&f(n)}catch(t){n.__v=null,(c||null!=s)&&(n.__e=a,n.__h=!!c,s[s.indexOf(a)]=null),e.__e(t,n,r)}}function N(t,n){e.__c&&e.__c(n,t),t.some((function(n){try{t=n.__h,n.__h=[],t.some((function(t){t.call(n)}))}catch(t){e.__e(t,n.__v)}}))}function T(e,n,r,o,i,s,l,a){var f,u,_,d=r.props,p=n.props,y=n.type,g=0;if("svg"===y&&(i=!0),null!=s)for(;g<s.length;g++)if((f=s[g])&&"setAttribute"in f==!!y&&(y?f.localName===y:3===f.nodeType)){e=f,s[g]=null;break}if(null==e){if(null===y)return document.createTextNode(p);e=i?document.createElementNS("http://www.w3.org/2000/svg",y):document.createElement(y,p.is&&p),s=null,a=!1}if(null===y)d===p||a&&e.data===p||(e.data=p);else{if(s=s&&t.call(e.childNodes),u=(d=r.props||c).dangerouslySetInnerHTML,_=p.dangerouslySetInnerHTML,!a){if(null!=s)for(d={},g=0;g<e.attributes.length;g++)d[e.attributes[g].name]=e.attributes[g].value;(_||u)&&(_&&(u&&_.__html==u.__html||_.__html===e.innerHTML)||(e.innerHTML=_&&_.__html||""))}if(function(t,e,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in e||v(t,i,null,n[i],r);for(i in e)o&&"function"!=typeof e[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===e[i]||v(t,i,e[i],n[i],r)}(e,p,d,i,a),_)n.__k=[];else if(g=n.props.children,C(e,Array.isArray(g)?g:[g],n,r,o,i&&"foreignObject"!==y,s,l,s?s[0]:r.__k&&x(r,0),a),null!=s)for(g=s.length;g--;)null!=s[g]&&h(s[g]);a||("value"in p&&void 0!==(g=p.value)&&(g!==e.value||"progress"===y&&!g||"option"===y&&g!==d.value)&&v(e,"value",g,d.value,!1),"checked"in p&&void 0!==(g=p.checked)&&g!==e.checked&&v(e,"checked",g,d.checked,!1))}return e}function U(t,n,r){try{"function"==typeof t?t(n):t.current=n}catch(t){e.__e(t,r)}}function R(t,n,r){var o,i;if(e.unmount&&e.unmount(t),(o=t.ref)&&(o.current&&o.current!==t.__e||U(o,null,n)),null!=(o=t.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(t){e.__e(t,n)}o.base=o.__P=null,t.__c=void 0}if(o=t.__k)for(i=0;i<o.length;i++)o[i]&&R(o[i],n,r||"function"!=typeof t.type);r||null==t.__e||h(t.__e),t.__=t.__e=t.__d=void 0}function O(t,e,n){return this.constructor(t,n)}function $(n,r,o){var i,s,l;e.__&&e.__(n,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,l=[],H(r,n=(!i&&o||r).__k=d(y,null,[n]),s||c,c,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?t.call(r.childNodes):null,l,!i&&o?o:s?s.__e:r.firstChild,i),N(l,n)}t=f.slice,e={__e:function(t,e,n,r){for(var o,i,s;e=e.__;)if((o=e.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(t)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(t,r||{}),s=o.__d),s)return o.__E=o}catch(e){t=e}throw t}},n=0,r=!1,b.prototype.setState=function(t,e){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=_({},this.state),"function"==typeof t&&(t=t(_({},n),this.props)),t&&_(n,t),null!=t&&this.__v&&(e&&this._sb.push(e),S(this))},b.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),S(this))},b.prototype.render=y,s=[],a="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,A.__r=0;var M=o(856),j=o.t(M,2);const z=BigInt(0),D=BigInt(1),W=BigInt(2),V=BigInt(3),F=BigInt(8),L=Object.freeze({a:z,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:D,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),q=(t,e)=>(t+e/W)/e,Z={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(t){const{n:e}=L,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-D*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,s=BigInt("0x100000000000000000000000000000000"),l=q(i*t,e),a=q(-r*t,e);let c=bt(t-l*n-a*o,e),f=bt(-l*r-a*i,e);const u=c>s,_=f>s;if(u&&(c=e-c),_&&(f=e-f),c>s||f>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+t);return{k1neg:u,k1:c,k2neg:_,k2:f}}},K=32,G=32,J=K+1,X=2*K+1;function Y(t){const{a:e,b:n}=L,r=bt(t*t),o=bt(r*t);return bt(o+e*t+n)}const Q=L.a===z;class tt extends Error{constructor(t){super(t)}}function et(t){if(!(t instanceof nt))throw new TypeError("JacobianPoint expected")}class nt{constructor(t,e,n){this.x=t,this.y=e,this.z=n}static fromAffine(t){if(!(t instanceof it))throw new TypeError("JacobianPoint#fromAffine: expected Point");return t.equals(it.ZERO)?nt.ZERO:new nt(t.x,t.y,D)}static toAffineBatch(t){const e=function(t,e=L.P){const n=new Array(t.length),r=t.reduce(((t,r,o)=>r===z?t:(n[o]=t,bt(t*r,e))),D),o=Et(r,e);return t.reduceRight(((t,r,o)=>r===z?t:(n[o]=bt(t*n[o],e),bt(t*r,e))),o),n}(t.map((t=>t.z)));return t.map(((t,n)=>t.toAffine(e[n])))}static normalizeZ(t){return nt.toAffineBatch(t).map(nt.fromAffine)}equals(t){et(t);const{x:e,y:n,z:r}=this,{x:o,y:i,z:s}=t,l=bt(r*r),a=bt(s*s),c=bt(e*a),f=bt(o*l),u=bt(bt(n*s)*a),_=bt(bt(i*r)*l);return c===f&&u===_}negate(){return new nt(this.x,bt(-this.y),this.z)}double(){const{x:t,y:e,z:n}=this,r=bt(t*t),o=bt(e*e),i=bt(o*o),s=t+o,l=bt(W*(bt(s*s)-r-i)),a=bt(V*r),c=bt(a*a),f=bt(c-W*l),u=bt(a*(l-f)-F*i),_=bt(W*e*n);return new nt(f,u,_)}add(t){et(t);const{x:e,y:n,z:r}=this,{x:o,y:i,z:s}=t;if(o===z||i===z)return this;if(e===z||n===z)return t;const l=bt(r*r),a=bt(s*s),c=bt(e*a),f=bt(o*l),u=bt(bt(n*s)*a),_=bt(bt(i*r)*l),h=bt(f-c),d=bt(_-u);if(h===z)return d===z?this.double():nt.ZERO;const p=bt(h*h),y=bt(h*p),g=bt(c*p),v=bt(d*d-y-W*g),w=bt(d*(g-v)-u*y),m=bt(r*s*h);return new nt(v,w,m)}subtract(t){return this.add(t.negate())}multiplyUnsafe(t){const e=nt.ZERO;if("bigint"==typeof t&&t===z)return e;let n=mt(t);if(n===D)return this;if(!Q){let t=e,r=this;for(;n>z;)n&D&&(t=t.add(r)),r=r.double(),n>>=D;return t}let{k1neg:r,k1:o,k2neg:i,k2:s}=Z.splitScalar(n),l=e,a=e,c=this;for(;o>z||s>z;)o&D&&(l=l.add(c)),s&D&&(a=a.add(c)),c=c.double(),o>>=D,s>>=D;return r&&(l=l.negate()),i&&(a=a.negate()),a=new nt(bt(a.x*Z.beta),a.y,a.z),l.add(a)}precomputeWindow(t){const e=Q?128/t+1:256/t+1,n=[];let r=this,o=r;for(let i=0;i<e;i++){o=r,n.push(o);for(let e=1;e<2**(t-1);e++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(t,e){!e&&this.equals(nt.BASE)&&(e=it.BASE);const n=e&&e._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=e&&ot.get(e);r||(r=this.precomputeWindow(n),e&&1!==n&&(r=nt.normalizeZ(r),ot.set(e,r)));let o=nt.ZERO,i=nt.BASE;const s=1+(Q?128/n:256/n),l=2**(n-1),a=BigInt(2**n-1),c=2**n,f=BigInt(n);for(let e=0;e<s;e++){const n=e*l;let s=Number(t&a);t>>=f,s>l&&(s-=c,t+=D);const u=n,_=n+Math.abs(s)-1,h=e%2!=0,d=s<0;0===s?i=i.add(rt(h,r[u])):o=o.add(rt(d,r[_]))}return{p:o,f:i}}multiply(t,e){let n,r,o=mt(t);if(Q){const{k1neg:t,k1:i,k2neg:s,k2:l}=Z.splitScalar(o);let{p:a,f:c}=this.wNAF(i,e),{p:f,f:u}=this.wNAF(l,e);a=rt(t,a),f=rt(s,f),f=new nt(bt(f.x*Z.beta),f.y,f.z),n=a.add(f),r=c.add(u)}else{const{p:t,f:i}=this.wNAF(o,e);n=t,r=i}return nt.normalizeZ([n,r])[0]}toAffine(t){const{x:e,y:n,z:r}=this,o=this.equals(nt.ZERO);null==t&&(t=o?F:Et(r));const i=t,s=bt(i*i),l=bt(s*i),a=bt(e*s),c=bt(n*l),f=bt(r*i);if(o)return it.ZERO;if(f!==D)throw new Error("invZ was invalid");return new it(a,c)}}function rt(t,e){const n=e.negate();return t?n:e}nt.BASE=new nt(L.Gx,L.Gy,D),nt.ZERO=new nt(z,D,z);const ot=new WeakMap;class it{constructor(t,e){this.x=t,this.y=e}_setWindowSize(t){this._WINDOW_SIZE=t,ot.delete(this)}hasEvenY(){return this.y%W===z}static fromCompressedHex(t){const e=32===t.length,n=vt(e?t:t.subarray(1));if(!It(n))throw new Error("Point is not on curve");let r=function(t){const{P:e}=L,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),l=BigInt(88),a=t*t*t%e,c=a*a*t%e,f=xt(c,V)*c%e,u=xt(f,V)*c%e,_=xt(u,W)*a%e,h=xt(_,r)*_%e,d=xt(h,o)*h%e,p=xt(d,s)*d%e,y=xt(p,l)*p%e,g=xt(y,s)*d%e,v=xt(g,V)*c%e,w=xt(v,i)*h%e,m=xt(w,n)*a%e,b=xt(m,W),x=b*b%e;if(x!==t)throw new Error("Cannot find square root");return b}(Y(n));const o=(r&D)===D;if(e)o&&(r=bt(-r));else{1==(1&t[0])!==o&&(r=bt(-r))}const i=new it(n,r);return i.assertValidity(),i}static fromUncompressedHex(t){const e=vt(t.subarray(1,K+1)),n=vt(t.subarray(K+1,2*K+1)),r=new it(e,n);return r.assertValidity(),r}static fromHex(t){const e=wt(t),n=e.length,r=e[0];if(n===K)return this.fromCompressedHex(e);if(n===J&&(2===r||3===r))return this.fromCompressedHex(e);if(n===X&&4===r)return this.fromUncompressedHex(e);throw new Error(`Point.fromHex: received invalid point. Expected 32-${J} compressed bytes or ${X} uncompressed bytes, not ${n}`)}static fromPrivateKey(t){return it.BASE.multiply(Bt(t))}static fromSignature(t,e,n){const{r,s:o}=Ht(e);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=kt(wt(t)),{n:s}=L,l=2===n||3===n?r+s:r,a=Et(l,s),c=bt(-i*a,s),f=bt(o*a,s),u=1&n?"03":"02",_=it.fromHex(u+ht(l)),h=it.BASE.multiplyAndAddUnsafe(_,c,f);if(!h)throw new Error("Cannot recover signature: point at infinify");return h.assertValidity(),h}toRawBytes(t=!1){return gt(this.toHex(t))}toHex(t=!1){const e=ht(this.x);if(t){return`${this.hasEvenY()?"02":"03"}${e}`}return`04${e}${ht(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const t="Point is not on elliptic curve",{x:e,y:n}=this;if(!It(e)||!It(n))throw new Error(t);const r=bt(n*n);if(bt(r-Y(e))!==z)throw new Error(t)}equals(t){return this.x===t.x&&this.y===t.y}negate(){return new it(this.x,bt(-this.y))}double(){return nt.fromAffine(this).double().toAffine()}add(t){return nt.fromAffine(this).add(nt.fromAffine(t)).toAffine()}subtract(t){return this.add(t.negate())}multiply(t){return nt.fromAffine(this).multiply(t,this).toAffine()}multiplyAndAddUnsafe(t,e,n){const r=nt.fromAffine(this),o=e===z||e===D||this!==it.BASE?r.multiplyUnsafe(e):r.multiply(e),i=nt.fromAffine(t).multiplyUnsafe(n),s=o.add(i);return s.equals(nt.ZERO)?void 0:s.toAffine()}}function st(t){return Number.parseInt(t[0],16)>=8?"00"+t:t}function lt(t){if(t.length<2||2!==t[0])throw new Error(`Invalid signature integer tag: ${ut(t)}`);const e=t[1],n=t.subarray(2,e+2);if(!e||n.length!==e)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:vt(n),left:t.subarray(e+2)}}it.BASE=new it(L.Gx,L.Gy),it.ZERO=new it(z,z);class at{constructor(t,e){this.r=t,this.s=e,this.assertValidity()}static fromCompact(t){const e=t instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof t&&!e)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=e?ut(t):t;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new at(yt(r.slice(0,64)),yt(r.slice(64,128)))}static fromDER(t){const e=t instanceof Uint8Array;if("string"!=typeof t&&!e)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(t){if(t.length<2||48!=t[0])throw new Error(`Invalid signature tag: ${ut(t)}`);if(t[1]!==t.length-2)throw new Error("Invalid signature: incorrect length");const{data:e,left:n}=lt(t.subarray(2)),{data:r,left:o}=lt(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${ut(o)}`);return{r:e,s:r}}(e?t:gt(t));return new at(n,r)}static fromHex(t){return this.fromDER(t)}assertValidity(){const{r:t,s:e}=this;if(!Ct(t))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Ct(e))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const t=L.n>>D;return this.s>t}normalizeS(){return this.hasHighS()?new at(this.r,bt(-this.s,L.n)):this}toDERRawBytes(){return gt(this.toDERHex())}toDERHex(){const t=st(pt(this.s)),e=st(pt(this.r)),n=t.length/2,r=e.length/2,o=pt(n),i=pt(r);return`30${pt(r+n+4)}02${i}${e}02${o}${t}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return gt(this.toCompactHex())}toCompactHex(){return ht(this.r)+ht(this.s)}}function ct(...t){if(!t.every((t=>t instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===t.length)return t[0];const e=t.reduce(((t,e)=>t+e.length),0),n=new Uint8Array(e);for(let e=0,r=0;e<t.length;e++){const o=t[e];n.set(o,r),r+=o.length}return n}const ft=Array.from({length:256},((t,e)=>e.toString(16).padStart(2,"0")));function ut(t){if(!(t instanceof Uint8Array))throw new Error("Expected Uint8Array");let e="";for(let n=0;n<t.length;n++)e+=ft[t[n]];return e}const _t=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function ht(t){if("bigint"!=typeof t)throw new Error("Expected bigint");if(!(z<=t&&t<_t))throw new Error("Expected number 0 <= n < 2^256");return t.toString(16).padStart(64,"0")}function dt(t){const e=gt(ht(t));if(32!==e.length)throw new Error("Error: expected 32 bytes");return e}function pt(t){const e=t.toString(16);return 1&e.length?`0${e}`:e}function yt(t){if("string"!=typeof t)throw new TypeError("hexToNumber: expected string, got "+typeof t);return BigInt(`0x${t}`)}function gt(t){if("string"!=typeof t)throw new TypeError("hexToBytes: expected string, got "+typeof t);if(t.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+t.length);const e=new Uint8Array(t.length/2);for(let n=0;n<e.length;n++){const r=2*n,o=t.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");e[n]=i}return e}function vt(t){return yt(ut(t))}function wt(t){return t instanceof Uint8Array?Uint8Array.from(t):gt(t)}function mt(t){if("number"==typeof t&&Number.isSafeInteger(t)&&t>0)return BigInt(t);if("bigint"==typeof t&&Ct(t))return t;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function bt(t,e=L.P){const n=t%e;return n>=z?n:e+n}function xt(t,e){const{P:n}=L;let r=t;for(;e-- >z;)r*=r,r%=n;return r}function Et(t,e=L.P){if(t===z||e<=z)throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);let n=bt(t,e),r=e,o=z,i=D,s=D,l=z;for(;n!==z;){const t=r/n,e=r%n,a=o-s*t,c=i-l*t;r=n,n=e,o=s,i=l,s=a,l=c}if(r!==D)throw new Error("invert: does not exist");return bt(o,e)}function kt(t,e=!1){const n=function(t){const e=8*t.length-8*G,n=vt(t);return e>0?n>>BigInt(e):n}(t);if(e)return n;const{n:r}=L;return n>=r?n-r:n}let St,At;function Ct(t){return z<t&&t<L.n}function It(t){return z<t&&t<L.P}function Bt(t){let e;if("bigint"==typeof t)e=t;else if("number"==typeof t&&Number.isSafeInteger(t)&&t>0)e=BigInt(t);else if("string"==typeof t){if(t.length!==2*G)throw new Error("Expected 32 bytes of private key");e=yt(t)}else{if(!(t instanceof Uint8Array))throw new TypeError("Expected valid private key");if(t.length!==G)throw new Error("Expected 32 bytes of private key");e=vt(t)}if(!Ct(e))throw new Error("Expected private key: 0 < key < n");return e}function Pt(t){return t instanceof it?(t.assertValidity(),t):it.fromHex(t)}function Ht(t){if(t instanceof at)return t.assertValidity(),t;try{return at.fromDER(t)}catch(e){return at.fromCompact(t)}}function Nt(t){return bt(vt(t),L.n)}class Tt{constructor(t,e){this.r=t,this.s=e,this.assertValidity()}static fromHex(t){const e=wt(t);if(64!==e.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${e.length}`);const n=vt(e.subarray(0,32)),r=vt(e.subarray(32,64));return new Tt(n,r)}assertValidity(){const{r:t,s:e}=this;if(!It(t)||!Ct(e))throw new Error("Invalid signature")}toHex(){return ht(this.r)+ht(this.s)}toRawBytes(){return gt(this.toHex())}}class Ut{constructor(t,e,n=Vt.randomBytes()){if(null==t)throw new TypeError(`sign: Expected valid message, not "${t}"`);this.m=wt(t);const{x:r,scalar:o}=this.getScalar(Bt(e));if(this.px=r,this.d=o,this.rand=wt(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(t){const e=it.fromPrivateKey(t),n=e.hasEvenY()?t:L.n-t;return{point:e,scalar:n,x:e.toRawX()}}initNonce(t,e){return dt(t^vt(e))}finalizeNonce(t){const e=bt(vt(t),L.n);if(e===z)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(e);return{R:n,rx:r,k:o}}finalizeSig(t,e,n,r){return new Tt(t.x,bt(e+n*r,L.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:t,d:e,px:n,rand:r}=this,o=Vt.taggedHash,i=this.initNonce(e,await o(Dt.aux,r)),{R:s,rx:l,k:a}=this.finalizeNonce(await o(Dt.nonce,i,n,t)),c=Nt(await o(Dt.challenge,l,n,t)),f=this.finalizeSig(s,a,c,e);return await $t(f,t,n)||this.error(),f}calcSync(){const{m:t,d:e,px:n,rand:r}=this,o=Vt.taggedHashSync,i=this.initNonce(e,o(Dt.aux,r)),{R:s,rx:l,k:a}=this.finalizeNonce(o(Dt.nonce,i,n,t)),c=Nt(o(Dt.challenge,l,n,t)),f=this.finalizeSig(s,a,c,e);return Mt(f,t,n)||this.error(),f}}function Rt(t,e,n){const r=t instanceof Tt,o=r?t:Tt.fromHex(t);return r&&o.assertValidity(),{...o,m:wt(e),P:Pt(n)}}function Ot(t,e,n,r){const o=it.BASE.multiplyAndAddUnsafe(e,Bt(n),bt(-r,L.n));return!(!o||!o.hasEvenY()||o.x!==t)}async function $t(t,e,n){try{const{r,s:o,m:i,P:s}=Rt(t,e,n),l=Nt(await Vt.taggedHash(Dt.challenge,dt(r),s.toRawX(),i));return Ot(r,s,o,l)}catch(t){return!1}}function Mt(t,e,n){try{const{r,s:o,m:i,P:s}=Rt(t,e,n),l=Nt(Vt.taggedHashSync(Dt.challenge,dt(r),s.toRawX(),i));return Ot(r,s,o,l)}catch(t){if(t instanceof tt)throw t;return!1}}const jt={Signature:Tt,getPublicKey:function(t){return it.fromPrivateKey(t).toRawX()},sign:async function(t,e,n){return new Ut(t,e,n).calc()},verify:$t,signSync:function(t,e,n){return new Ut(t,e,n).calcSync()},verifySync:Mt};it.BASE._setWindowSize(8);const zt={node:j,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},Dt={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},Wt={},Vt={bytesToHex:ut,hexToBytes:gt,concatBytes:ct,mod:bt,invert:Et,isValidPrivateKey(t){try{return Bt(t),!0}catch(t){return!1}},_bigintTo32Bytes:dt,_normalizePrivateKey:Bt,hashToPrivateKey:t=>{t=wt(t);const e=G+8;if(t.length<e||t.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return dt(bt(vt(t),L.n-D)+D)},randomBytes:(t=32)=>{if(zt.web)return zt.web.getRandomValues(new Uint8Array(t));if(zt.node){const{randomBytes:e}=zt.node;return Uint8Array.from(e(t))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>Vt.hashToPrivateKey(Vt.randomBytes(G+8)),precompute(t=8,e=it.BASE){const n=e===it.BASE?e:new it(e.x,e.y);return n._setWindowSize(t),n.multiply(V),n},sha256:async(...t)=>{if(zt.web){const e=await zt.web.subtle.digest("SHA-256",ct(...t));return new Uint8Array(e)}if(zt.node){const{createHash:e}=zt.node,n=e("sha256");return t.forEach((t=>n.update(t))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(t,...e)=>{if(zt.web){const n=await zt.web.subtle.importKey("raw",t,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=ct(...e),o=await zt.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(zt.node){const{createHmac:n}=zt.node,r=n("sha256",t);return e.forEach((t=>r.update(t))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(t,...e)=>{let n=Wt[t];if(void 0===n){const e=await Vt.sha256(Uint8Array.from(t,(t=>t.charCodeAt(0))));n=ct(e,e),Wt[t]=n}return Vt.sha256(n,...e)},taggedHashSync:(t,...e)=>{if("function"!=typeof St)throw new tt("sha256Sync is undefined, you need to set it");let n=Wt[t];if(void 0===n){const e=St(Uint8Array.from(t,(t=>t.charCodeAt(0))));n=ct(e,e),Wt[t]=n}return St(n,...e)},_JacobianPoint:nt};Object.defineProperties(Vt,{sha256Sync:{configurable:!1,get:()=>St,set(t){St||(St=t)}},hmacSha256Sync:{configurable:!1,get:()=>At,set(t){At||(At=t)}}});var Ft=0;function Lt(t,n,r,o,i,s){var l,a,c={};for(a in n)"ref"==a?l=n[a]:c[a]=n[a];var f={type:t,props:c,key:r,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--Ft,__source:i,__self:s};if("function"==typeof t&&(l=t.defaultProps))for(a in l)void 0===c[a]&&(c[a]=l[a]);return e.vnode&&e.vnode(f),f}const qt=function(t){let{additionalClasses:e}=t,n="keyIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};var Zt,Kt,Gt,Jt,Xt=0,Yt=[],Qt=[],te=e.__b,ee=e.__r,ne=e.diffed,re=e.__c,oe=e.unmount;function ie(t,n){e.__h&&e.__h(Kt,t,Xt||n),Xt=0;var r=Kt.__H||(Kt.__H={__:[],__h:[]});return t>=r.__.length&&r.__.push({__V:Qt}),r.__[t]}function se(t){return Xt=1,function(t,e,n){var r=ie(Zt++,2);if(r.t=t,!r.__c&&(r.__=[n?n(e):_e(void 0,e),function(t){var e=r.__N?r.__N[0]:r.__[0],n=r.t(e,t);e!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=Kt,!Kt.u)){Kt.u=!0;var o=Kt.shouldComponentUpdate;Kt.shouldComponentUpdate=function(t,e,n){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(t){return t.__c}));if(i.every((function(t){return!t.__N})))return!o||o.call(this,t,e,n);var s=!1;return i.forEach((function(t){if(t.__N){var e=t.__[0];t.__=t.__N,t.__N=void 0,e!==t.__[0]&&(s=!0)}})),!(!s&&r.__c.props===t)&&(!o||o.call(this,t,e,n))}}return r.__N||r.__}(_e,t)}function le(){for(var t;t=Yt.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(fe),t.__H.__h.forEach(ue),t.__H.__h=[]}catch(n){t.__H.__h=[],e.__e(n,t.__v)}}e.__b=function(t){Kt=null,te&&te(t)},e.__r=function(t){ee&&ee(t),Zt=0;var e=(Kt=t.__c).__H;e&&(Gt===Kt?(e.__h=[],Kt.__h=[],e.__.forEach((function(t){t.__N&&(t.__=t.__N),t.__V=Qt,t.__N=t.i=void 0}))):(e.__h.forEach(fe),e.__h.forEach(ue),e.__h=[])),Gt=Kt},e.diffed=function(t){ne&&ne(t);var n=t.__c;n&&n.__H&&(n.__H.__h.length&&(1!==Yt.push(n)&&Jt===e.requestAnimationFrame||((Jt=e.requestAnimationFrame)||ce)(le)),n.__H.__.forEach((function(t){t.i&&(t.__H=t.i),t.__V!==Qt&&(t.__=t.__V),t.i=void 0,t.__V=Qt}))),Gt=Kt=null},e.__c=function(t,n){n.some((function(t){try{t.__h.forEach(fe),t.__h=t.__h.filter((function(t){return!t.__||ue(t)}))}catch(r){n.some((function(t){t.__h&&(t.__h=[])})),n=[],e.__e(r,t.__v)}})),re&&re(t,n)},e.unmount=function(t){oe&&oe(t);var n,r=t.__c;r&&r.__H&&(r.__H.__.forEach((function(t){try{fe(t)}catch(t){n=t}})),r.__H=void 0,n&&e.__e(n,r.__v))};var ae="function"==typeof requestAnimationFrame;function ce(t){var e,n=function(){clearTimeout(r),ae&&cancelAnimationFrame(e),setTimeout(t)},r=setTimeout(n,100);ae&&(e=requestAnimationFrame(n))}function fe(t){var e=Kt,n=t.__c;"function"==typeof n&&(t.__c=void 0,n()),Kt=e}function ue(t){var e=Kt;t.__c=t.__(),Kt=e}function _e(t,e){return"function"==typeof e?e(t):e}const he=function(t){let{additionalClasses:e}=t,n="copyIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};const de=function(t){let{iconClasses:e,displayText:n,copyText:r}=t;const[o,i]=se("linkCopyBtn");return Lt("button",{class:o,onClick:()=>function(){try{navigator.clipboard.writeText(r),i(`${o} green`),setTimeout((()=>{i(o.replace("green","").trim())}),500)}catch(t){console.error("Failed to copy: ",t)}}(),children:[Lt(he,{additionalClasses:e}),n&&Lt("span",{class:"displayText",children:n}),Lt("span",{class:"copyText",children:r})]})};var pe=o(715);function ye(t){let e=[];for(let n=0;n<t.length;n+=2)e.push(parseInt(t.substr(n,2),16));return e}const ge=function(t){let e,n,r,{profilePkey:o,profile:i}=t;return o&&i&&(n=function(t){const e=ye(t),n=pe.gW.toWords(e);return pe.gW.encode("npub",n,120)}(o),r=`${n.slice(0,10)}...${n.slice(-10)}`,e=`https://media.nostr.band/thumbs/${o.slice(-4)}/${o}-picture-64`),Lt("div",{class:"cardProfile",children:[Lt("img",{class:"profileImg",src:e||"https://via.placeholder.com/48?text=Loading"}),Lt("div",{class:"profileDetails",children:[Lt("div",{class:"profileName",children:i.display_name||"Loading..."}),Lt("div",{class:"profilePkey",children:[Lt(qt,{additionalClasses:"w-4 h-4"}),Lt("span",{class:"pkey",children:r||"npub..."}),Lt(de,{iconClasses:"w-4 h-4",copyText:n})]})]})]})};const ve=function(t){let{additionalClasses:e}=t,n="heartIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const we=function(t){let{additionalClasses:e}=t,n="replyIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const me=function(t){let{additionalClasses:e}=t,n="repostIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const be=function(t){let{additionalClasses:e}=t,n="linkIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const xe=function(t){let e,n,r,{note:o,repliesCount:i,repostsCount:s,likesCount:l}=t;return o.id&&o.created_at&&(e=new Date(1e3*o.created_at),r=e.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"}),n=function(t){const e=ye(t),n=pe.gW.toWords(e);return pe.gW.encode("note",n,120)}(o.id)),Lt("div",{class:"cardMeta",children:[Lt("div",{class:"cardDate",children:r}),Lt("hr",{}),Lt("div",{class:"cardInteractions",children:[Lt("div",{class:"interactionContainer",children:[Lt(we,{additionalClasses:"w-5 h-5"}),Lt("span",{class:"repliesCount",children:i})]}),Lt("div",{class:"interactionContainer",children:[Lt(me,{additionalClasses:"w-5 h-5"}),Lt("span",{class:"repostsCount",children:s})]}),Lt("div",{class:"interactionContainer",children:[Lt(ve,{additionalClasses:"w-5 h-5"}),Lt("span",{class:"likesCount",children:l})]}),Lt("div",{class:"interactionContainer",children:Lt("a",{href:`https://nostr.band/${n}`,class:"linkLink",children:[Lt(be,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),Lt("span",{class:"displayText",children:"Open"})]})}),Lt("div",{class:"interactionContainer",children:Lt(de,{iconClasses:"w-5 h-5",displayText:"Copy Note ID",copyText:n})})]})]})};const Ee=class extends b{constructor(t){super(t),this.state={noteId:t.noteId,relay:t.relay||"wss://relay.nostr.band",note:{},profile:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0}}sha256(t){const e=(new TextEncoder).encode(t);return Vt.sha256(e).then((t=>Array.from(new Uint8Array(t)).map((t=>t.toString(16).padStart(2,"0"))).join("")))}async getNostrEventID(t){const e=[0,t.pubkey,t.created_at,t.kind,t.tags,t.content],n=JSON.stringify(e);return await this.sha256(n)}verifyNostrSignature(t){return jt.verify(t.sig,t.id,t.pubkey)}async validateNostrEvent(t){if(t.id!==await this.getNostrEventID(t))return!1;if("string"!=typeof t.content)return!1;if("number"!=typeof t.created_at)return!1;if(!Array.isArray(t.tags))return!1;for(let e=0;e<t.tags.length;e++){let n=t.tags[e];if(!Array.isArray(n))return!1;for(let t=0;t<n.length;t++)if("object"==typeof n[t])return!1}return!0}async isValidEvent(t){return t.id&&t.pubkey&&t.sig&&await this.validateNostrEvent(t)&&this.verifyNostrSignature(t)}componentDidMount(){const t=new WebSocket(this.state.relay);t.onopen=()=>{this.fetchNote({socket:t}),console.log(`Connected to Nostr relay: ${t.url}`)},t.onerror=()=>{console.log(`Failed to connect to Nostr relay: ${t.url}`)};const e={};t.onmessage=n=>{try{const r=JSON.parse(n.data);if(!r||!r.length)throw"Bad reply from relay";if("NOTICE"==r[0]&&2==r.length)return void console.log("notice from",t.url,r[1]);if("EOSE"==r[0]&&r.length>1)return void(r[1]in e&&e[r[1]].on_event(null));if("EVENT"!=r[0]||r.length<3)throw"Unknown reply from relay";r[1]in e&&e[r[1]].on_event(r[2])}catch(e){console.log("relay",t.url,"bad message",n,"error",e),err(e)}},t.listEvents=n=>{let{sub:r,ok:o,err:i}=n,s="embed-"+Math.random();const l=["REQ",s,r];t.send(JSON.stringify(l));const a=()=>{const n=s;s=null,t.send(JSON.stringify(["CLOSE",n])),delete e[n]},c=[],f=[],u=setTimeout((function(){a(),c.length||f.length?_(null):i("timeout on relay",t.url)}),r.limit&&1==r.limit?2e3:4e3),_=async t=>{if(f.push(t),!(f.length>1))for(;f.length;)if((t=f[0])&&await this.isValidEvent(t)&&c.push(t),f.shift(),!t||r.limit&&r.limit==c.length){f.splice(0,f.length),s&&(clearTimeout(u),a(),o(c));break}};e[s]={ok:o,err:i,on_event:_}}}getEvent(t){let{socket:e,sub:n,ok:r,err:o}=t;return new Promise(((t,r)=>{n.limit=1,e.listEvents({sub:n,ok:e=>{t(e?e[0]:null)},err:r})}))}listEvents(t){let{socket:e,sub:n}=t;return new Promise(((t,r)=>{e.listEvents({sub:n,ok:t,err:r})}))}fetchNote(t){let{socket:e}=t;const n={ids:[this.state.noteId],kinds:[1]};this.getEvent({socket:e,sub:n}).then((t=>{t?(this.setState({note:t,profilePkey:t.pubkey}),this.fetchProfile({socket:e,profilePkey:t.pubkey}),this.fetchMeta({socket:e,noteId:this.state.noteId})):(console.log("Error: We can't find that note on this relay"),this.setState({note:{error:!0,content:"Sorry, we weren't able to find this note on the specified relay."}}))})).catch((t=>{console.log(`Error fetching note: ${t}`),this.setState({note:{error:!0,content:"Sorry, there was an error fetching this note from the specified relay. Most often, this is because the relay isn't responding."}})}))}fetchProfile(t){let{socket:e,profilePkey:n}=t;const r={kinds:[0],authors:[n]};this.getEvent({socket:e,sub:r}).then((t=>{if(t){let e=JSON.parse(t.content);this.setState({profile:e})}})).catch((t=>{console.log(`Error fetching profile: ${t}`)}))}fetchMeta(t){let{socket:e,noteId:n}=t;const r={kinds:[1,6,7],"#e":[n]};this.listEvents({socket:e,sub:r}).then((t=>{for(let e of t)switch(e.kind){case 6:this.setState((t=>({repostsCount:t.repostsCount+1})));break;case 7:this.setState((t=>({likesCount:t.likesCount+1})));break;case 1:this.setState((t=>({repliesCount:t.repliesCount+1})));break;default:console.log("Unknown note kind")}}))}render(){return Lt("div",{class:"nostrEmbedCard",children:[Lt(ge,{profilePkey:this.state.profilePkey,profile:this.state.profile}),Lt("div",{class:this.state.note.error?"cardContent ne-text-red-800":"cardContent",children:this.state.note.content}),Lt(xe,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount})]})}};function ke(t,e,n){const r=document.querySelector(e)?document.querySelector(e):document.querySelector("body");$(d(Ee,{noteId:t,relay:n}),r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,