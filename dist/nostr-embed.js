/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nostrEmbed=t():e.nostrEmbed=t()}(this,(()=>(()=>{var e,t,n={187:(e,t)=>{"use strict";function n(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function r(...e){const t=(e,t)=>n=>e(t(n));return{encode:Array.from(e).reverse().reduce(((e,n)=>e?t(e,n.encode):n.encode),void 0),decode:e.reduce(((e,n)=>e?t(e,n.decode):n.decode),void 0)}}function o(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("alphabet.encode input should be an array of numbers");return t.map((t=>{if(n(t),t<0||t>=e.length)throw new Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);return e[t]}))},decode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("alphabet.decode input should be array of strings");return t.map((t=>{if("string"!=typeof t)throw new Error(`alphabet.decode: not string element=${t}`);const n=e.indexOf(t);if(-1===n)throw new Error(`Unknown letter: "${t}". Allowed: ${e}`);return n}))}}}function i(e=""){if("string"!=typeof e)throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("join.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`join.encode: non-string input=${e}`);return t.join(e)},decode:t=>{if("string"!=typeof t)throw new Error("join.decode input should be string");return t.split(e)}}}function s(e,t="="){if(n(e),"string"!=typeof t)throw new Error("padding chr should be string");return{encode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.encode: non-string input=${e}`);for(;n.length*e%8;)n.push(t);return n},decode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.decode: non-string input=${e}`);let r=n.length;if(r*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;r>0&&n[r-1]===t;r--)if(!((r-1)*e%8))throw new Error("Invalid padding: string has too much padding");return n.slice(0,r)}}}function a(e){if("function"!=typeof e)throw new Error("normalize fn should be function");return{encode:e=>e,decode:t=>e(t)}}function c(e,t,r){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let o=0;const i=[],s=Array.from(e);for(s.forEach((e=>{if(n(e),e<0||e>=t)throw new Error(`Wrong integer: ${e}`)}));;){let e=0,n=!0;for(let i=o;i<s.length;i++){const a=s[i],c=t*e+a;if(!Number.isSafeInteger(c)||t*e/t!==e||c-a!=t*e)throw new Error("convertRadix: carry overflow");if(e=c%r,s[i]=Math.floor(c/r),!Number.isSafeInteger(s[i])||s[i]*r+e!==c)throw new Error("convertRadix: carry overflow");n&&(s[i]?n=!1:o=i)}if(i.push(e),n)break}for(let t=0;t<e.length-1&&0===e[t];t++)i.push(0);return i.reverse()}Object.defineProperty(t,"__esModule",{value:!0}),t.bytes=t.stringToBytes=t.str=t.bytesToString=t.hex=t.utf8=t.bech32m=t.bech32=t.base58check=t.base58xmr=t.base58xrp=t.base58flickr=t.base58=t.base64url=t.base64=t.base32crockford=t.base32hex=t.base32=t.base16=t.utils=t.assertNumber=void 0,t.assertNumber=n;const l=(e,t)=>t?l(t,e%t):e,d=(e,t)=>e+(t-l(e,t));function f(e,t,r,o){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(t<=0||t>32)throw new Error(`convertRadix2: wrong from=${t}`);if(r<=0||r>32)throw new Error(`convertRadix2: wrong to=${r}`);if(d(t,r)>32)throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${d(t,r)}`);let i=0,s=0;const a=2**r-1,c=[];for(const o of e){if(n(o),o>=2**t)throw new Error(`convertRadix2: invalid data word=${o} from=${t}`);if(i=i<<t|o,s+t>32)throw new Error(`convertRadix2: carry overflow pos=${s} from=${t}`);for(s+=t;s>=r;s-=r)c.push((i>>s-r&a)>>>0);i&=2**s-1}if(i=i<<r-s&a,!o&&s>=t)throw new Error("Excess padding");if(!o&&i)throw new Error(`Non-zero padding: ${i}`);return o&&s>0&&c.push(i>>>0),c}function u(e){return n(e),{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return c(Array.from(t),256,e)},decode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("radix.decode input should be array of strings");return Uint8Array.from(c(t,e,256))}}}function h(e,t=!1){if(n(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(d(8,e)>32||d(e,8)>32)throw new Error("radix2: carry overflow");return{encode:n=>{if(!(n instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return f(Array.from(n),8,e,!t)},decode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(f(n,e,8,t))}}}function A(e){if("function"!=typeof e)throw new Error("unsafeWrapper fn should be function");return function(...t){try{return e.apply(null,t)}catch(e){}}}function p(e,t){if(n(e),"function"!=typeof t)throw new Error("checksum fn should be function");return{encode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.encode: input should be Uint8Array");const r=t(n).slice(0,e),o=new Uint8Array(n.length+e);return o.set(n),o.set(r,n.length),o},decode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.decode: input should be Uint8Array");const r=n.slice(0,-e),o=t(r).slice(0,e),i=n.slice(-e);for(let t=0;t<e;t++)if(o[t]!==i[t])throw new Error("Invalid checksum");return r}}}t.utils={alphabet:o,chain:r,checksum:p,radix:u,radix2:h,join:i,padding:s},t.base16=r(h(4),o("0123456789ABCDEF"),i("")),t.base32=r(h(5),o("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),s(5),i("")),t.base32hex=r(h(5),o("0123456789ABCDEFGHIJKLMNOPQRSTUV"),s(5),i("")),t.base32crockford=r(h(5),o("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),i(""),a((e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")))),t.base64=r(h(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),s(6),i("")),t.base64url=r(h(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),s(6),i(""));const g=e=>r(u(58),o(e),i(""));t.base58=g("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),t.base58flickr=g("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),t.base58xrp=g("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");const w=[0,2,3,5,6,7,9,10,11];t.base58xmr={encode(e){let n="";for(let r=0;r<e.length;r+=8){const o=e.subarray(r,r+8);n+=t.base58.encode(o).padStart(w[o.length],"1")}return n},decode(e){let n=[];for(let r=0;r<e.length;r+=11){const o=e.slice(r,r+11),i=w.indexOf(o.length),s=t.base58.decode(o);for(let e=0;e<s.length-i;e++)if(0!==s[e])throw new Error("base58xmr: wrong padding");n=n.concat(Array.from(s.slice(s.length-i)))}return Uint8Array.from(n)}};t.base58check=e=>r(p(4,(t=>e(e(t)))),t.base58);const y=r(o("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),i("")),m=[996825010,642813549,513874426,1027748829,705979059];function _(e){const t=e>>25;let n=(33554431&e)<<5;for(let e=0;e<m.length;e++)1==(t>>e&1)&&(n^=m[e]);return n}function C(e,t,n=1){const r=e.length;let o=1;for(let t=0;t<r;t++){const n=e.charCodeAt(t);if(n<33||n>126)throw new Error(`Invalid prefix (${e})`);o=_(o)^n>>5}o=_(o);for(let t=0;t<r;t++)o=_(o)^31&e.charCodeAt(t);for(let e of t)o=_(o)^e;for(let e=0;e<6;e++)o=_(o);return o^=n,y.encode(f([o%2**30],30,5,!1))}function b(e){const t="bech32"===e?1:734539939,n=h(5),r=n.decode,o=n.encode,i=A(r);function s(e,n=90){if("string"!=typeof e)throw new Error("bech32.decode input should be string, not "+typeof e);if(e.length<8||!1!==n&&e.length>n)throw new TypeError(`Wrong string length: ${e.length} (${e}). Expected (8..${n})`);const r=e.toLowerCase();if(e!==r&&e!==e.toUpperCase())throw new Error("String must be lowercase or uppercase");const o=(e=r).lastIndexOf("1");if(0===o||-1===o)throw new Error('Letter "1" must be present between prefix and data only');const i=e.slice(0,o),s=e.slice(o+1);if(s.length<6)throw new Error("Data must be at least 6 characters long");const a=y.decode(s).slice(0,-6),c=C(i,a,t);if(!s.endsWith(c))throw new Error(`Invalid checksum in ${e}: expected "${c}"`);return{prefix:i,words:a}}return{encode:function(e,n,r=90){if("string"!=typeof e)throw new Error("bech32.encode prefix should be string, not "+typeof e);if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("bech32.encode words should be array of numbers, not "+typeof n);const o=e.length+7+n.length;if(!1!==r&&o>r)throw new TypeError(`Length ${o} exceeds limit ${r}`);return`${e=e.toLowerCase()}1${y.encode(n)}${C(e,n,t)}`},decode:s,decodeToBytes:function(e){const{prefix:t,words:n}=s(e,!1);return{prefix:t,words:n,bytes:r(n)}},decodeUnsafe:A(s),fromWords:r,fromWordsUnsafe:i,toWords:o}}t.bech32=b("bech32"),t.bech32m=b("bech32m"),t.utf8={encode:e=>(new TextDecoder).decode(e),decode:e=>(new TextEncoder).encode(e)},t.hex=r(h(4),o("0123456789abcdef"),i(""),a((e=>{if("string"!=typeof e||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})));const v={utf8:t.utf8,hex:t.hex,base16:t.base16,base32:t.base32,base64:t.base64,base64url:t.base64url,base58:t.base58,base58xmr:t.base58xmr},k=`Invalid encoding type. Available types: ${Object.keys(v).join(", ")}`;t.bytesToString=(e,t)=>{if("string"!=typeof e||!v.hasOwnProperty(e))throw new TypeError(k);if(!(t instanceof Uint8Array))throw new TypeError("bytesToString() expects Uint8Array");return v[e].encode(t)},t.str=t.bytesToString;t.stringToBytes=(e,t)=>{if(!v.hasOwnProperty(e))throw new TypeError(k);if("string"!=typeof t)throw new TypeError("stringToBytes() expects string");return v[e].decode(t)},t.bytes=t.stringToBytes},715:(e,t)=>{"use strict";t.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let e=0;e<32;e++){const t=n.charAt(e);r[t]=e}function o(e){const t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function i(e){let t=1;for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=o(t)^r>>5}t=o(t);for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);t=o(t)^31&r}return t}function s(e,t,n,r){let o=0,i=0;const s=(1<<n)-1,a=[];for(let r=0;r<e.length;++r)for(o=o<<t|e[r],i+=t;i>=n;)i-=n,a.push(o>>i&s);if(r)i>0&&a.push(o<<n-i&s);else{if(i>=t)return"Excess padding";if(o<<n-i&s)return"Non-zero padding"}return a}function a(e){return s(e,8,5,!0)}function c(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t}function l(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}function d(e){let t;function s(e,n){if(n=n||90,e.length<8)return e+" too short";if(e.length>n)return"Exceeds length limit";const s=e.toLowerCase(),a=e.toUpperCase();if(e!==s&&e!==a)return"Mixed-case string "+e;const c=(e=s).lastIndexOf("1");if(-1===c)return"No separator character for "+e;if(0===c)return"Missing prefix for "+e;const l=e.slice(0,c),d=e.slice(c+1);if(d.length<6)return"Data too short";let f=i(l);if("string"==typeof f)return f;const u=[];for(let e=0;e<d.length;++e){const t=d.charAt(e),n=r[t];if(void 0===n)return"Unknown character "+t;f=o(f)^n,e+6>=d.length||u.push(n)}return f!==t?"Invalid checksum for "+e:{prefix:l,words:u}}return t="bech32"===e?1:734539939,{decodeUnsafe:function(e,t){const n=s(e,t);if("object"==typeof n)return n},decode:function(e,t){const n=s(e,t);if("object"==typeof n)return n;throw new Error(n)},encode:function(e,r,s){if(s=s||90,e.length+7+r.length>s)throw new TypeError("Exceeds length limit");let a=i(e=e.toLowerCase());if("string"==typeof a)throw new Error(a);let c=e+"1";for(let e=0;e<r.length;++e){const t=r[e];if(t>>5!=0)throw new Error("Non 5-bit word");a=o(a)^t,c+=n.charAt(t)}for(let e=0;e<6;++e)a=o(a);a^=t;for(let e=0;e<6;++e){c+=n.charAt(a>>5*(5-e)&31)}return c},toWords:a,fromWordsUnsafe:c,fromWords:l}}t.gW=d("bech32"),d("bech32m")},218:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.ne-relative{position:relative}.ne-block{display:block}.ne-flex{display:flex}.ne-hidden{display:none}.ne-h-12{height:3rem}.ne-w-12{width:3rem}.ne-w-5{width:1.25rem}.ne-w-full{width:100%}.ne-cursor-pointer{cursor:pointer}.ne-flex-row{flex-direction:row}.ne-flex-col{flex-direction:column}.ne-items-center{align-items:center}.ne-justify-between{justify-content:space-between}.ne-gap-1{gap:.25rem}.ne-gap-2{gap:.5rem}.ne-gap-4{gap:1rem}.ne-break-words{word-wrap:break-word}.ne-rounded-lg{border-radius:.5rem}.ne-bg-\\[\\#fcfcfc\\]{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity))}.ne-px-4{padding-left:1rem;padding-right:1rem}.ne-py-5{padding-bottom:1.25rem;padding-top:1.25rem}.ne-pb-3{padding-bottom:.75rem}.ne-font-sans{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.ne-text-lg{font-size:1.125rem;line-height:1.75rem}.ne-text-gray-900{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.ne-text-red-800{--tw-text-opacity:1;color:#991b1b;color:rgb(153 27 27/var(--tw-text-opacity))}.ne-no-underline{text-decoration-line:none}.ne-opacity-30{opacity:.3}.nostrEmbedCard{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity));border-radius:.5rem;display:flex;flex-direction:column;gap:2rem;padding:1.25rem 1rem .75rem}@media (min-width:768px){.nostrEmbedCard{max-width:600px}}.nostrEmbedCard{border:1px solid #ddd;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;text-align:left}.cardContent{word-wrap:break-word;font-size:1.125rem;line-height:1.75rem;white-space:pre-line}.cardContentMedia{text-align:center}.cardContentMedia>iframe,.cardContentMedia>img,.cardContentMedia>video{border-radius:15px;width:50%}.cardProfile{align-items:center;display:flex;flex-direction:row;gap:1rem}.profileImg{border-radius:9999px;height:3rem;width:3rem}.profileDetails{display:flex;flex-direction:column}.profileName{font-size:1.125rem;font-weight:700;line-height:1.75rem}.profileName a{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity));text-decoration-line:none}.profileName a:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.profilePkey{align-items:center;flex-direction:row}.cardMeta,.profilePkey{display:flex;gap:.25rem}.cardMeta{flex-direction:column}@media (min-width:768px){.cardMeta{gap:.5rem}}hr{border-color:#ddd;margin:.25rem;opacity:.3;width:100%}.cardInteractions{display:flex;flex-direction:row;justify-content:space-between}@media (min-width:768px){.cardInteractions{gap:2.5rem;justify-content:flex-start}}.interactionContainer{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyIcon,.heartIcon,.linkIcon,.replyIcon,.repostIcon{display:block;height:1.25rem;width:1.25rem}.copyIcon,.heartIcon,.linkCopyBtn,.linkIcon,.linkLink,.replyIcon,.repostIcon{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.linkCopyBtn,.linkLink{align-items:center;background-color:transparent;border:0;cursor:pointer;display:flex;flex-direction:row;gap:.5rem;position:relative;text-decoration-line:none}.linkCopyBtn:hover,.linkCopyBtn:hover .copyIcon,.linkLink:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.linkCopyBtn.green,.linkCopyBtn.green .copyIcon{--tw-text-opacity:1;color:#16a34a;color:rgb(22 163 74/var(--tw-text-opacity))}.displayText{display:none}@media (min-width:768px){.displayText{display:flex;font-size:.875rem;line-height:1.25rem;visibility:visible}}.copyText{display:none}.nostrichLink{display:flex;flex-grow:1;justify-content:flex-end}.cardTitle{margin:0}.cardDescription{margin-top:0}.cardList{display:flex;flex-direction:column;gap:20px;margin-top:10px}.profileWithoutImg{background-color:#e9e9e9;border-radius:50%;height:50px;width:50px}.diffProfiles{font-size:1.2rem;font-weight:700}@media (min-width:768px){.md\\:ne-visible{visibility:visible}.md\\:ne-flex{display:flex}.md\\:ne-max-w-\\[600px\\]{max-width:600px}.md\\:ne-justify-start{justify-content:flex-start}}","",{version:3,sources:["webpack://./src/components/style.css","<no source>"],names:[],mappings:"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",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.nostrEmbedCard {\n  @apply ne-px-4 ne-py-5 ne-pb-3 ne-bg-[#fcfcfc] ne-rounded-lg md:ne-max-w-[600px] ne-flex ne-flex-col ne-gap-8;\n  @apply ne-font-sans ne-text-left;\n  border: 1px solid #ddd;\n}\n\n.cardContent {\n  @apply ne-text-lg ne-break-words ne-whitespace-pre-line;\n}\n\n.cardContentMedia {\n  text-align: center;\n}\n\n.cardContentMedia > video,\n.cardContentMedia > img,\n.cardContentMedia > iframe {\n  border-radius: 15px;\n  width: 50%;\n}\n\n.cardProfile {\n  @apply ne-flex ne-flex-row ne-gap-4 ne-items-center;\n}\n\n.profileImg {\n  @apply ne-w-12 ne-h-12 ne-rounded-full;\n}\n\n.profileDetails {\n  @apply ne-flex ne-flex-col;\n}\n\n.profileName {\n  @apply ne-text-lg ne-font-bold;\n}\n\n.profileName a {\n  @apply ne-no-underline ne-text-gray-900;\n}\n.profileName a:hover {\n  @apply ne-text-gray-600;\n}\n\n.profilePkey {\n  @apply ne-flex ne-flex-row ne-gap-1 ne-items-center;\n}\n\n.cardMeta {\n  @apply ne-flex ne-flex-col ne-gap-1 md:ne-gap-2;\n}\n\nhr {\n  @apply ne-w-full ne-opacity-30 ne-m-1;\n  border-color: #ddd;\n}\n\n.cardInteractions {\n  @apply ne-flex ne-flex-row ne-justify-between md:ne-justify-start md:ne-gap-10;\n}\n\n.interactionContainer {\n  @apply ne-flex ne-flex-row ne-items-center ne-gap-2;\n}\n\n.replyIcon,\n.repostIcon,\n.heartIcon,\n.linkIcon,\n.copyIcon {\n  @apply ne-text-gray-900 ne-block ne-w-5 ne-h-5;\n}\n\n.linkCopyBtn,\n.linkLink {\n  @apply ne-text-gray-900 ne-no-underline ne-flex ne-flex-row ne-items-center ne-gap-2 ne-cursor-pointer ne-relative;\n  border: 0;\n  background-color: transparent;\n}\n\n.linkCopyBtn:hover,\n.linkLink:hover,\n.linkCopyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.linkCopyBtn.green,\n.linkCopyBtn.green .copyIcon {\n  @apply ne-text-green-600;\n}\n\n.displayText {\n  @apply ne-hidden md:ne-flex md:ne-visible md:ne-text-sm;\n}\n\n.copyText {\n  @apply ne-hidden;\n}\n\n.nostrichLink {\n  @apply ne-flex;\n  flex-grow: 1;\n  justify-content: flex-end;\n}\n\n.cardTitle {\n  margin: 0;\n}\n\n.cardDescription {\n  margin-top: 0;\n}\n\n.cardList {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 10px;\n}\n\n.profileWithoutImg {\n  width: 50px;\n  height: 50px;\n  background-color: #e9e9e9;\n  border-radius: 50%;\n}\n\n.diffProfiles {\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n",null],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},632:(e,t,n)=>{const{bech32:r,hex:o,utf8:i}=n(187),s={bech32:"bc",pubKeyHash:0,scriptHash:5,validWitnessVersions:[0]},a={bech32:"tb",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},c={bech32:"bcrt",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},l={bech32:"sb",pubKeyHash:63,scriptHash:123,validWitnessVersions:[0]},d=["option_data_loss_protect","initial_routing_sync","option_upfront_shutdown_script","gossip_queries","var_onion_optin","gossip_queries_ex","option_static_remotekey","payment_secret","basic_mpp","option_support_large_channel"],f={m:BigInt(1e3),u:BigInt(1e6),n:BigInt(1e9),p:BigInt(1e12)},u=BigInt("2100000000000000000"),h=BigInt(1e11),A={payment_hash:1,payment_secret:16,description:13,payee:19,description_hash:23,expiry:6,min_final_cltv_expiry:24,fallback_address:9,route_hint:3,feature_bits:5,metadata:27},p={};for(let e=0,t=Object.keys(A);e<t.length;e++){const n=t[e],r=A[t[e]].toString();p[r]=n}const g={1:e=>o.encode(r.fromWordsUnsafe(e)),16:e=>o.encode(r.fromWordsUnsafe(e)),13:e=>i.encode(r.fromWordsUnsafe(e)),19:e=>o.encode(r.fromWordsUnsafe(e)),23:e=>o.encode(r.fromWordsUnsafe(e)),27:e=>o.encode(r.fromWordsUnsafe(e)),6:y,24:y,3:function(e){const t=[];let n,i,s,a,c,l=r.fromWordsUnsafe(e);for(;l.length>0;)n=o.encode(l.slice(0,33)),i=o.encode(l.slice(33,41)),s=parseInt(o.encode(l.slice(41,45)),16),a=parseInt(o.encode(l.slice(45,49)),16),c=parseInt(o.encode(l.slice(49,51)),16),l=l.slice(51),t.push({pubkey:n,short_channel_id:i,fee_base_msat:s,fee_proportional_millionths:a,cltv_expiry_delta:c});return t},5:function(e){const t=e.slice().reverse().map((e=>[!!(1&e),!!(2&e),!!(4&e),!!(8&e),!!(16&e)])).reduce(((e,t)=>e.concat(t)),[]);for(;t.length<2*d.length;)t.push(!1);const n={};d.forEach(((e,r)=>{let o;o=t[2*r]?"required":t[2*r+1]?"supported":"unsupported",n[e]=o}));const r=t.slice(2*d.length);return n.extra_bits={start_bit:2*d.length,bits:r,has_required:r.reduce(((e,t,n)=>n%2!=0?e||!1:e||t),!1)},n}};function w(e){return t=>({tagCode:parseInt(e),words:r.encode("unknown",t,Number.MAX_SAFE_INTEGER)})}function y(e){return e.reverse().reduce(((e,t,n)=>e+t*Math.pow(32,n)),0)}function m(e,t){let n,r;if(e.slice(-1).match(/^[munp]$/))n=e.slice(-1),r=e.slice(0,-1);else{if(e.slice(-1).match(/^[^munp0-9]$/))throw new Error("Not a valid multiplier for the amount");r=e}if(!r.match(/^\d+$/))throw new Error("Not a valid human readable amount");const o=BigInt(r),i=n?o*h/f[n]:o*h;if("p"===n&&o%BigInt(10)!==BigInt(0)||i>u)throw new Error("Amount is outside of valid range");return t?i.toString():i}e.exports={decode:function(e,t){if("string"!=typeof e)throw new Error("Lightning Payment Request must be string");if("ln"!==e.slice(0,2).toLowerCase())throw new Error("Not a proper lightning payment request");const n=[],i=r.decode(e,Number.MAX_SAFE_INTEGER);e=e.toLowerCase();const d=i.prefix;let f=i.words,u=e.slice(d.length+1),h=f.slice(-104);f=f.slice(0,-104);let _=d.match(/^ln(\S+?)(\d*)([a-zA-Z]?)$/);if(_&&!_[2]&&(_=d.match(/^ln(\S+)$/)),!_)throw new Error("Not a proper lightning payment request");n.push({name:"lightning_network",letters:"ln"});const C=_[1];let b;if(t){if(void 0===t.bech32||void 0===t.pubKeyHash||void 0===t.scriptHash||!Array.isArray(t.validWitnessVersions))throw new Error("Invalid network");b=t}else switch(C){case s.bech32:b=s;break;case a.bech32:b=a;break;case c.bech32:b=c;break;case l.bech32:b=l}if(!b||b.bech32!==C)throw new Error("Unknown coin bech32 prefix");n.push({name:"coin_network",letters:C,value:b});const v=_[2];let k;if(v){k=m(v+_[3],!0),n.push({name:"amount",letters:_[2]+_[3],value:k})}else k=null;n.push({name:"separator",letters:"1"});const x=y(f.slice(0,7));let B,E,S,I;for(f=f.slice(7),n.push({name:"timestamp",letters:u.slice(0,7),value:x}),u=u.slice(7);f.length>0;){const e=f[0].toString();B=p[e]||"unknown_tag",E=g[e]||w(e),f=f.slice(1),S=y(f.slice(0,2)),f=f.slice(2),I=f.slice(0,S),f=f.slice(S),n.push({name:B,tag:u[0],letters:u.slice(0,3+S),value:E(I)}),u=u.slice(3+S)}n.push({name:"signature",letters:u.slice(0,104),value:o.encode(r.fromWordsUnsafe(h))}),u=u.slice(104),n.push({name:"checksum",letters:u});let P={paymentRequest:e,sections:n,get expiry(){let e=n.find((e=>"expiry"===e.name));if(e)return N("timestamp")+e.value},get route_hints(){return n.filter((e=>"route_hint"===e.name)).map((e=>e.value))}};for(let e in A)"route_hint"!==e&&Object.defineProperty(P,e,{get:()=>N(e)});return P;function N(e){let t=n.find((t=>t.name===e));return t?t.value:void 0}},hrpToMillisat:m}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],d=i[l]||0,f="".concat(l," ").concat(d);i[l]=d+1;var u=n(f),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var A=o(h,r);r.byIndex=a,t.splice(a,0,{identifier:f,updater:A,references:1})}s.push(f)}return s}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var c=r(e,o),l=0;l<i.length;l++){var d=n(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},856:()=>{}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>n[e]));return s.default=()=>n,o.d(i,s),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>nn});var e,t,n,r,s,a,c,l={},d=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,u=Array.isArray;function h(e,t){for(var n in t)e[n]=t[n];return e}function A(e){var t=e.parentNode;t&&t.removeChild(e)}function p(t,n,r){var o,i,s,a={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(s in t.defaultProps)void 0===a[s]&&(a[s]=t.defaultProps[s]);return g(t,a,o,i,null)}function g(e,r,o,i,s){var a={type:e,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++n:s};return null==s&&null!=t.vnode&&t.vnode(a),a}function w(e){return e.children}function y(e,t){this.props=e,this.context=t}function m(e,t){if(null==t)return e.__?m(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?m(e):null}function _(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return _(e)}}function C(e){(!e.__d&&(e.__d=!0)&&r.push(e)&&!b.__r++||s!==t.debounceRendering)&&((s=t.debounceRendering)||a)(b)}function b(){var e,t,n,o,i,s,a,l;for(r.sort(c);e=r.shift();)e.__d&&(t=r.length,o=void 0,i=void 0,a=(s=(n=e).__v).__e,(l=n.__P)&&(o=[],(i=h({},s)).__v=s.__v+1,N(l,s,i,n.__n,void 0!==l.ownerSVGElement,null!=s.__h?[a]:null,o,null==a?m(s):a,s.__h),T(o,s),s.__e!=a&&_(s)),r.length>t&&r.sort(c));b.__r=0}function v(e,t,n,r,o,i,s,a,c,f){var h,A,p,y,_,C,b,v=r&&r.__k||d,E=v.length;for(n.__k=[],h=0;h<t.length;h++)if(null!=(y=n.__k[h]=null==(y=t[h])||"boolean"==typeof y||"function"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?g(null,y,null,null,y):u(y)?g(w,{children:y},null,null,null):y.__b>0?g(y.type,y.props,y.key,y.ref?y.ref:null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(p=v[h])||p&&y.key==p.key&&y.type===p.type)v[h]=void 0;else for(A=0;A<E;A++){if((p=v[A])&&y.key==p.key&&y.type===p.type){v[A]=void 0;break}p=null}N(e,y,p=p||l,o,i,s,a,c,f),_=y.__e,(A=y.ref)&&p.ref!=A&&(b||(b=[]),p.ref&&b.push(p.ref,null,y),b.push(A,y.__c||_,y)),null!=_?(null==C&&(C=_),"function"==typeof y.type&&y.__k===p.__k?y.__d=c=k(y,c,e):c=x(e,y,p,v,_,c),"function"==typeof n.type&&(n.__d=c)):c&&p.__e==c&&c.parentNode!=e&&(c=m(p))}for(n.__e=C,h=E;h--;)null!=v[h]&&("function"==typeof n.type&&null!=v[h].__e&&v[h].__e==n.__d&&(n.__d=B(r).nextSibling),D(v[h],v[h]));if(b)for(h=0;h<b.length;h++)H(b[h],b[++h],b[++h])}function k(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?k(r,t,n):x(n,r,r,o,r.__e,t));return t}function x(e,t,n,r,o,i){var s,a,c;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(null==n||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),s=null;else{for(a=i,c=0;(a=a.nextSibling)&&c<r.length;c+=1)if(a==o)break e;e.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function B(e){var t,n,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=B(n)))return r;return null}function E(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function S(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||E(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||E(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?P:I,i):e.removeEventListener(t,i?P:I,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&"rowSpan"!==t&&"colSpan"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&"-"!==t[4]?e.removeAttribute(t):e.setAttribute(t,n))}}function I(e){return this.l[e.type+!1](t.event?t.event(e):e)}function P(e){return this.l[e.type+!0](t.event?t.event(e):e)}function N(e,n,r,o,i,s,a,c,l){var d,f,A,p,g,m,_,C,b,k,x,B,E,S,I,P=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(l=r.__h,c=n.__e=r.__e,n.__h=null,s=[c]),(d=t.__b)&&d(n);try{e:if("function"==typeof P){if(C=n.props,b=(d=P.contextType)&&o[d.__c],k=d?b?b.props.value:d.__:o,r.__c?_=(f=n.__c=r.__c).__=f.__E:("prototype"in P&&P.prototype.render?n.__c=f=new P(C,k):(n.__c=f=new y(C,k),f.constructor=P,f.render=M),b&&b.sub(f),f.props=C,f.state||(f.state={}),f.context=k,f.__n=o,A=f.__d=!0,f.__h=[],f._sb=[]),null==f.__s&&(f.__s=f.state),null!=P.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=h({},f.__s)),h(f.__s,P.getDerivedStateFromProps(C,f.__s))),p=f.props,g=f.state,f.__v=n,A)null==P.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==P.getDerivedStateFromProps&&C!==p&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(C,k),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(C,f.__s,k)||n.__v===r.__v){for(n.__v!==r.__v&&(f.props=C,f.state=f.__s,f.__d=!1),f.__e=!1,n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),x=0;x<f._sb.length;x++)f.__h.push(f._sb[x]);f._sb=[],f.__h.length&&a.push(f);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(C,f.__s,k),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(p,g,m)}))}if(f.context=k,f.props=C,f.__P=e,B=t.__r,E=0,"prototype"in P&&P.prototype.render){for(f.state=f.__s,f.__d=!1,B&&B(n),d=f.render(f.props,f.state,f.context),S=0;S<f._sb.length;S++)f.__h.push(f._sb[S]);f._sb=[]}else do{f.__d=!1,B&&B(n),d=f.render(f.props,f.state,f.context),f.state=f.__s}while(f.__d&&++E<25);f.state=f.__s,null!=f.getChildContext&&(o=h(h({},o),f.getChildContext())),A||null==f.getSnapshotBeforeUpdate||(m=f.getSnapshotBeforeUpdate(p,g)),v(e,u(I=null!=d&&d.type===w&&null==d.key?d.props.children:d)?I:[I],n,r,o,i,s,a,c,l),f.base=n.__e,n.__h=null,f.__h.length&&a.push(f),_&&(f.__E=f.__=null),f.__e=!1}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=U(r.__e,n,r,o,i,s,a,l);(d=t.diffed)&&d(n)}catch(e){n.__v=null,(l||null!=s)&&(n.__e=c,n.__h=!!l,s[s.indexOf(c)]=null),t.__e(e,n,r)}}function T(e,n){t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function U(t,n,r,o,i,s,a,c){var d,f,h,p=r.props,g=n.props,w=n.type,y=0;if("svg"===w&&(i=!0),null!=s)for(;y<s.length;y++)if((d=s[y])&&"setAttribute"in d==!!w&&(w?d.localName===w:3===d.nodeType)){t=d,s[y]=null;break}if(null==t){if(null===w)return document.createTextNode(g);t=i?document.createElementNS("http://www.w3.org/2000/svg",w):document.createElement(w,g.is&&g),s=null,c=!1}if(null===w)p===g||c&&t.data===g||(t.data=g);else{if(s=s&&e.call(t.childNodes),f=(p=r.props||l).dangerouslySetInnerHTML,h=g.dangerouslySetInnerHTML,!c){if(null!=s)for(p={},y=0;y<t.attributes.length;y++)p[t.attributes[y].name]=t.attributes[y].value;(h||f)&&(h&&(f&&h.__html==f.__html||h.__html===t.innerHTML)||(t.innerHTML=h&&h.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||S(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||S(e,i,t[i],n[i],r)}(t,g,p,i,c),h)n.__k=[];else if(v(t,u(y=n.props.children)?y:[y],n,r,o,i&&"foreignObject"!==w,s,a,s?s[0]:r.__k&&m(r,0),c),null!=s)for(y=s.length;y--;)null!=s[y]&&A(s[y]);c||("value"in g&&void 0!==(y=g.value)&&(y!==t.value||"progress"===w&&!y||"option"===w&&y!==p.value)&&S(t,"value",y,p.value,!1),"checked"in g&&void 0!==(y=g.checked)&&y!==t.checked&&S(t,"checked",y,p.checked,!1))}return t}function H(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function D(e,n,r){var o,i;if(t.unmount&&t.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||H(o,null,n)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){t.__e(e,n)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&D(o[i],n,r||"function"!=typeof e.type);r||null==e.__e||A(e.__e),e.__=e.__e=e.__d=void 0}function M(e,t,n){return this.constructor(e,n)}function L(n,r,o){var i,s,a;t.__&&t.__(n,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,a=[],N(r,n=(!i&&o||r).__k=p(w,null,[n]),s||l,l,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?e.call(r.childNodes):null,a,!i&&o?o:s?s.__e:r.firstChild,i),T(a,n)}e=d.slice,t={__e:function(e,t,n,r){for(var o,i,s;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),s=o.__d),s)return o.__E=o}catch(t){e=t}throw e}},n=0,y.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h({},this.state),"function"==typeof e&&(e=e(h({},n),this.props)),e&&h(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),C(this))},y.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),C(this))},y.prototype.render=w,r=[],a="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,c=function(e,t){return e.__v.__b-t.__v.__b},b.__r=0;var $=o(856),W=o.t($,2);const j=BigInt(0),z=BigInt(1),R=BigInt(2),O=BigInt(3),q=BigInt(8),V=Object.freeze({a:j,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:z,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),F=(e,t)=>(e+t/R)/t,G={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=V,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-z*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,s=BigInt("0x100000000000000000000000000000000"),a=F(i*e,t),c=F(-r*e,t);let l=Ce(e-a*n-c*o,t),d=Ce(-a*r-c*i,t);const f=l>s,u=d>s;if(f&&(l=t-l),u&&(d=t-d),l>s||d>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:f,k1:l,k2neg:u,k2:d}}},Z=32,Y=32,K=Z+1,J=2*Z+1;function Q(e){const{a:t,b:n}=V,r=Ce(e*e),o=Ce(r*e);return Ce(o+t*e+n)}const X=V.a===j;class ee extends Error{constructor(e){super(e)}}function te(e){if(!(e instanceof ne))throw new TypeError("JacobianPoint expected")}class ne{constructor(e,t,n){this.x=e,this.y=t,this.z=n}static fromAffine(e){if(!(e instanceof ie))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(ie.ZERO)?ne.ZERO:new ne(e.x,e.y,z)}static toAffineBatch(e){const t=function(e,t=V.P){const n=new Array(e.length),r=e.reduce(((e,r,o)=>r===j?e:(n[o]=e,Ce(e*r,t))),z),o=ve(r,t);return e.reduceRight(((e,r,o)=>r===j?e:(n[o]=Ce(e*n[o],t),Ce(e*r,t))),o),n}(e.map((e=>e.z)));return e.map(((e,n)=>e.toAffine(t[n])))}static normalizeZ(e){return ne.toAffineBatch(e).map(ne.fromAffine)}equals(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e,a=Ce(r*r),c=Ce(s*s),l=Ce(t*c),d=Ce(o*a),f=Ce(Ce(n*s)*c),u=Ce(Ce(i*r)*a);return l===d&&f===u}negate(){return new ne(this.x,Ce(-this.y),this.z)}double(){const{x:e,y:t,z:n}=this,r=Ce(e*e),o=Ce(t*t),i=Ce(o*o),s=e+o,a=Ce(R*(Ce(s*s)-r-i)),c=Ce(O*r),l=Ce(c*c),d=Ce(l-R*a),f=Ce(c*(a-d)-q*i),u=Ce(R*t*n);return new ne(d,f,u)}add(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e;if(o===j||i===j)return this;if(t===j||n===j)return e;const a=Ce(r*r),c=Ce(s*s),l=Ce(t*c),d=Ce(o*a),f=Ce(Ce(n*s)*c),u=Ce(Ce(i*r)*a),h=Ce(d-l),A=Ce(u-f);if(h===j)return A===j?this.double():ne.ZERO;const p=Ce(h*h),g=Ce(h*p),w=Ce(l*p),y=Ce(A*A-g-R*w),m=Ce(A*(w-y)-f*g),_=Ce(r*s*h);return new ne(y,m,_)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const t=ne.ZERO;if("bigint"==typeof e&&e===j)return t;let n=_e(e);if(n===z)return this;if(!X){let e=t,r=this;for(;n>j;)n&z&&(e=e.add(r)),r=r.double(),n>>=z;return e}let{k1neg:r,k1:o,k2neg:i,k2:s}=G.splitScalar(n),a=t,c=t,l=this;for(;o>j||s>j;)o&z&&(a=a.add(l)),s&z&&(c=c.add(l)),l=l.double(),o>>=z,s>>=z;return r&&(a=a.negate()),i&&(c=c.negate()),c=new ne(Ce(c.x*G.beta),c.y,c.z),a.add(c)}precomputeWindow(e){const t=X?128/e+1:256/e+1,n=[];let r=this,o=r;for(let i=0;i<t;i++){o=r,n.push(o);for(let t=1;t<2**(e-1);t++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(e,t){!t&&this.equals(ne.BASE)&&(t=ie.BASE);const n=t&&t._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=t&&oe.get(t);r||(r=this.precomputeWindow(n),t&&1!==n&&(r=ne.normalizeZ(r),oe.set(t,r)));let o=ne.ZERO,i=ne.BASE;const s=1+(X?128/n:256/n),a=2**(n-1),c=BigInt(2**n-1),l=2**n,d=BigInt(n);for(let t=0;t<s;t++){const n=t*a;let s=Number(e&c);e>>=d,s>a&&(s-=l,e+=z);const f=n,u=n+Math.abs(s)-1,h=t%2!=0,A=s<0;0===s?i=i.add(re(h,r[f])):o=o.add(re(A,r[u]))}return{p:o,f:i}}multiply(e,t){let n,r,o=_e(e);if(X){const{k1neg:e,k1:i,k2neg:s,k2:a}=G.splitScalar(o);let{p:c,f:l}=this.wNAF(i,t),{p:d,f}=this.wNAF(a,t);c=re(e,c),d=re(s,d),d=new ne(Ce(d.x*G.beta),d.y,d.z),n=c.add(d),r=l.add(f)}else{const{p:e,f:i}=this.wNAF(o,t);n=e,r=i}return ne.normalizeZ([n,r])[0]}toAffine(e){const{x:t,y:n,z:r}=this,o=this.equals(ne.ZERO);null==e&&(e=o?q:ve(r));const i=e,s=Ce(i*i),a=Ce(s*i),c=Ce(t*s),l=Ce(n*a),d=Ce(r*i);if(o)return ie.ZERO;if(d!==z)throw new Error("invZ was invalid");return new ie(c,l)}}function re(e,t){const n=t.negate();return e?n:t}ne.BASE=new ne(V.Gx,V.Gy,z),ne.ZERO=new ne(j,z,j);const oe=new WeakMap;class ie{constructor(e,t){this.x=e,this.y=t}_setWindowSize(e){this._WINDOW_SIZE=e,oe.delete(this)}hasEvenY(){return this.y%R===j}static fromCompressedHex(e){const t=32===e.length,n=ye(t?e:e.subarray(1));if(!Se(n))throw new Error("Point is not on curve");let r=function(e){const{P:t}=V,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),a=BigInt(88),c=e*e*e%t,l=c*c*e%t,d=be(l,O)*l%t,f=be(d,O)*l%t,u=be(f,R)*c%t,h=be(u,r)*u%t,A=be(h,o)*h%t,p=be(A,s)*A%t,g=be(p,a)*p%t,w=be(g,s)*A%t,y=be(w,O)*l%t,m=be(y,i)*h%t,_=be(m,n)*c%t,C=be(_,R),b=C*C%t;if(b!==e)throw new Error("Cannot find square root");return C}(Q(n));const o=(r&z)===z;if(t)o&&(r=Ce(-r));else{1==(1&e[0])!==o&&(r=Ce(-r))}const i=new ie(n,r);return i.assertValidity(),i}static fromUncompressedHex(e){const t=ye(e.subarray(1,Z+1)),n=ye(e.subarray(Z+1,2*Z+1)),r=new ie(t,n);return r.assertValidity(),r}static fromHex(e){const t=me(e),n=t.length,r=t[0];if(n===Z)return this.fromCompressedHex(t);if(n===K&&(2===r||3===r))return this.fromCompressedHex(t);if(n===J&&4===r)return this.fromUncompressedHex(t);throw new Error(`Point.fromHex: received invalid point. Expected 32-${K} compressed bytes or ${J} uncompressed bytes, not ${n}`)}static fromPrivateKey(e){return ie.BASE.multiply(Ie(e))}static fromSignature(e,t,n){const{r,s:o}=Ne(t);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=ke(me(e)),{n:s}=V,a=2===n||3===n?r+s:r,c=ve(a,s),l=Ce(-i*c,s),d=Ce(o*c,s),f=1&n?"03":"02",u=ie.fromHex(f+he(a)),h=ie.BASE.multiplyAndAddUnsafe(u,l,d);if(!h)throw new Error("Cannot recover signature: point at infinify");return h.assertValidity(),h}toRawBytes(e=!1){return we(this.toHex(e))}toHex(e=!1){const t=he(this.x);if(e){return`${this.hasEvenY()?"02":"03"}${t}`}return`04${t}${he(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:t,y:n}=this;if(!Se(t)||!Se(n))throw new Error(e);const r=Ce(n*n);if(Ce(r-Q(t))!==j)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new ie(this.x,Ce(-this.y))}double(){return ne.fromAffine(this).double().toAffine()}add(e){return ne.fromAffine(this).add(ne.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return ne.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,t,n){const r=ne.fromAffine(this),o=t===j||t===z||this!==ie.BASE?r.multiplyUnsafe(t):r.multiply(t),i=ne.fromAffine(e).multiplyUnsafe(n),s=o.add(i);return s.equals(ne.ZERO)?void 0:s.toAffine()}}function se(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function ae(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${fe(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:ye(n),left:e.subarray(t+2)}}ie.BASE=new ie(V.Gx,V.Gy),ie.ZERO=new ie(j,j);class ce{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromCompact(e){const t=e instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof e&&!t)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=t?fe(e):e;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new ce(ge(r.slice(0,64)),ge(r.slice(64,128)))}static fromDER(e){const t=e instanceof Uint8Array;if("string"!=typeof e&&!t)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${fe(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=ae(e.subarray(2)),{data:r,left:o}=ae(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${fe(o)}`);return{r:t,s:r}}(t?e:we(e));return new ce(n,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:t}=this;if(!Ee(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Ee(t))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=V.n>>z;return this.s>e}normalizeS(){return this.hasHighS()?new ce(this.r,Ce(-this.s,V.n)):this}toDERRawBytes(){return we(this.toDERHex())}toDERHex(){const e=se(pe(this.s)),t=se(pe(this.r)),n=e.length/2,r=t.length/2,o=pe(n),i=pe(r);return`30${pe(r+n+4)}02${i}${t}02${o}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return we(this.toCompactHex())}toCompactHex(){return he(this.r)+he(this.s)}}function le(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const o=e[t];n.set(o,r),r+=o.length}return n}const de=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function fe(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=de[e[n]];return t}const ue=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function he(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(j<=e&&e<ue))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function Ae(e){const t=we(he(e));if(32!==t.length)throw new Error("Error: expected 32 bytes");return t}function pe(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function ge(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function we(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=2*n,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[n]=i}return t}function ye(e){return ge(fe(e))}function me(e){return e instanceof Uint8Array?Uint8Array.from(e):we(e)}function _e(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&Ee(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function Ce(e,t=V.P){const n=e%t;return n>=j?n:t+n}function be(e,t){const{P:n}=V;let r=e;for(;t-- >j;)r*=r,r%=n;return r}function ve(e,t=V.P){if(e===j||t<=j)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=Ce(e,t),r=t,o=j,i=z,s=z,a=j;for(;n!==j;){const e=r/n,t=r%n,c=o-s*e,l=i-a*e;r=n,n=t,o=s,i=a,s=c,a=l}if(r!==z)throw new Error("invert: does not exist");return Ce(o,t)}function ke(e,t=!1){const n=function(e){const t=8*e.length-8*Y,n=ye(e);return t>0?n>>BigInt(t):n}(e);if(t)return n;const{n:r}=V;return n>=r?n-r:n}let xe,Be;function Ee(e){return j<e&&e<V.n}function Se(e){return j<e&&e<V.P}function Ie(e){let t;if("bigint"==typeof e)t=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if("string"==typeof e){if(e.length!==2*Y)throw new Error("Expected 32 bytes of private key");t=ge(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==Y)throw new Error("Expected 32 bytes of private key");t=ye(e)}if(!Ee(t))throw new Error("Expected private key: 0 < key < n");return t}function Pe(e){return e instanceof ie?(e.assertValidity(),e):ie.fromHex(e)}function Ne(e){if(e instanceof ce)return e.assertValidity(),e;try{return ce.fromDER(e)}catch(t){return ce.fromCompact(e)}}function Te(e){return Ce(ye(e),V.n)}class Ue{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromHex(e){const t=me(e);if(64!==t.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${t.length}`);const n=ye(t.subarray(0,32)),r=ye(t.subarray(32,64));return new Ue(n,r)}assertValidity(){const{r:e,s:t}=this;if(!Se(e)||!Ee(t))throw new Error("Invalid signature")}toHex(){return he(this.r)+he(this.s)}toRawBytes(){return we(this.toHex())}}class He{constructor(e,t,n=Oe.randomBytes()){if(null==e)throw new TypeError(`sign: Expected valid message, not "${e}"`);this.m=me(e);const{x:r,scalar:o}=this.getScalar(Ie(t));if(this.px=r,this.d=o,this.rand=me(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(e){const t=ie.fromPrivateKey(e),n=t.hasEvenY()?e:V.n-e;return{point:t,scalar:n,x:t.toRawX()}}initNonce(e,t){return Ae(e^ye(t))}finalizeNonce(e){const t=Ce(ye(e),V.n);if(t===j)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(t);return{R:n,rx:r,k:o}}finalizeSig(e,t,n,r){return new Ue(e.x,Ce(t+n*r,V.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:e,d:t,px:n,rand:r}=this,o=Oe.taggedHash,i=this.initNonce(t,await o(ze.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(await o(ze.nonce,i,n,e)),l=Te(await o(ze.challenge,a,n,e)),d=this.finalizeSig(s,c,l,t);return await Le(d,e,n)||this.error(),d}calcSync(){const{m:e,d:t,px:n,rand:r}=this,o=Oe.taggedHashSync,i=this.initNonce(t,o(ze.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(o(ze.nonce,i,n,e)),l=Te(o(ze.challenge,a,n,e)),d=this.finalizeSig(s,c,l,t);return $e(d,e,n)||this.error(),d}}function De(e,t,n){const r=e instanceof Ue,o=r?e:Ue.fromHex(e);return r&&o.assertValidity(),{...o,m:me(t),P:Pe(n)}}function Me(e,t,n,r){const o=ie.BASE.multiplyAndAddUnsafe(t,Ie(n),Ce(-r,V.n));return!(!o||!o.hasEvenY()||o.x!==e)}async function Le(e,t,n){try{const{r,s:o,m:i,P:s}=De(e,t,n),a=Te(await Oe.taggedHash(ze.challenge,Ae(r),s.toRawX(),i));return Me(r,s,o,a)}catch(e){return!1}}function $e(e,t,n){try{const{r,s:o,m:i,P:s}=De(e,t,n),a=Te(Oe.taggedHashSync(ze.challenge,Ae(r),s.toRawX(),i));return Me(r,s,o,a)}catch(e){if(e instanceof ee)throw e;return!1}}const We={Signature:Ue,getPublicKey:function(e){return ie.fromPrivateKey(e).toRawX()},sign:async function(e,t,n){return new He(e,t,n).calc()},verify:Le,signSync:function(e,t,n){return new He(e,t,n).calcSync()},verifySync:$e};ie.BASE._setWindowSize(8);const je={node:W,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},ze={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},Re={},Oe={bytesToHex:fe,hexToBytes:we,concatBytes:le,mod:Ce,invert:ve,isValidPrivateKey(e){try{return Ie(e),!0}catch(e){return!1}},_bigintTo32Bytes:Ae,_normalizePrivateKey:Ie,hashToPrivateKey:e=>{e=me(e);const t=Y+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return Ae(Ce(ye(e),V.n-z)+z)},randomBytes:(e=32)=>{if(je.web)return je.web.getRandomValues(new Uint8Array(e));if(je.node){const{randomBytes:t}=je.node;return Uint8Array.from(t(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>Oe.hashToPrivateKey(Oe.randomBytes(Y+8)),precompute(e=8,t=ie.BASE){const n=t===ie.BASE?t:new ie(t.x,t.y);return n._setWindowSize(e),n.multiply(O),n},sha256:async(...e)=>{if(je.web){const t=await je.web.subtle.digest("SHA-256",le(...e));return new Uint8Array(t)}if(je.node){const{createHash:t}=je.node,n=t("sha256");return e.forEach((e=>n.update(e))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(je.web){const n=await je.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=le(...t),o=await je.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(je.node){const{createHmac:n}=je.node,r=n("sha256",e);return t.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=Re[e];if(void 0===n){const t=await Oe.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Re[e]=n}return Oe.sha256(n,...t)},taggedHashSync:(e,...t)=>{if("function"!=typeof xe)throw new ee("sha256Sync is undefined, you need to set it");let n=Re[e];if(void 0===n){const t=xe(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),Re[e]=n}return xe(n,...t)},_JacobianPoint:ne};Object.defineProperties(Oe,{sha256Sync:{configurable:!1,get:()=>xe,set(e){xe||(xe=e)}},hmacSha256Sync:{configurable:!1,get:()=>Be,set(e){Be||(Be=e)}}});var qe=o(632),Ve=o(715);const Fe=new TextDecoder("utf-8"),Ge=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function Ze(e){let t=[];for(let n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t}function Ye(e){const t=Ze(e),n=Ve.gW.toWords(t);return Ve.gW.encode("note",n,120)}function Ke(e){const t=Ze(e),n=Ve.gW.toWords(t);return Ve.gW.encode("npub",n,120)}function Je(e){return Ve.gW.fromWords(e).map((e=>e.toString(16).padStart(2,"0"))).join("")}function Qe(e){const t=Ve.gW.decode(e,120);return"npub"!=t.prefix?"":Je(t.words)}function Xe(e){return`${e.slice(0,12)}...${e.slice(-4)}`}function et(e){return(e/=1e3)>=1e6?Math.round(e/1e5)/10+"M":e>=1e3?Math.round(e/100)/10+"K":e}function tt(e){if(!(e instanceof Uint8Array))throw new Error("Uint8Array expected");let t="";for(let n=0;n<e.length;n++)t+=Ge[e[n]];return t}var nt,rt,ot,it,st=0,at=[],ct=[],lt=t.__b,dt=t.__r,ft=t.diffed,ut=t.__c,ht=t.unmount;function At(e,n){t.__h&&t.__h(rt,e,st||n),st=0;var r=rt.__H||(rt.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:ct}),r.__[e]}function pt(e){return st=1,function(e,t,n){var r=At(nt++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):Ct(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=rt,!rt.u)){var o=function(e,t,n){if(!r.__c.__H)return!0;var o=r.__c.__H.__.filter((function(e){return e.__c}));if(o.every((function(e){return!e.__N})))return!i||i.call(this,e,t,n);var s=!1;return o.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(s=!0)}})),!(!s&&r.__c.props===e)&&(!i||i.call(this,e,t,n))};rt.u=!0;var i=rt.shouldComponentUpdate,s=rt.componentWillUpdate;rt.componentWillUpdate=function(e,t,n){if(this.__e){var r=i;i=void 0,o(e,t,n),i=r}s&&s.call(this,e,t,n)},rt.shouldComponentUpdate=o}return r.__N||r.__}(Ct,e)}function gt(){for(var e;e=at.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(mt),e.__H.__h.forEach(_t),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){rt=null,lt&&lt(e)},t.__r=function(e){dt&&dt(e),nt=0;var t=(rt=e.__c).__H;t&&(ot===rt?(t.__h=[],rt.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=ct,e.__N=e.i=void 0}))):(t.__h.forEach(mt),t.__h.forEach(_t),t.__h=[])),ot=rt},t.diffed=function(e){ft&&ft(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==at.push(n)&&it===t.requestAnimationFrame||((it=t.requestAnimationFrame)||yt)(gt)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==ct&&(e.__=e.__V),e.i=void 0,e.__V=ct}))),ot=rt=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(mt),e.__h=e.__h.filter((function(e){return!e.__||_t(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),ut&&ut(e,n)},t.unmount=function(e){ht&&ht(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{mt(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var wt="function"==typeof requestAnimationFrame;function yt(e){var t,n=function(){clearTimeout(r),wt&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);wt&&(t=requestAnimationFrame(n))}function mt(e){var t=rt,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),rt=t}function _t(e){var t=rt;e.__c=e.__(),rt=t}function Ct(e,t){return"function"==typeof t?t(e):t}var bt=0;function vt(e,n,r,o,i,s){var a,c,l={};for(c in n)"ref"==c?a=n[c]:l[c]=n[c];var d={type:e,props:l,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--bt,__source:i,__self:s};if("function"==typeof e&&(a=e.defaultProps))for(c in a)void 0===l[c]&&(l[c]=a[c]);return t.vnode&&t.vnode(d),d}const kt=function(e){let{additionalClasses:t}=e,n="copyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};var xt=o(379),Bt=o.n(xt),Et=o(795),St=o.n(Et),It=o(569),Pt=o.n(It),Nt=o(565),Tt=o.n(Nt),Ut=o(216),Ht=o.n(Ut),Dt=o(589),Mt=o.n(Dt),Lt=o(218),$t={};$t.styleTagTransform=Mt(),$t.setAttributes=Tt(),$t.insert=Pt().bind(null,"head"),$t.domAPI=St(),$t.insertStyleElement=Ht();Bt()(Lt.Z,$t);Lt.Z&&Lt.Z.locals&&Lt.Z.locals;const Wt=function(e){let{iconClasses:t,displayText:n,copyText:r}=e;const[o,i]=pt("linkCopyBtn");return vt("button",{class:o,onClick:()=>function(){try{navigator.clipboard.writeText(r),i(`${o} green`),setTimeout((()=>{i(o.replace("green","").trim())}),500)}catch(e){console.error("Failed to copy: ",e)}}(),children:[vt(kt,{additionalClasses:t}),n&&vt("span",{class:"displayText",children:n}),vt("span",{class:"copyText",children:r})]})};const jt=function(e){let{additionalClasses:t}=e,n="boltIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z"})})};const zt=function(e){let{additionalClasses:t}=e,n="heartIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const Rt=function(e){let{additionalClasses:t}=e,n="linkIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const Ot=function(e){let{additionalClasses:t}=e,n="replyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const qt=function(e){let{additionalClasses:t}=e,n="repostIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const Vt=function(e){let t,n,r,o,{note:i,profilesList:s,repliesCount:a,repostsCount:c,likesCount:l,zapAmount:d,options:f}=e,u=i?i.created_at:s?s.created_at:null;return u&&(t=new Date(1e3*u),r=t.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"})),i&&i.id&&(n=Ye(i.id)),s&&(n=s.id),o=et(d),vt("div",{class:"cardMeta",children:[vt("div",{class:"cardDate",children:r}),vt("hr",{}),vt("div",{class:"cardInteractions",children:[f&&f.showZaps?vt("div",{className:"interactionContainer",title:"Total sats zapped",children:[vt(jt,{additionalClasses:"w-5 h-5"}),vt("span",{className:"zapAmount",children:o})]}):null,vt("div",{class:"interactionContainer",title:"Number of replies",children:[vt(Ot,{additionalClasses:"w-5 h-5"}),vt("span",{class:"repliesCount",children:a})]}),vt("div",{class:"interactionContainer",title:"Number of reposts",children:[vt(qt,{additionalClasses:"w-5 h-5"}),vt("span",{class:"repostsCount",children:c})]}),vt("div",{class:"interactionContainer",title:"Number of likes",children:[vt(zt,{additionalClasses:"w-5 h-5"}),vt("span",{class:"likesCount",children:l})]}),vt("div",{class:"interactionContainer",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:i?`https://nostr.band/${n}`:`https://listr.lol/a/${s.naddr}`,class:"linkLink",children:[vt(Rt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),vt("span",{class:"displayText",children:"Open"})]})}),f&&f.showCopyAddr?vt("div",{className:"interactionContainer",children:vt(Wt,{iconClasses:"w-5 h-5",displayText:i?"Copy Note ID":"Copy ID",copyText:i||s.naddr})}):null]})]})};const Ft=function(e){let{additionalClasses:t}=e,n="keyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};const Gt=function(e){let{additionalClasses:t}=e,n="nostrichIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{width:"3rem",height:"3rem",viewBox:"0 0 674 769",xmlns:"http://www.w3.org/2000/svg",class:n,children:vt("path",{d:"M567.729 324.967C582.946 428.084 475.795 449.465 415.027 447.318C411.705 447.2 408.57 448.819 406.631 451.519C400.387 460.214 389.956 472.017 381.958 472.017C373.127 472.017 365.191 489.217 361.675 499.621C361.36 500.555 362.279 501.414 363.216 501.11C459.852 469.719 497.737 458.954 514.046 461.974C527.194 464.409 551.785 508.438 562.437 530.148C535.959 531.67 527.133 507.931 521.046 503.67C516.176 500.261 514.35 515.844 514.046 524.061C508.263 521.018 500.959 516.757 500.35 503.67C499.741 490.583 493.046 493.931 487.872 494.539C482.698 495.148 403.263 520.713 391.393 524.061C379.523 527.409 365.828 531.974 354.567 539.887C335.697 549.018 323.523 542.626 320.175 527.105C317.497 514.687 334.886 476.481 343.915 458.93C332.755 463.09 309.584 471.53 306.175 472.017C302.854 472.492 260.547 505.172 238.203 522.707C237.091 523.58 236.38 524.849 236.134 526.241C232.627 546.054 221.157 551.516 201.175 561.8C185.117 570.066 128.822 656.684 100.272 702.803C98.5858 705.526 96.1126 707.629 93.4202 709.363C74.9686 721.249 56.0179 753.013 48.3915 768.453C37.6784 737.532 51.6379 710.931 59.9568 701.497C56.3046 698.331 47.8843 700.178 44.1306 701.497C54.4785 665.888 90.6961 665.888 89.4787 665.888C96.1744 660.105 174.696 547.8 176.523 542.626C178.336 537.488 175.346 513.436 214.962 500.287C215.495 500.11 216.024 499.866 216.497 499.563C247.306 479.802 270.423 447.869 278.175 434.278C236.462 431.409 188.596 407.816 164.366 393.152C159.873 390.432 155.077 388.105 149.871 387.407C115.764 382.835 81.3285 404.791 67.5655 417.235C61.9655 409.443 68.2757 386.8 72.1308 376.452C58.4959 374.504 38.4495 394.307 30.1306 404.452C21.1218 390.33 29.0146 365.089 34.0871 354.234C16.0696 354.721 3.85509 362.959 0 367.017C14.9131 255.93 128.984 288.237 130.261 289.712C124.174 283.382 124.682 275.104 125.696 271.756C194.783 273.582 227.045 262.017 247.436 250.147C408.132 160.364 477.372 215.451 502.937 229.299C528.502 243.147 574.916 248.777 607.025 235.995C645.373 218.647 639.599 173.93 631.829 156.864C623.307 138.146 575.22 112.276 558.176 79.5591C541.133 46.8422 555.825 5.93789 575.728 1.51061C594.802 -2.73213 607.975 2.37383 618.285 11.6891C625.159 17.8994 644.46 22.3413 652.525 25.2326C660.59 28.1239 673.981 31.9283 673.221 34.2109C672.46 36.4935 659.548 36.1889 657.547 36.1889C653.438 36.1889 648.568 36.7976 653.438 39.0802C659.243 41.4348 668.053 44.8745 672.095 47.088C672.549 47.3366 672.454 47.9791 671.955 48.1156C643.858 55.798 618.768 40.1108 600.177 58.102C581.307 76.363 621.481 90.363 642.177 112.276C662.873 134.189 684.177 160.363 667.134 220.016C653.874 266.424 598.093 305.848 569.654 321.045C568.255 321.793 567.497 323.398 567.729 324.967Z",fill:"#7A3BFF"})})};const Zt=function(e){let{thumbnail:t,fullImage:n}=e;const[r,o]=pt(!1),[i,s]=pt(t);return i?vt("img",{className:"profileImg",src:i,onError:()=>{r?s(null):(s(n),o(!0))}}):vt("div",{class:"profileWithoutImg"})};const Yt=function(e){let t,n,r,{profilePkey:o,profile:i,options:s}=e;return o&&(n=Ke(o),r=`${Xe(n)}`,t=`https://media.nostr.band/thumbs/${o.slice(-4)}/${o}-picture-64`),vt("div",{class:"cardProfile",children:[t&&i.picture?vt(Zt,{thumbnail:t,fullImage:i.picture}):vt("div",{class:"profileWithoutImg"}),vt("div",{class:"profileDetails",children:[vt("div",{class:"profileName",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${n}`,children:i.display_name||i.name||"Loading..."})}),vt("div",{class:"profilePkey",children:[vt(Ft,{additionalClasses:"w-4 h-4"}),vt("span",{class:"pkey",children:r||"npub..."}),vt(Wt,{iconClasses:"w-4 h-4",copyText:n})]})]}),s&&!s.hideNostrich?vt("div",{className:"nostrichLink",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://heynostr.com",className:"linkLink",children:vt(Gt,{additionalClasses:"w-4 h-4"})})}):null]})};const Kt=function(e){let{additionalClasses:t}=e,n="followersIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return vt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:vt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"})})};const Jt=function(e){let t,n,{profile:r,followersCount:o,zapAmount:i,options:s}=e;return r&&r.pubkey&&(t=Ke(r.pubkey),n=et(i)),vt("div",{class:"cardMeta",children:[vt("hr",{}),vt("div",{class:"cardInteractions",children:[s&&s.showZaps?vt("div",{className:"interactionContainer",title:"Total sats zapped",children:[vt(jt,{additionalClasses:"w-5 h-5"}),vt("span",{className:"zapAmount",children:n})]}):null,vt("div",{class:"interactionContainer",title:"Number of followers",children:[vt(Kt,{additionalClasses:"w-5 h-5"}),vt("span",{class:"followersCount",children:o})]}),vt("div",{class:"interactionContainer",children:vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${t}`,class:"linkLink",children:[vt(Rt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),vt("span",{class:"displayText",children:"Open"})]})}),s&&s.showCopyAddr?vt("div",{className:"interactionContainer",children:vt(Wt,{iconClasses:"w-5 h-5",displayText:"Copy Npub",copyText:t})}):null]})]})},Qt=[".jpg",".jpeg",".png",".webp",".gif"],Xt=[".mov",".mp4"],en=["youtube"];const tn=class extends y{constructor(e){super(e);let t=e.id,n=1;e.id.startsWith("npub1")?(t=Qe(e.id),n=0):e.id.startsWith("note1")?t=function(e){const t=Ve.gW.decode(e,120);return"note"!=t.prefix?"":Je(t.words)}(e.id):e.id.startsWith("naddr")&&(t=function(e){if(!e)return;const t=Ve.gW.decode(e,120);let n=function(e){let t={},n=e;for(;n.length>0;){let e=n[0],r=n[1],o=n.slice(2,2+r);n=n.slice(2+r),o.length<r||(t[e]=t[e]||[],t[e].push(o))}return t}(new Uint8Array(Ve.gW.fromWords(t.words)));if(!n[0]?.[0])throw new Error("missing TLV 0 for naddr");if(!n[2]?.[0])throw new Error("missing TLV 2 for naddr");if(32!==n[2][0].length)throw new Error("TLV 2 should be 32 bytes");if(!n[3]?.[0])throw new Error("missing TLV 3 for naddr");if(4!==n[3][0].length)throw new Error("TLV 3 should be 4 bytes");return{type:"naddr",data:{identifier:Fe.decode(n[0][0]),pubkey:tt(n[2][0]),kind:parseInt(tt(n[3][0]),16),relays:n[1]?n[1].map((e=>Fe.decode(e))):[]}}}(e.id),n=t.data.identifier?2:3),this.state={id:t,kind:n,relay:e.relay,note:{},profile:{},profilesList:{},taggedProfiles:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0,zapAmount:0,followersCount:0,countTaggedProfiles:0}}sha256(e){const t=(new TextEncoder).encode(e);return Oe.sha256(t).then((e=>Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join("")))}async getNostrEventID(e){const t=[0,e.pubkey,e.created_at,e.kind,e.tags,e.content],n=JSON.stringify(t);return await this.sha256(n)}verifyNostrSignature(e){return We.verify(e.sig,e.id,e.pubkey)}async validateNostrEvent(e){if(e.id!==await this.getNostrEventID(e))return!1;if("string"!=typeof e.content)return!1;if("number"!=typeof e.created_at)return!1;if(!Array.isArray(e.tags))return!1;for(let t=0;t<e.tags.length;t++){let n=e.tags[t];if(!Array.isArray(n))return!1;for(let e=0;e<n.length;e++)if("object"==typeof n[e])return!1}return!0}async isValidEvent(e){return e.id&&e.pubkey&&e.sig&&await this.validateNostrEvent(e)&&this.verifyNostrSignature(e)}componentDidMount(){const e=e=>{switch(this.state.kind){case 0:return this.fetchProfile({socket:e,profilePkey:this.state.id});case 1:return this.fetchNote({socket:e,noteId:this.state.id});case 2:case 3:return this.fetchProfilesList({socket:e,data:this.state.id.data})}};window.__nostrEmbed||(window.__nostrEmbed={sockets:{}});let t=null;if(this.state.relay in window.__nostrEmbed.sockets&&(t=window.__nostrEmbed.sockets[this.state.relay],1==t.readyState?e(t):0==t.readyState?t.starts.push(e):t=null),t)return;t=new WebSocket(this.state.relay),window.__nostrEmbed.sockets[this.state.relay]=t,t.starts=[e],t.onopen=()=>{console.log(`Connected to Nostr relay: ${t.url}`);for(const e of t.starts)e(t);t.starts=null},t.onerror=e=>{console.log(`Failed to connect to Nostr relay: ${t.url}}`)};const n={};t.onmessage=e=>{try{const r=JSON.parse(e.data);if(!r||!r.length)throw"Bad reply from relay";if("NOTICE"==r[0]&&2==r.length)return void console.log("notice from",t.url,r[1]);if("EOSE"==r[0]&&r.length>1)return void(r[1]in n&&n[r[1]].on_event(null));if("COUNT"==r[0]&&3==r.length)return void(r[1]in n&&n[r[1]].on_count(r[2]));if("EVENT"!=r[0]||r.length<3)throw"Unknown reply from relay";r[1]in n&&n[r[1]].on_event(r[2])}catch(n){console.log("relay",t.url,"bad message",e,"error",n),err(n)}},t.subscribe=e=>{let{type:r,sub:o,ok:i,err:s}=e,a="embed-"+Math.random();const c=[r,a,o];t.send(JSON.stringify(c));const l=()=>{const e=a;a=null,t.send(JSON.stringify(["CLOSE",e])),delete n[e]},d=[],f=[],u=()=>{a&&(clearTimeout(h),l(),i(d))},h=setTimeout((function(){l(),d.length||f.length?A(null):s("timeout on relay",t.url)}),o.limit&&1==o.limit?2e3:6e3),A=async e=>{if(f.push(e),!(f.length>1))for(;f.length;)if((e=f[0])&&await this.isValidEvent(e)&&d.push(e),f.shift(),!e||o.limit&&o.limit==d.length){f.splice(0,f.length),u();break}};n[a]={ok:i,err:s,on_event:A,on_count:async e=>{"COUNT"==r&&(d.push(e),u())}}},t.listEvents=e=>{let{sub:n,ok:r,err:o}=e;t.subscribe({type:"REQ",sub:n,ok:r,err:o})},t.countEvents=e=>{let{sub:n,ok:r,err:o}=e;t.subscribe({type:"COUNT",sub:n,ok:e=>{r(e.length?e[0]:null)},err:o})}}getEvent(e){let{socket:t,sub:n,ok:r,err:o}=e;return new Promise(((e,r)=>{n.limit=1,t.listEvents({sub:n,ok:t=>{e(t?t[0]:null)},err:r})}))}listEvents(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{t.listEvents({sub:n,ok:e,err:r})}))}countEvents(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{t.countEvents({sub:n,ok:e,err:r})}))}fetchNote(e){let{socket:t,noteId:n}=e;const r={ids:[n],kinds:[1]};this.getEvent({socket:t,sub:r}).then((e=>{if(!e)throw console.log("Error: We can't find that note on this relay"),"Event not found";this.setState({note:e,profilePkey:e.pubkey}),this.fetchProfile({socket:t,profilePkey:e.pubkey}),this.fetchMeta({socket:t,noteId:n}),this.fetchTags({socket:t,tags:e.tags})})).catch((e=>{console.log(`Error fetching note: ${e}`),this.setState({note:{error:!0,content:"Sorry, we weren't able to find and parse this note on the specified relay."}})}))}fetchProfile(e){let{socket:t,profilePkey:n}=e;const r={kinds:[0],authors:[n]};this.getEvent({socket:t,sub:r}).then((e=>{if(!e)throw"Event not found";{let r=JSON.parse(e.content);r.pubkey=n,this.setState({profile:r}),0==this.state.kind&&this.fetchProfileMeta({socket:t,pubkey:n})}})).catch((e=>{console.log(`Error fetching profile: ${e}`),this.setState({profile:{pubkey:n,error:!0,about:"Sorry, we weren't able to find this profile on the specified relay."}})}))}fetchProfilesList(e){let{socket:t,data:n}=e;const r={kinds:[n.kind],"#d":[n.identifier],authors:[n.pubkey]};this.getEvent({socket:t,sub:r}).then((e=>{if(!e)throw"Event not found";{let r=this.getProfilesListObj(e.tags);r.created_at=e.created_at,r.id=`${n.kind}:${n.pubkey}:${n.identifier}`,r.naddr=this.props.id,this.setState({profilesList:r}),this.fetchProfile({socket:t,profilePkey:e.pubkey}),this.fetchTags({socket:t,tags:e.tags}),this.fetchMeta({socket:t,data:n})}})).catch((e=>{console.log(`Error fetching profileList: ${e}`),this.setState({profilesList:{error:!0,content:"Sorry, we weren't able to find this profile on the specified relay."}})}))}fetchTags(e){let{socket:t,tags:n}=e;const r={kinds:[0],authors:[]};let o=0;for(const e of n)r.authors.length<100&&e.length>=2&&"p"==e[0]&&r.authors.push(e[1]),e.length>=2&&"p"==e[0]&&o++;this.setState((e=>({countTaggedProfiles:e.countTaggedProfiles+o}))),r.authors.length&&this.listEvents({socket:t,sub:r}).then((e=>{const t={};for(const n of e)try{let e=JSON.parse(n.content);t[n.pubkey]=e}catch(e){console.log("Error bad event content",e,n.content)}this.setState({taggedProfiles:t})})).catch((e=>{console.log(`Error fetching tagged profiles: ${e}`)}))}getProfilesListObj(e){let t={};return e.forEach((e=>{e&&e[0]&&("name"===e[0]&&(t.name=e[1]),"d"===e[0]&&(t.d=e[1]),"description"===e[0]&&(t.description=e[1]))})),t}getZapAmount(e){try{for(const t of e.tags)if(t.length>=2&&"bolt11"==t[0]){const e=(0,qe.decode)(t[1]);for(const t of e.sections)if("amount"==t.name)return parseInt(t.value);break}}catch(t){console.log("Error bad zap",t,e)}return 0}onListMetaEvents(e){for(let t of e)switch(t.kind){case 6:this.setState((e=>({repostsCount:e.repostsCount+1})));break;case 7:this.setState((e=>({likesCount:e.likesCount+1})));break;case 1:this.setState((e=>({repliesCount:e.repliesCount+1})));break;case 9735:this.setState((e=>({zapAmount:e.zapAmount+this.getZapAmount(t)})));break;default:console.log("Unknown note kind")}}fetchMeta(e){let{socket:t,noteId:n,data:r}=e;return t.url.includes("wss://relay.nostr.band")?this.fetchMetaCount({socket:t,noteId:n,data:r}):this.fetchMetaList({socket:t,noteId:n,data:r})}fetchMetaCount(e){let{socket:t,noteId:n,data:r}=e;const o=e=>n?{kinds:[e],"#e":[n]}:r?{kinds:[e],"#a":[`${r.kind}:${r.pubkey}:${r.identifier}`]}:void 0;this.countEvents({socket:t,sub:o(1)}).then((e=>{this.setState((t=>({repliesCount:e?e.count:0})))})),this.countEvents({socket:t,sub:o(6)}).then((e=>{this.setState((t=>({repostsCount:e?e.count:0})))})),this.countEvents({socket:t,sub:o(7)}).then((e=>{this.setState((t=>({likesCount:e?e.count:0})))})),this.listEvents({socket:t,sub:o(9735)}).then((e=>{this.onListMetaEvents(e)}))}fetchMetaList(e){let{socket:t,noteId:n,data:r}=e;const o=this.getSubOnFetchMetaList({noteId:n,data:r});this.listEvents({socket:t,sub:o}).then((e=>{this.onListMetaEvents(e)}))}getSubOnFetchMetaList(e){let{noteId:t,data:n}=e;return t?{kinds:[1,6,7,9735],"#e":[t]}:n?{kinds:[1,6,7,9735],"#a":[`${n.kind}:${n.pubkey}:${n.identifier}`]}:void 0}onListProfileMetaEvents(e){for(let t of e)switch(t.kind){case 3:this.setState((e=>({followersCount:e.followersCount+1})));break;case 9735:this.setState((e=>({zapAmount:e.zapAmount+this.getZapAmount(t)})));break;default:console.log("Unknown event kind")}}fetchProfileMetaCount(e){let{socket:t,pubkey:n}=e;const r=e=>({kinds:[e],"#p":[n]});this.countEvents({socket:t,sub:r(3)}).then((e=>{this.setState((t=>({followersCount:e?e.count:0})))})),this.listEvents({socket:t,sub:r(9735)}).then((e=>{this.onListProfileMetaEvents(e)}))}fetchProfileMetaList(e){let{socket:t,pubkey:n}=e;const r={kinds:[3,9735],"#p":[n]};this.listEvents({socket:t,sub:r}).then((e=>{this.onListProfileMetaEvents(e)}))}fetchProfileMeta(e){let{socket:t,pubkey:n}=e;return t.url.includes("wss://relay.nostr.band")?this.fetchProfileMetaCount({socket:t,pubkey:n}):this.fetchProfileMetaList({socket:t,pubkey:n})}formatLink(e){return this.isVideo(e)?vt("div",{class:"cardContentMedia",children:vt("video",{src:e,controls:!0})}):this.isImage(e)?vt("div",{className:"cardContentMedia",children:vt("img",{className:"cardContentImage",src:e,alt:""})}):this.isYoutube(e)?(e.includes("/watch")&&(e=(e=e.replace("/watch","/embed")).replace("?v=","/")),vt("div",{className:"cardContentMedia",children:vt("iframe",{src:e})})):vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:e,children:e})}changeLinkRegister(e){return e.toLowerCase()}splitLink(e,t){const n=e.split("?");return n.length>t?n[t]:e}isAnyEndWith(e,t){return t.some((function(t){return e.endsWith(t)}))}isAnyContains(e,t){return t.some((function(t){return e.includes(t)}))}isImage(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyEndWith(t,Qt)}isVideo(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyEndWith(t,Xt)}isYoutube(e){const t=this.splitLink(this.changeLinkRegister(e),0);return this.isAnyContains(t,en)}formatContent(){if(!this.state.note.content)return"";const e=e=>{const t=function(e){return`${e.slice(0,10)}...${e.slice(-4)}`}(e);return vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${e}`,children:t})},t=(e,t)=>{let n=Xe(e);if(t in this.state.taggedProfiles){const e=this.state.taggedProfiles[t];n=e?.name||e?.display_name||n}return vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/${e}`,children:["@",n]})},n=this.state.note,r=n.content.split(/(#\[\d+\])/gi).map((r=>{const o=r.match(/#\[(\d+)\]/);if(o&&2===o.length){const i=parseInt(o[1]);if(i<n.tags.length&&n.tags[i].length>=2){const r=n.tags[i];switch(r[0]){case"p":return t(Ke(r[1]),r[1]);case"e":return e(Ye(r[1]));case"t":return vt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:`https://nostr.band/?q=%23${r[1]}`,children:["#",r[1]]})}}return r}return r.split(/(nostr:[a-z0-9]+)/gi).map((n=>{const r=n.match(/nostr:([a-z0-9]+)/);if(r&&2===r.length)return r[1].startsWith("note1")||r[1].startsWith("nevent1")?e(r[1]):r.startsWith("npub1")?t(r[1],Qe(r[1])):n;return n.split(/((?:http|ftp|https):\/\/(?:[\w+?.\w+])+(?:[a-zA-Z0-9~!@#$%^&*()_\-=+\\/?.:;',]*)?(?:[-A-Za-z0-9+&@#/%=~_|]))/i).map((e=>e.match(/^https?:\/\//)?this.formatLink(e):e))}))}));return r}getDiff(){let e;return Object.keys(this.state.taggedProfiles).length>0&&this.state.countTaggedProfiles&&(e=this.state.countTaggedProfiles-Object.keys(this.state.taggedProfiles).length),e}renderNote(){return vt("div",{class:"nostrEmbedCard",children:[vt(Yt,{profilePkey:this.state.profilePkey,profile:this.state.profile,options:this.props.options}),vt("div",{class:this.state.note.error?"cardContent ne-text-red-800":"cardContent",children:this.formatContent()}),vt(Vt,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount,zapAmount:this.state.zapAmount,options:this.props.options})]})}renderProfile(){return vt("div",{class:"nostrEmbedCard",children:[vt(Yt,{profilePkey:this.state.id,profile:this.state.profile,options:this.props.options}),vt("div",{class:this.state.profile.error?"cardContent ne-text-red-800":"cardContent",children:[this.state.profile?.website?vt("p",{children:["Website:"," ",vt("a",{href:this.state.profile?.website,target:"_blank",rel:"noopener noreferrer nofollow",children:this.state.profile?.website})]}):"",this.state.profile?.about||"Loading..."]}),vt(Jt,{profile:this.state.profile,followersCount:this.state.followersCount,zapAmount:this.state.zapAmount,options:this.props.options})]})}renderProfilesList(){return vt("div",{class:"nostrEmbedCard",children:[vt(Yt,{profilePkey:this.state.id.data.pubkey,profile:this.state.profile,options:this.props.options}),vt("div",{children:[vt("h3",{class:"cardTitle",children:[2===this.state.kind&&this.state.profilesList.name?this.state.profilesList.name:this.state.profilesList.d,3===this.state.kind&&"Following ","(",this.state.taggedProfiles?this.state.countTaggedProfiles:0,")"]}),2===this.state.kind&&vt("p",{class:"cardDescription",children:this.state.profilesList.description}),vt("div",{class:"cardList",children:[Object.keys(this.state.taggedProfiles).map((e=>vt("div",{children:vt(Yt,{profilePkey:e,profile:this.state.taggedProfiles[e]})},e+"taggedProfile"))),this.state.countTaggedProfiles>0&&this.state.countTaggedProfiles>Object.keys(this.state.taggedProfiles).length?vt("div",{class:"diffProfiles",children:["And ",this.getDiff()," more profiles."]}):null]})]}),vt(Vt,{profilesList:this.state.profilesList,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount,zapAmount:this.state.zapAmount,options:this.props.options})]})}render(){switch(this.state.kind){case 0:return this.renderProfile();case 1:return this.renderNote();case 2:case 3:return this.renderProfilesList()}}};function nn(e,t,n,r){n||(n="wss://relay.nostr.band/");const o=document.querySelector(t)?document.querySelector(t):document.querySelector("body");L(p(tn,{id:e,relay:n,options:r}),o)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2QsS0FBSyxFQUVMLEtBQUssRUFDSCxPQUFPcjlCLEtBQUsyOUIscUJBRWxCLEdDcjRCSyxTQUFTQyxHQUFLdnpCLEVBQUl3ekIsRUFBU3RILEVBQU81a0IsR0FFbEM0a0IsSUFDSEEsRUFBUSwyQkFFVixNQUFNdUgsRUFBZ0J0cUIsU0FBU0MsY0FBY29xQixHQUN6Q3JxQixTQUFTQyxjQUFjb3FCLEdBQ3ZCcnFCLFNBQVNDLGNBQWMsUUFFM0JzRyxFQUFPbkQsRUFBRW1uQixHQUFZLENBQUUxekIsS0FBSWtzQixRQUFPNWtCLFlBQVltc0IsRUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvQHNjdXJlL2Jhc2UvbGliL2luZGV4LmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvYmVjaDMyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9saWdodC1ib2x0MTEtZGVjb2Rlci9ib2x0MTEuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9Abm9ibGUvc2VjcDI1NmsxL2xpYi9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3MvZGlzdC9ob29rcy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9wcmVhY3QvanN4LXJ1bnRpbWUvZGlzdC9qc3hSdW50aW1lLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvY29weUljb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL3N0eWxlLmNzcz9mYzdjIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9jb3B5VGV4dC5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvYm9sdEljb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL2hlYXJ0SWNvbi5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvbGlua0ljb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL3JlcGx5SWNvbi5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvcmVwb3N0SWNvbi5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvbWV0YS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMva2V5SWNvbi5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvbm9zdHJpY2hJY29uLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9wcm9maWxlSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL2ZvbGxvd2Vyc0ljb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGVNZXRhLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9ub3N0ckVtYmVkLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibm9zdHJFbWJlZFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJub3N0ckVtYmVkXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgKCkgPT4ge1xucmV0dXJuICIsInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuLyohIHNjdXJlLWJhc2UgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnl0ZXMgPSBleHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuYnl0ZXNUb1N0cmluZyA9IGV4cG9ydHMuaGV4ID0gZXhwb3J0cy51dGY4ID0gZXhwb3J0cy5iZWNoMzJtID0gZXhwb3J0cy5iZWNoMzIgPSBleHBvcnRzLmJhc2U1OGNoZWNrID0gZXhwb3J0cy5iYXNlNTh4bXIgPSBleHBvcnRzLmJhc2U1OHhycCA9IGV4cG9ydHMuYmFzZTU4ZmxpY2tyID0gZXhwb3J0cy5iYXNlNTggPSBleHBvcnRzLmJhc2U2NHVybCA9IGV4cG9ydHMuYmFzZTY0ID0gZXhwb3J0cy5iYXNlMzJjcm9ja2ZvcmQgPSBleHBvcnRzLmJhc2UzMmhleCA9IGV4cG9ydHMuYmFzZTMyID0gZXhwb3J0cy5iYXNlMTYgPSBleHBvcnRzLnV0aWxzID0gZXhwb3J0cy5hc3NlcnROdW1iZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBhc3NlcnROdW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgaW50ZWdlcjogJHtufWApO1xufVxuZXhwb3J0cy5hc3NlcnROdW1iZXIgPSBhc3NlcnROdW1iZXI7XG5mdW5jdGlvbiBjaGFpbiguLi5hcmdzKSB7XG4gICAgY29uc3Qgd3JhcCA9IChhLCBiKSA9PiAoYykgPT4gYShiKGMpKTtcbiAgICBjb25zdCBlbmNvZGUgPSBBcnJheS5mcm9tKGFyZ3MpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLnJlZHVjZSgoYWNjLCBpKSA9PiAoYWNjID8gd3JhcChhY2MsIGkuZW5jb2RlKSA6IGkuZW5jb2RlKSwgdW5kZWZpbmVkKTtcbiAgICBjb25zdCBkZWNvZGUgPSBhcmdzLnJlZHVjZSgoYWNjLCBpKSA9PiAoYWNjID8gd3JhcChhY2MsIGkuZGVjb2RlKSA6IGkuZGVjb2RlKSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4geyBlbmNvZGUsIGRlY29kZSB9O1xufVxuZnVuY3Rpb24gYWxwaGFiZXQoYWxwaGFiZXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGU6IChkaWdpdHMpID0+IHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscGhhYmV0LmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYW4gYXJyYXkgb2YgbnVtYmVycycpO1xuICAgICAgICAgICAgcmV0dXJuIGRpZ2l0cy5tYXAoKGkpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnROdW1iZXIoaSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPCAwIHx8IGkgPj0gYWxwaGFiZXQubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpZ2l0IGluZGV4IG91dHNpZGUgYWxwaGFiZXQ6ICR7aX0gKGFscGhhYmV0OiAke2FscGhhYmV0Lmxlbmd0aH0pYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFscGhhYmV0W2ldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29kZTogKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IChpbnB1dC5sZW5ndGggJiYgdHlwZW9mIGlucHV0WzBdICE9PSAnc3RyaW5nJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbHBoYWJldC5kZWNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5tYXAoKGxldHRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGV0dGVyICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhbHBoYWJldC5kZWNvZGU6IG5vdCBzdHJpbmcgZWxlbWVudD0ke2xldHRlcn1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGFscGhhYmV0LmluZGV4T2YobGV0dGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbGV0dGVyOiBcIiR7bGV0dGVyfVwiLiBBbGxvd2VkOiAke2FscGhhYmV0fWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBqb2luKHNlcGFyYXRvciA9ICcnKSB7XG4gICAgaWYgKHR5cGVvZiBzZXBhcmF0b3IgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4gc2VwYXJhdG9yIHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGU6IChmcm9tKSA9PiB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZnJvbSkgfHwgKGZyb20ubGVuZ3RoICYmIHR5cGVvZiBmcm9tWzBdICE9PSAnc3RyaW5nJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdqb2luLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSBvZiBmcm9tKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgam9pbi5lbmNvZGU6IG5vbi1zdHJpbmcgaW5wdXQ9JHtpfWApO1xuICAgICAgICAgICAgcmV0dXJuIGZyb20uam9pbihzZXBhcmF0b3IpO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGU6ICh0bykgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0byAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdqb2luLmRlY29kZSBpbnB1dCBzaG91bGQgYmUgc3RyaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gdG8uc3BsaXQoc2VwYXJhdG9yKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcGFkZGluZyhiaXRzLCBjaHIgPSAnPScpIHtcbiAgICBhc3NlcnROdW1iZXIoYml0cyk7XG4gICAgaWYgKHR5cGVvZiBjaHIgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhZGRpbmcgY2hyIHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8IChkYXRhLmxlbmd0aCAmJiB0eXBlb2YgZGF0YVswXSAhPT0gJ3N0cmluZycpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncGFkZGluZy5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgb2YgZGF0YSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZW5jb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgICAgICAgIHdoaWxlICgoZGF0YS5sZW5ndGggKiBiaXRzKSAlIDgpXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGNocik7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IChpbnB1dC5sZW5ndGggJiYgdHlwZW9mIGlucHV0WzBdICE9PSAnc3RyaW5nJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYWRkaW5nLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSBvZiBpbnB1dClcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZGVjb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgICAgICAgIGxldCBlbmQgPSBpbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoKGVuZCAqIGJpdHMpICUgOClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFkZGluZzogc3RyaW5nIHNob3VsZCBoYXZlIHdob2xlIG51bWJlciBvZiBieXRlcycpO1xuICAgICAgICAgICAgZm9yICg7IGVuZCA+IDAgJiYgaW5wdXRbZW5kIC0gMV0gPT09IGNocjsgZW5kLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoISgoKGVuZCAtIDEpICogYml0cykgJSA4KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBhZGRpbmc6IHN0cmluZyBoYXMgdG9vIG11Y2ggcGFkZGluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKDAsIGVuZCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZShmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm9ybWFsaXplIGZuIHNob3VsZCBiZSBmdW5jdGlvbicpO1xuICAgIHJldHVybiB7IGVuY29kZTogKGZyb20pID0+IGZyb20sIGRlY29kZTogKHRvKSA9PiBmbih0bykgfTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRSYWRpeChkYXRhLCBmcm9tLCB0bykge1xuICAgIGlmIChmcm9tIDwgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXg6IHdyb25nIGZyb209JHtmcm9tfSwgYmFzZSBjYW5ub3QgYmUgbGVzcyB0aGFuIDJgKTtcbiAgICBpZiAodG8gPCAyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDogd3JvbmcgdG89JHt0b30sIGJhc2UgY2Fubm90IGJlIGxlc3MgdGhhbiAyYCk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDogZGF0YSBzaG91bGQgYmUgYXJyYXknKTtcbiAgICBpZiAoIWRhdGEubGVuZ3RoKVxuICAgICAgICByZXR1cm4gW107XG4gICAgbGV0IHBvcyA9IDA7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgY29uc3QgZGlnaXRzID0gQXJyYXkuZnJvbShkYXRhKTtcbiAgICBkaWdpdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBhc3NlcnROdW1iZXIoZCk7XG4gICAgICAgIGlmIChkIDwgMCB8fCBkID49IGZyb20pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdyb25nIGludGVnZXI6ICR7ZH1gKTtcbiAgICB9KTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBsZXQgY2FycnkgPSAwO1xuICAgICAgICBsZXQgZG9uZSA9IHRydWU7XG4gICAgICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBkaWdpdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRpZ2l0ID0gZGlnaXRzW2ldO1xuICAgICAgICAgICAgY29uc3QgZGlnaXRCYXNlID0gZnJvbSAqIGNhcnJ5ICsgZGlnaXQ7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGRpZ2l0QmFzZSkgfHxcbiAgICAgICAgICAgICAgICAoZnJvbSAqIGNhcnJ5KSAvIGZyb20gIT09IGNhcnJ5IHx8XG4gICAgICAgICAgICAgICAgZGlnaXRCYXNlIC0gZGlnaXQgIT09IGZyb20gKiBjYXJyeSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29udmVydFJhZGl4OiBjYXJyeSBvdmVyZmxvdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FycnkgPSBkaWdpdEJhc2UgJSB0bztcbiAgICAgICAgICAgIGRpZ2l0c1tpXSA9IE1hdGguZmxvb3IoZGlnaXRCYXNlIC8gdG8pO1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihkaWdpdHNbaV0pIHx8IGRpZ2l0c1tpXSAqIHRvICsgY2FycnkgIT09IGRpZ2l0QmFzZSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3cnKTtcbiAgICAgICAgICAgIGlmICghZG9uZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKCFkaWdpdHNbaV0pXG4gICAgICAgICAgICAgICAgcG9zID0gaTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goY2FycnkpO1xuICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoIC0gMSAmJiBkYXRhW2ldID09PSAwOyBpKyspXG4gICAgICAgIHJlcy5wdXNoKDApO1xuICAgIHJldHVybiByZXMucmV2ZXJzZSgpO1xufVxuY29uc3QgZ2NkID0gKGEsIGIpID0+ICghYiA/IGEgOiBnY2QoYiwgYSAlIGIpKTtcbmNvbnN0IHJhZGl4MmNhcnJ5ID0gKGZyb20sIHRvKSA9PiBmcm9tICsgKHRvIC0gZ2NkKGZyb20sIHRvKSk7XG5mdW5jdGlvbiBjb252ZXJ0UmFkaXgyKGRhdGEsIGZyb20sIHRvLCBwYWRkaW5nKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDI6IGRhdGEgc2hvdWxkIGJlIGFycmF5Jyk7XG4gICAgaWYgKGZyb20gPD0gMCB8fCBmcm9tID4gMzIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4Mjogd3JvbmcgZnJvbT0ke2Zyb219YCk7XG4gICAgaWYgKHRvIDw9IDAgfHwgdG8gPiAzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiB3cm9uZyB0bz0ke3RvfWApO1xuICAgIGlmIChyYWRpeDJjYXJyeShmcm9tLCB0bykgPiAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IGNhcnJ5IG92ZXJmbG93IGZyb209JHtmcm9tfSB0bz0ke3RvfSBjYXJyeUJpdHM9JHtyYWRpeDJjYXJyeShmcm9tLCB0byl9YCk7XG4gICAgfVxuICAgIGxldCBjYXJyeSA9IDA7XG4gICAgbGV0IHBvcyA9IDA7XG4gICAgY29uc3QgbWFzayA9IDIgKiogdG8gLSAxO1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgbiBvZiBkYXRhKSB7XG4gICAgICAgIGFzc2VydE51bWJlcihuKTtcbiAgICAgICAgaWYgKG4gPj0gMiAqKiBmcm9tKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiBpbnZhbGlkIGRhdGEgd29yZD0ke259IGZyb209JHtmcm9tfWApO1xuICAgICAgICBjYXJyeSA9IChjYXJyeSA8PCBmcm9tKSB8IG47XG4gICAgICAgIGlmIChwb3MgKyBmcm9tID4gMzIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IGNhcnJ5IG92ZXJmbG93IHBvcz0ke3Bvc30gZnJvbT0ke2Zyb219YCk7XG4gICAgICAgIHBvcyArPSBmcm9tO1xuICAgICAgICBmb3IgKDsgcG9zID49IHRvOyBwb3MgLT0gdG8pXG4gICAgICAgICAgICByZXMucHVzaCgoKGNhcnJ5ID4+IChwb3MgLSB0bykpICYgbWFzaykgPj4+IDApO1xuICAgICAgICBjYXJyeSAmPSAyICoqIHBvcyAtIDE7XG4gICAgfVxuICAgIGNhcnJ5ID0gKGNhcnJ5IDw8ICh0byAtIHBvcykpICYgbWFzaztcbiAgICBpZiAoIXBhZGRpbmcgJiYgcG9zID49IGZyb20pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhjZXNzIHBhZGRpbmcnKTtcbiAgICBpZiAoIXBhZGRpbmcgJiYgY2FycnkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm9uLXplcm8gcGFkZGluZzogJHtjYXJyeX1gKTtcbiAgICBpZiAocGFkZGluZyAmJiBwb3MgPiAwKVxuICAgICAgICByZXMucHVzaChjYXJyeSA+Pj4gMCk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHJhZGl4KG51bSkge1xuICAgIGFzc2VydE51bWJlcihudW0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZTogKGJ5dGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIShieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXguZW5jb2RlIGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5Jyk7XG4gICAgICAgICAgICByZXR1cm4gY29udmVydFJhZGl4KEFycmF5LmZyb20oYnl0ZXMpLCAyICoqIDgsIG51bSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29kZTogKGRpZ2l0cykgPT4ge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRpZ2l0cykgfHwgKGRpZ2l0cy5sZW5ndGggJiYgdHlwZW9mIGRpZ2l0c1swXSAhPT0gJ251bWJlcicpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXguZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGNvbnZlcnRSYWRpeChkaWdpdHMsIG51bSwgMiAqKiA4KSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJhZGl4MihiaXRzLCByZXZQYWRkaW5nID0gZmFsc2UpIHtcbiAgICBhc3NlcnROdW1iZXIoYml0cyk7XG4gICAgaWYgKGJpdHMgPD0gMCB8fCBiaXRzID4gMzIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXgyOiBiaXRzIHNob3VsZCBiZSBpbiAoMC4uMzJdJyk7XG4gICAgaWYgKHJhZGl4MmNhcnJ5KDgsIGJpdHMpID4gMzIgfHwgcmFkaXgyY2FycnkoYml0cywgOCkgPiAzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDI6IGNhcnJ5IG92ZXJmbG93Jyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlOiAoYnl0ZXMpID0+IHtcbiAgICAgICAgICAgIGlmICghKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDIuZW5jb2RlIGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5Jyk7XG4gICAgICAgICAgICByZXR1cm4gY29udmVydFJhZGl4MihBcnJheS5mcm9tKGJ5dGVzKSwgOCwgYml0cywgIXJldlBhZGRpbmcpO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGU6IChkaWdpdHMpID0+IHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl4Mi5kZWNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oY29udmVydFJhZGl4MihkaWdpdHMsIGJpdHMsIDgsIHJldlBhZGRpbmcpKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gdW5zYWZlV3JhcHBlcihmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zYWZlV3JhcHBlciBmbiBzaG91bGQgYmUgZnVuY3Rpb24nKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrc3VtKGxlbiwgZm4pIHtcbiAgICBhc3NlcnROdW1iZXIobGVuKTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NoZWNrc3VtIGZuIHNob3VsZCBiZSBmdW5jdGlvbicpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZShkYXRhKSB7XG4gICAgICAgICAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjaGVja3N1bS5lbmNvZGU6IGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5Jyk7XG4gICAgICAgICAgICBjb25zdCBjaGVja3N1bSA9IGZuKGRhdGEpLnNsaWNlKDAsIGxlbik7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIGxlbik7XG4gICAgICAgICAgICByZXMuc2V0KGRhdGEpO1xuICAgICAgICAgICAgcmVzLnNldChjaGVja3N1bSwgZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlKGRhdGEpIHtcbiAgICAgICAgICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NoZWNrc3VtLmRlY29kZTogaW5wdXQgc2hvdWxkIGJlIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBkYXRhLnNsaWNlKDAsIC1sZW4pO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hlY2tzdW0gPSBmbihwYXlsb2FkKS5zbGljZSgwLCBsZW4pO1xuICAgICAgICAgICAgY29uc3Qgb2xkQ2hlY2tzdW0gPSBkYXRhLnNsaWNlKC1sZW4pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICAgICAgICBpZiAobmV3Q2hlY2tzdW1baV0gIT09IG9sZENoZWNrc3VtW2ldKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2hlY2tzdW0nKTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLnV0aWxzID0geyBhbHBoYWJldCwgY2hhaW4sIGNoZWNrc3VtLCByYWRpeCwgcmFkaXgyLCBqb2luLCBwYWRkaW5nIH07XG5leHBvcnRzLmJhc2UxNiA9IGNoYWluKHJhZGl4Mig0KSwgYWxwaGFiZXQoJzAxMjM0NTY3ODlBQkNERUYnKSwgam9pbignJykpO1xuZXhwb3J0cy5iYXNlMzIgPSBjaGFpbihyYWRpeDIoNSksIGFscGhhYmV0KCdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2NycpLCBwYWRkaW5nKDUpLCBqb2luKCcnKSk7XG5leHBvcnRzLmJhc2UzMmhleCA9IGNoYWluKHJhZGl4Mig1KSwgYWxwaGFiZXQoJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWJyksIHBhZGRpbmcoNSksIGpvaW4oJycpKTtcbmV4cG9ydHMuYmFzZTMyY3JvY2tmb3JkID0gY2hhaW4ocmFkaXgyKDUpLCBhbHBoYWJldCgnMDEyMzQ1Njc4OUFCQ0RFRkdISktNTlBRUlNUVldYWVonKSwgam9pbignJyksIG5vcm1hbGl6ZSgocykgPT4gcy50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoL08vZywgJzAnKS5yZXBsYWNlKC9bSUxdL2csICcxJykpKTtcbmV4cG9ydHMuYmFzZTY0ID0gY2hhaW4ocmFkaXgyKDYpLCBhbHBoYWJldCgnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycpLCBwYWRkaW5nKDYpLCBqb2luKCcnKSk7XG5leHBvcnRzLmJhc2U2NHVybCA9IGNoYWluKHJhZGl4Mig2KSwgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nKSwgcGFkZGluZyg2KSwgam9pbignJykpO1xuY29uc3QgZ2VuQmFzZTU4ID0gKGFiYykgPT4gY2hhaW4ocmFkaXgoNTgpLCBhbHBoYWJldChhYmMpLCBqb2luKCcnKSk7XG5leHBvcnRzLmJhc2U1OCA9IGdlbkJhc2U1OCgnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eicpO1xuZXhwb3J0cy5iYXNlNThmbGlja3IgPSBnZW5CYXNlNTgoJzEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSEpLTE1OUFFSU1RVVldYWVonKTtcbmV4cG9ydHMuYmFzZTU4eHJwID0gZ2VuQmFzZTU4KCdycHNobmFmMzl3QlVETkVHSEpLTE00UFFSU1Q3VldYWVoyYmNkZUNnNjVqa204b0ZxaTF0dXZBeHl6Jyk7XG5jb25zdCBYTVJfQkxPQ0tfTEVOID0gWzAsIDIsIDMsIDUsIDYsIDcsIDksIDEwLCAxMV07XG5leHBvcnRzLmJhc2U1OHhtciA9IHtcbiAgICBlbmNvZGUoZGF0YSkge1xuICAgICAgICBsZXQgcmVzID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gOCkge1xuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBkYXRhLnN1YmFycmF5KGksIGkgKyA4KTtcbiAgICAgICAgICAgIHJlcyArPSBleHBvcnRzLmJhc2U1OC5lbmNvZGUoYmxvY2spLnBhZFN0YXJ0KFhNUl9CTE9DS19MRU5bYmxvY2subGVuZ3RoXSwgJzEnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0sXG4gICAgZGVjb2RlKHN0cikge1xuICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSAxMSkge1xuICAgICAgICAgICAgY29uc3Qgc2xpY2UgPSBzdHIuc2xpY2UoaSwgaSArIDExKTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTGVuID0gWE1SX0JMT0NLX0xFTi5pbmRleE9mKHNsaWNlLmxlbmd0aCk7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGV4cG9ydHMuYmFzZTU4LmRlY29kZShzbGljZSk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJsb2NrLmxlbmd0aCAtIGJsb2NrTGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2tbal0gIT09IDApXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFzZTU4eG1yOiB3cm9uZyBwYWRkaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMgPSByZXMuY29uY2F0KEFycmF5LmZyb20oYmxvY2suc2xpY2UoYmxvY2subGVuZ3RoIC0gYmxvY2tMZW4pKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShyZXMpO1xuICAgIH0sXG59O1xuY29uc3QgYmFzZTU4Y2hlY2sgPSAoc2hhMjU2KSA9PiBjaGFpbihjaGVja3N1bSg0LCAoZGF0YSkgPT4gc2hhMjU2KHNoYTI1NihkYXRhKSkpLCBleHBvcnRzLmJhc2U1OCk7XG5leHBvcnRzLmJhc2U1OGNoZWNrID0gYmFzZTU4Y2hlY2s7XG5jb25zdCBCRUNIX0FMUEhBQkVUID0gY2hhaW4oYWxwaGFiZXQoJ3FwenJ5OXg4Z2YydHZkdzBzM2puNTRraGNlNm11YTdsJyksIGpvaW4oJycpKTtcbmNvbnN0IFBPTFlNT0RfR0VORVJBVE9SUyA9IFsweDNiNmE1N2IyLCAweDI2NTA4ZTZkLCAweDFlYTExOWZhLCAweDNkNDIzM2RkLCAweDJhMTQ2MmIzXTtcbmZ1bmN0aW9uIGJlY2gzMlBvbHltb2QocHJlKSB7XG4gICAgY29uc3QgYiA9IHByZSA+PiAyNTtcbiAgICBsZXQgY2hrID0gKHByZSAmIDB4MWZmZmZmZikgPDwgNTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFBPTFlNT0RfR0VORVJBVE9SUy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoKChiID4+IGkpICYgMSkgPT09IDEpXG4gICAgICAgICAgICBjaGsgXj0gUE9MWU1PRF9HRU5FUkFUT1JTW2ldO1xuICAgIH1cbiAgICByZXR1cm4gY2hrO1xufVxuZnVuY3Rpb24gYmVjaENoZWNrc3VtKHByZWZpeCwgd29yZHMsIGVuY29kaW5nQ29uc3QgPSAxKSB7XG4gICAgY29uc3QgbGVuID0gcHJlZml4Lmxlbmd0aDtcbiAgICBsZXQgY2hrID0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAzMyB8fCBjID4gMTI2KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHByZWZpeCAoJHtwcmVmaXh9KWApO1xuICAgICAgICBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoaykgXiAoYyA+PiA1KTtcbiAgICB9XG4gICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIChwcmVmaXguY2hhckNvZGVBdChpKSAmIDB4MWYpO1xuICAgIGZvciAobGV0IHYgb2Ygd29yZHMpXG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIHY7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspXG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKTtcbiAgICBjaGsgXj0gZW5jb2RpbmdDb25zdDtcbiAgICByZXR1cm4gQkVDSF9BTFBIQUJFVC5lbmNvZGUoY29udmVydFJhZGl4MihbY2hrICUgMiAqKiAzMF0sIDMwLCA1LCBmYWxzZSkpO1xufVxuZnVuY3Rpb24gZ2VuQmVjaDMyKGVuY29kaW5nKSB7XG4gICAgY29uc3QgRU5DT0RJTkdfQ09OU1QgPSBlbmNvZGluZyA9PT0gJ2JlY2gzMicgPyAxIDogMHgyYmM4MzBhMztcbiAgICBjb25zdCBfd29yZHMgPSByYWRpeDIoNSk7XG4gICAgY29uc3QgZnJvbVdvcmRzID0gX3dvcmRzLmRlY29kZTtcbiAgICBjb25zdCB0b1dvcmRzID0gX3dvcmRzLmVuY29kZTtcbiAgICBjb25zdCBmcm9tV29yZHNVbnNhZmUgPSB1bnNhZmVXcmFwcGVyKGZyb21Xb3Jkcyk7XG4gICAgZnVuY3Rpb24gZW5jb2RlKHByZWZpeCwgd29yZHMsIGxpbWl0ID0gOTApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmVmaXggIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBiZWNoMzIuZW5jb2RlIHByZWZpeCBzaG91bGQgYmUgc3RyaW5nLCBub3QgJHt0eXBlb2YgcHJlZml4fWApO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkod29yZHMpIHx8ICh3b3Jkcy5sZW5ndGggJiYgdHlwZW9mIHdvcmRzWzBdICE9PSAnbnVtYmVyJykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJlY2gzMi5lbmNvZGUgd29yZHMgc2hvdWxkIGJlIGFycmF5IG9mIG51bWJlcnMsIG5vdCAke3R5cGVvZiB3b3Jkc31gKTtcbiAgICAgICAgY29uc3QgYWN0dWFsTGVuZ3RoID0gcHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGg7XG4gICAgICAgIGlmIChsaW1pdCAhPT0gZmFsc2UgJiYgYWN0dWFsTGVuZ3RoID4gbGltaXQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBMZW5ndGggJHthY3R1YWxMZW5ndGh9IGV4Y2VlZHMgbGltaXQgJHtsaW1pdH1gKTtcbiAgICAgICAgcHJlZml4ID0gcHJlZml4LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9MSR7QkVDSF9BTFBIQUJFVC5lbmNvZGUod29yZHMpfSR7YmVjaENoZWNrc3VtKHByZWZpeCwgd29yZHMsIEVOQ09ESU5HX0NPTlNUKX1gO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGUoc3RyLCBsaW1pdCA9IDkwKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYmVjaDMyLmRlY29kZSBpbnB1dCBzaG91bGQgYmUgc3RyaW5nLCBub3QgJHt0eXBlb2Ygc3RyfWApO1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA8IDggfHwgKGxpbWl0ICE9PSBmYWxzZSAmJiBzdHIubGVuZ3RoID4gbGltaXQpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgV3Jvbmcgc3RyaW5nIGxlbmd0aDogJHtzdHIubGVuZ3RofSAoJHtzdHJ9KS4gRXhwZWN0ZWQgKDguLiR7bGltaXR9KWApO1xuICAgICAgICBjb25zdCBsb3dlcmVkID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSBzdHIudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyaW5nIG11c3QgYmUgbG93ZXJjYXNlIG9yIHVwcGVyY2FzZWApO1xuICAgICAgICBzdHIgPSBsb3dlcmVkO1xuICAgICAgICBjb25zdCBzZXBJbmRleCA9IHN0ci5sYXN0SW5kZXhPZignMScpO1xuICAgICAgICBpZiAoc2VwSW5kZXggPT09IDAgfHwgc2VwSW5kZXggPT09IC0xKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMZXR0ZXIgXCIxXCIgbXVzdCBiZSBwcmVzZW50IGJldHdlZW4gcHJlZml4IGFuZCBkYXRhIG9ubHlgKTtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gc3RyLnNsaWNlKDAsIHNlcEluZGV4KTtcbiAgICAgICAgY29uc3QgX3dvcmRzID0gc3RyLnNsaWNlKHNlcEluZGV4ICsgMSk7XG4gICAgICAgIGlmIChfd29yZHMubGVuZ3RoIDwgNilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBsb25nJyk7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gQkVDSF9BTFBIQUJFVC5kZWNvZGUoX3dvcmRzKS5zbGljZSgwLCAtNik7XG4gICAgICAgIGNvbnN0IHN1bSA9IGJlY2hDaGVja3N1bShwcmVmaXgsIHdvcmRzLCBFTkNPRElOR19DT05TVCk7XG4gICAgICAgIGlmICghX3dvcmRzLmVuZHNXaXRoKHN1bSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY2hlY2tzdW0gaW4gJHtzdHJ9OiBleHBlY3RlZCBcIiR7c3VtfVwiYCk7XG4gICAgICAgIHJldHVybiB7IHByZWZpeCwgd29yZHMgfTtcbiAgICB9XG4gICAgY29uc3QgZGVjb2RlVW5zYWZlID0gdW5zYWZlV3JhcHBlcihkZWNvZGUpO1xuICAgIGZ1bmN0aW9uIGRlY29kZVRvQnl0ZXMoc3RyKSB7XG4gICAgICAgIGNvbnN0IHsgcHJlZml4LCB3b3JkcyB9ID0gZGVjb2RlKHN0ciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzLCBieXRlczogZnJvbVdvcmRzKHdvcmRzKSB9O1xuICAgIH1cbiAgICByZXR1cm4geyBlbmNvZGUsIGRlY29kZSwgZGVjb2RlVG9CeXRlcywgZGVjb2RlVW5zYWZlLCBmcm9tV29yZHMsIGZyb21Xb3Jkc1Vuc2FmZSwgdG9Xb3JkcyB9O1xufVxuZXhwb3J0cy5iZWNoMzIgPSBnZW5CZWNoMzIoJ2JlY2gzMicpO1xuZXhwb3J0cy5iZWNoMzJtID0gZ2VuQmVjaDMyKCdiZWNoMzJtJyk7XG5leHBvcnRzLnV0ZjggPSB7XG4gICAgZW5jb2RlOiAoZGF0YSkgPT4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGRhdGEpLFxuICAgIGRlY29kZTogKHN0cikgPT4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0ciksXG59O1xuZXhwb3J0cy5oZXggPSBjaGFpbihyYWRpeDIoNCksIGFscGhhYmV0KCcwMTIzNDU2Nzg5YWJjZGVmJyksIGpvaW4oJycpLCBub3JtYWxpemUoKHMpID0+IHtcbiAgICBpZiAodHlwZW9mIHMgIT09ICdzdHJpbmcnIHx8IHMubGVuZ3RoICUgMilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgaGV4LmRlY29kZTogZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJHt0eXBlb2Ygc30gd2l0aCBsZW5ndGggJHtzLmxlbmd0aH1gKTtcbiAgICByZXR1cm4gcy50b0xvd2VyQ2FzZSgpO1xufSkpO1xuY29uc3QgQ09ERVJTID0ge1xuICAgIHV0Zjg6IGV4cG9ydHMudXRmOCwgaGV4OiBleHBvcnRzLmhleCwgYmFzZTE2OiBleHBvcnRzLmJhc2UxNiwgYmFzZTMyOiBleHBvcnRzLmJhc2UzMiwgYmFzZTY0OiBleHBvcnRzLmJhc2U2NCwgYmFzZTY0dXJsOiBleHBvcnRzLmJhc2U2NHVybCwgYmFzZTU4OiBleHBvcnRzLmJhc2U1OCwgYmFzZTU4eG1yOiBleHBvcnRzLmJhc2U1OHhtclxufTtcbmNvbnN0IGNvZGVyVHlwZUVycm9yID0gYEludmFsaWQgZW5jb2RpbmcgdHlwZS4gQXZhaWxhYmxlIHR5cGVzOiAke09iamVjdC5rZXlzKENPREVSUykuam9pbignLCAnKX1gO1xuY29uc3QgYnl0ZXNUb1N0cmluZyA9ICh0eXBlLCBieXRlcykgPT4ge1xuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycgfHwgIUNPREVSUy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb2RlclR5cGVFcnJvcik7XG4gICAgaWYgKCEoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYnl0ZXNUb1N0cmluZygpIGV4cGVjdHMgVWludDhBcnJheScpO1xuICAgIHJldHVybiBDT0RFUlNbdHlwZV0uZW5jb2RlKGJ5dGVzKTtcbn07XG5leHBvcnRzLmJ5dGVzVG9TdHJpbmcgPSBieXRlc1RvU3RyaW5nO1xuZXhwb3J0cy5zdHIgPSBleHBvcnRzLmJ5dGVzVG9TdHJpbmc7XG5jb25zdCBzdHJpbmdUb0J5dGVzID0gKHR5cGUsIHN0cikgPT4ge1xuICAgIGlmICghQ09ERVJTLmhhc093blByb3BlcnR5KHR5cGUpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvZGVyVHlwZUVycm9yKTtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3N0cmluZ1RvQnl0ZXMoKSBleHBlY3RzIHN0cmluZycpO1xuICAgIHJldHVybiBDT0RFUlNbdHlwZV0uZGVjb2RlKHN0cik7XG59O1xuZXhwb3J0cy5zdHJpbmdUb0J5dGVzID0gc3RyaW5nVG9CeXRlcztcbmV4cG9ydHMuYnl0ZXMgPSBleHBvcnRzLnN0cmluZ1RvQnl0ZXM7XG4iLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJlY2gzMm0gPSBleHBvcnRzLmJlY2gzMiA9IHZvaWQgMDtcbmNvbnN0IEFMUEhBQkVUID0gJ3FwenJ5OXg4Z2YydHZkdzBzM2puNTRraGNlNm11YTdsJztcbmNvbnN0IEFMUEhBQkVUX01BUCA9IHt9O1xuZm9yIChsZXQgeiA9IDA7IHogPCBBTFBIQUJFVC5sZW5ndGg7IHorKykge1xuICAgIGNvbnN0IHggPSBBTFBIQUJFVC5jaGFyQXQoeik7XG4gICAgQUxQSEFCRVRfTUFQW3hdID0gejtcbn1cbmZ1bmN0aW9uIHBvbHltb2RTdGVwKHByZSkge1xuICAgIGNvbnN0IGIgPSBwcmUgPj4gMjU7XG4gICAgcmV0dXJuICgoKHByZSAmIDB4MWZmZmZmZikgPDwgNSkgXlxuICAgICAgICAoLSgoYiA+PiAwKSAmIDEpICYgMHgzYjZhNTdiMikgXlxuICAgICAgICAoLSgoYiA+PiAxKSAmIDEpICYgMHgyNjUwOGU2ZCkgXlxuICAgICAgICAoLSgoYiA+PiAyKSAmIDEpICYgMHgxZWExMTlmYSkgXlxuICAgICAgICAoLSgoYiA+PiAzKSAmIDEpICYgMHgzZDQyMzNkZCkgXlxuICAgICAgICAoLSgoYiA+PiA0KSAmIDEpICYgMHgyYTE0NjJiMykpO1xufVxuZnVuY3Rpb24gcHJlZml4Q2hrKHByZWZpeCkge1xuICAgIGxldCBjaGsgPSAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGMgPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAzMyB8fCBjID4gMTI2KVxuICAgICAgICAgICAgcmV0dXJuICdJbnZhbGlkIHByZWZpeCAoJyArIHByZWZpeCArICcpJztcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIChjID4+IDUpO1xuICAgIH1cbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHYgPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeICh2ICYgMHgxZik7XG4gICAgfVxuICAgIHJldHVybiBjaGs7XG59XG5mdW5jdGlvbiBjb252ZXJ0KGRhdGEsIGluQml0cywgb3V0Qml0cywgcGFkKSB7XG4gICAgbGV0IHZhbHVlID0gMDtcbiAgICBsZXQgYml0cyA9IDA7XG4gICAgY29uc3QgbWF4ViA9ICgxIDw8IG91dEJpdHMpIC0gMTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgPDwgaW5CaXRzKSB8IGRhdGFbaV07XG4gICAgICAgIGJpdHMgKz0gaW5CaXRzO1xuICAgICAgICB3aGlsZSAoYml0cyA+PSBvdXRCaXRzKSB7XG4gICAgICAgICAgICBiaXRzIC09IG91dEJpdHM7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgodmFsdWUgPj4gYml0cykgJiBtYXhWKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFkKSB7XG4gICAgICAgIGlmIChiaXRzID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKHZhbHVlIDw8IChvdXRCaXRzIC0gYml0cykpICYgbWF4Vik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChiaXRzID49IGluQml0cylcbiAgICAgICAgICAgIHJldHVybiAnRXhjZXNzIHBhZGRpbmcnO1xuICAgICAgICBpZiAoKHZhbHVlIDw8IChvdXRCaXRzIC0gYml0cykpICYgbWF4VilcbiAgICAgICAgICAgIHJldHVybiAnTm9uLXplcm8gcGFkZGluZyc7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiB0b1dvcmRzKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnl0ZXMsIDgsIDUsIHRydWUpO1xufVxuZnVuY3Rpb24gZnJvbVdvcmRzVW5zYWZlKHdvcmRzKSB7XG4gICAgY29uc3QgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpXG4gICAgICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBmcm9tV29yZHMod29yZHMpIHtcbiAgICBjb25zdCByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSlcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgRXJyb3IocmVzKTtcbn1cbmZ1bmN0aW9uIGdldExpYnJhcnlGcm9tRW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgICBsZXQgRU5DT0RJTkdfQ09OU1Q7XG4gICAgaWYgKGVuY29kaW5nID09PSAnYmVjaDMyJykge1xuICAgICAgICBFTkNPRElOR19DT05TVCA9IDE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBFTkNPRElOR19DT05TVCA9IDB4MmJjODMwYTM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuY29kZShwcmVmaXgsIHdvcmRzLCBMSU1JVCkge1xuICAgICAgICBMSU1JVCA9IExJTUlUIHx8IDkwO1xuICAgICAgICBpZiAocHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGggPiBMSU1JVClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4Y2VlZHMgbGVuZ3RoIGxpbWl0Jyk7XG4gICAgICAgIHByZWZpeCA9IHByZWZpeC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAvLyBkZXRlcm1pbmUgY2hrIG1vZFxuICAgICAgICBsZXQgY2hrID0gcHJlZml4Q2hrKHByZWZpeCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2hrID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjaGspO1xuICAgICAgICBsZXQgcmVzdWx0ID0gcHJlZml4ICsgJzEnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gd29yZHNbaV07XG4gICAgICAgICAgICBpZiAoeCA+PiA1ICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm9uIDUtYml0IHdvcmQnKTtcbiAgICAgICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiB4O1xuICAgICAgICAgICAgcmVzdWx0ICs9IEFMUEhBQkVULmNoYXJBdCh4KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKTtcbiAgICAgICAgfVxuICAgICAgICBjaGsgXj0gRU5DT0RJTkdfQ09OU1Q7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gKGNoayA+PiAoKDUgLSBpKSAqIDUpKSAmIDB4MWY7XG4gICAgICAgICAgICByZXN1bHQgKz0gQUxQSEFCRVQuY2hhckF0KHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9fZGVjb2RlKHN0ciwgTElNSVQpIHtcbiAgICAgICAgTElNSVQgPSBMSU1JVCB8fCA5MDtcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPCA4KVxuICAgICAgICAgICAgcmV0dXJuIHN0ciArICcgdG9vIHNob3J0JztcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPiBMSU1JVClcbiAgICAgICAgICAgIHJldHVybiAnRXhjZWVkcyBsZW5ndGggbGltaXQnO1xuICAgICAgICAvLyBkb24ndCBhbGxvdyBtaXhlZCBjYXNlXG4gICAgICAgIGNvbnN0IGxvd2VyZWQgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdXBwZXJlZCA9IHN0ci50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAoc3RyICE9PSBsb3dlcmVkICYmIHN0ciAhPT0gdXBwZXJlZClcbiAgICAgICAgICAgIHJldHVybiAnTWl4ZWQtY2FzZSBzdHJpbmcgJyArIHN0cjtcbiAgICAgICAgc3RyID0gbG93ZXJlZDtcbiAgICAgICAgY29uc3Qgc3BsaXQgPSBzdHIubGFzdEluZGV4T2YoJzEnKTtcbiAgICAgICAgaWYgKHNwbGl0ID09PSAtMSlcbiAgICAgICAgICAgIHJldHVybiAnTm8gc2VwYXJhdG9yIGNoYXJhY3RlciBmb3IgJyArIHN0cjtcbiAgICAgICAgaWYgKHNwbGl0ID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuICdNaXNzaW5nIHByZWZpeCBmb3IgJyArIHN0cjtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gc3RyLnNsaWNlKDAsIHNwbGl0KTtcbiAgICAgICAgY29uc3Qgd29yZENoYXJzID0gc3RyLnNsaWNlKHNwbGl0ICsgMSk7XG4gICAgICAgIGlmICh3b3JkQ2hhcnMubGVuZ3RoIDwgNilcbiAgICAgICAgICAgIHJldHVybiAnRGF0YSB0b28gc2hvcnQnO1xuICAgICAgICBsZXQgY2hrID0gcHJlZml4Q2hrKHByZWZpeCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2hrID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJldHVybiBjaGs7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZENoYXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gd29yZENoYXJzLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBBTFBIQUJFVF9NQVBbY107XG4gICAgICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiAnVW5rbm93biBjaGFyYWN0ZXIgJyArIGM7XG4gICAgICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gdjtcbiAgICAgICAgICAgIC8vIG5vdCBpbiB0aGUgY2hlY2tzdW0/XG4gICAgICAgICAgICBpZiAoaSArIDYgPj0gd29yZENoYXJzLmxlbmd0aClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHdvcmRzLnB1c2godik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoayAhPT0gRU5DT0RJTkdfQ09OU1QpXG4gICAgICAgICAgICByZXR1cm4gJ0ludmFsaWQgY2hlY2tzdW0gZm9yICcgKyBzdHI7XG4gICAgICAgIHJldHVybiB7IHByZWZpeCwgd29yZHMgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjb2RlVW5zYWZlKHN0ciwgTElNSVQpIHtcbiAgICAgICAgY29uc3QgcmVzID0gX19kZWNvZGUoc3RyLCBMSU1JVCk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZShzdHIsIExJTUlUKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IF9fZGVjb2RlKHN0ciwgTElNSVQpO1xuICAgICAgICBpZiAodHlwZW9mIHJlcyA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVjb2RlVW5zYWZlLFxuICAgICAgICBkZWNvZGUsXG4gICAgICAgIGVuY29kZSxcbiAgICAgICAgdG9Xb3JkcyxcbiAgICAgICAgZnJvbVdvcmRzVW5zYWZlLFxuICAgICAgICBmcm9tV29yZHMsXG4gICAgfTtcbn1cbmV4cG9ydHMuYmVjaDMyID0gZ2V0TGlicmFyeUZyb21FbmNvZGluZygnYmVjaDMyJyk7XG5leHBvcnRzLmJlY2gzMm0gPSBnZXRMaWJyYXJ5RnJvbUVuY29kaW5nKCdiZWNoMzJtJyk7XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiosOmFmdGVyLDpiZWZvcmV7LS10dy1ib3JkZXItc3BhY2luZy14OjA7LS10dy1ib3JkZXItc3BhY2luZy15OjA7LS10dy10cmFuc2xhdGUteDowOy0tdHctdHJhbnNsYXRlLXk6MDstLXR3LXJvdGF0ZTowOy0tdHctc2tldy14OjA7LS10dy1za2V3LXk6MDstLXR3LXNjYWxlLXg6MTstLXR3LXNjYWxlLXk6MTstLXR3LXBhbi14OiA7LS10dy1wYW4teTogOy0tdHctcGluY2gtem9vbTogOy0tdHctc2Nyb2xsLXNuYXAtc3RyaWN0bmVzczpwcm94aW1pdHk7LS10dy1ncmFkaWVudC1mcm9tLXBvc2l0aW9uOiA7LS10dy1ncmFkaWVudC12aWEtcG9zaXRpb246IDstLXR3LWdyYWRpZW50LXRvLXBvc2l0aW9uOiA7LS10dy1vcmRpbmFsOiA7LS10dy1zbGFzaGVkLXplcm86IDstLXR3LW51bWVyaWMtZmlndXJlOiA7LS10dy1udW1lcmljLXNwYWNpbmc6IDstLXR3LW51bWVyaWMtZnJhY3Rpb246IDstLXR3LXJpbmctaW5zZXQ6IDstLXR3LXJpbmctb2Zmc2V0LXdpZHRoOjBweDstLXR3LXJpbmctb2Zmc2V0LWNvbG9yOiNmZmY7LS10dy1yaW5nLWNvbG9yOnJnYmEoNTksMTMwLDI0NiwuNSk7LS10dy1yaW5nLW9mZnNldC1zaGFkb3c6MCAwIHRyYW5zcGFyZW50Oy0tdHctcmluZy1zaGFkb3c6MCAwIHRyYW5zcGFyZW50Oy0tdHctc2hhZG93OjAgMCB0cmFuc3BhcmVudDstLXR3LXNoYWRvdy1jb2xvcmVkOjAgMCB0cmFuc3BhcmVudDstLXR3LWJsdXI6IDstLXR3LWJyaWdodG5lc3M6IDstLXR3LWNvbnRyYXN0OiA7LS10dy1ncmF5c2NhbGU6IDstLXR3LWh1ZS1yb3RhdGU6IDstLXR3LWludmVydDogOy0tdHctc2F0dXJhdGU6IDstLXR3LXNlcGlhOiA7LS10dy1kcm9wLXNoYWRvdzogOy0tdHctYmFja2Ryb3AtYmx1cjogOy0tdHctYmFja2Ryb3AtYnJpZ2h0bmVzczogOy0tdHctYmFja2Ryb3AtY29udHJhc3Q6IDstLXR3LWJhY2tkcm9wLWdyYXlzY2FsZTogOy0tdHctYmFja2Ryb3AtaHVlLXJvdGF0ZTogOy0tdHctYmFja2Ryb3AtaW52ZXJ0OiA7LS10dy1iYWNrZHJvcC1vcGFjaXR5OiA7LS10dy1iYWNrZHJvcC1zYXR1cmF0ZTogOy0tdHctYmFja2Ryb3Atc2VwaWE6IH06OmJhY2tkcm9wey0tdHctYm9yZGVyLXNwYWNpbmcteDowOy0tdHctYm9yZGVyLXNwYWNpbmcteTowOy0tdHctdHJhbnNsYXRlLXg6MDstLXR3LXRyYW5zbGF0ZS15OjA7LS10dy1yb3RhdGU6MDstLXR3LXNrZXcteDowOy0tdHctc2tldy15OjA7LS10dy1zY2FsZS14OjE7LS10dy1zY2FsZS15OjE7LS10dy1wYW4teDogOy0tdHctcGFuLXk6IDstLXR3LXBpbmNoLXpvb206IDstLXR3LXNjcm9sbC1zbmFwLXN0cmljdG5lc3M6cHJveGltaXR5Oy0tdHctZ3JhZGllbnQtZnJvbS1wb3NpdGlvbjogOy0tdHctZ3JhZGllbnQtdmlhLXBvc2l0aW9uOiA7LS10dy1ncmFkaWVudC10by1wb3NpdGlvbjogOy0tdHctb3JkaW5hbDogOy0tdHctc2xhc2hlZC16ZXJvOiA7LS10dy1udW1lcmljLWZpZ3VyZTogOy0tdHctbnVtZXJpYy1zcGFjaW5nOiA7LS10dy1udW1lcmljLWZyYWN0aW9uOiA7LS10dy1yaW5nLWluc2V0OiA7LS10dy1yaW5nLW9mZnNldC13aWR0aDowcHg7LS10dy1yaW5nLW9mZnNldC1jb2xvcjojZmZmOy0tdHctcmluZy1jb2xvcjpyZ2JhKDU5LDEzMCwyNDYsLjUpOy0tdHctcmluZy1vZmZzZXQtc2hhZG93OjAgMCB0cmFuc3BhcmVudDstLXR3LXJpbmctc2hhZG93OjAgMCB0cmFuc3BhcmVudDstLXR3LXNoYWRvdzowIDAgdHJhbnNwYXJlbnQ7LS10dy1zaGFkb3ctY29sb3JlZDowIDAgdHJhbnNwYXJlbnQ7LS10dy1ibHVyOiA7LS10dy1icmlnaHRuZXNzOiA7LS10dy1jb250cmFzdDogOy0tdHctZ3JheXNjYWxlOiA7LS10dy1odWUtcm90YXRlOiA7LS10dy1pbnZlcnQ6IDstLXR3LXNhdHVyYXRlOiA7LS10dy1zZXBpYTogOy0tdHctZHJvcC1zaGFkb3c6IDstLXR3LWJhY2tkcm9wLWJsdXI6IDstLXR3LWJhY2tkcm9wLWJyaWdodG5lc3M6IDstLXR3LWJhY2tkcm9wLWNvbnRyYXN0OiA7LS10dy1iYWNrZHJvcC1ncmF5c2NhbGU6IDstLXR3LWJhY2tkcm9wLWh1ZS1yb3RhdGU6IDstLXR3LWJhY2tkcm9wLWludmVydDogOy0tdHctYmFja2Ryb3Atb3BhY2l0eTogOy0tdHctYmFja2Ryb3Atc2F0dXJhdGU6IDstLXR3LWJhY2tkcm9wLXNlcGlhOiB9Lm5lLXJlbGF0aXZle3Bvc2l0aW9uOnJlbGF0aXZlfS5uZS1ibG9ja3tkaXNwbGF5OmJsb2NrfS5uZS1mbGV4e2Rpc3BsYXk6ZmxleH0ubmUtaGlkZGVue2Rpc3BsYXk6bm9uZX0ubmUtaC0xMntoZWlnaHQ6M3JlbX0ubmUtdy0xMnt3aWR0aDozcmVtfS5uZS13LTV7d2lkdGg6MS4yNXJlbX0ubmUtdy1mdWxse3dpZHRoOjEwMCV9Lm5lLWN1cnNvci1wb2ludGVye2N1cnNvcjpwb2ludGVyfS5uZS1mbGV4LXJvd3tmbGV4LWRpcmVjdGlvbjpyb3d9Lm5lLWZsZXgtY29se2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0ubmUtaXRlbXMtY2VudGVye2FsaWduLWl0ZW1zOmNlbnRlcn0ubmUtanVzdGlmeS1iZXR3ZWVue2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5uZS1nYXAtMXtnYXA6LjI1cmVtfS5uZS1nYXAtMntnYXA6LjVyZW19Lm5lLWdhcC00e2dhcDoxcmVtfS5uZS1icmVhay13b3Jkc3t3b3JkLXdyYXA6YnJlYWstd29yZH0ubmUtcm91bmRlZC1sZ3tib3JkZXItcmFkaXVzOi41cmVtfS5uZS1iZy1cXFxcW1xcXFwjZmNmY2ZjXFxcXF17LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjojZmNmY2ZjO2JhY2tncm91bmQtY29sb3I6cmdiKDI1MiAyNTIgMjUyL3ZhcigtLXR3LWJnLW9wYWNpdHkpKX0ubmUtcHgtNHtwYWRkaW5nLWxlZnQ6MXJlbTtwYWRkaW5nLXJpZ2h0OjFyZW19Lm5lLXB5LTV7cGFkZGluZy1ib3R0b206MS4yNXJlbTtwYWRkaW5nLXRvcDoxLjI1cmVtfS5uZS1wYi0ze3BhZGRpbmctYm90dG9tOi43NXJlbX0ubmUtZm9udC1zYW5ze2ZvbnQtZmFtaWx5OnVpLXNhbnMtc2VyaWYsc3lzdGVtLXVpLC1hcHBsZS1zeXN0ZW0sU2Vnb2UgVUksUm9ib3RvLFVidW50dSxDYW50YXJlbGwsTm90byBTYW5zLHNhbnMtc2VyaWYsQmxpbmtNYWNTeXN0ZW1Gb250LEhlbHZldGljYSBOZXVlLEFyaWFsLEFwcGxlIENvbG9yIEVtb2ppLFNlZ29lIFVJIEVtb2ppLFNlZ29lIFVJIFN5bWJvbCxOb3RvIENvbG9yIEVtb2ppfS5uZS10ZXh0LWxne2ZvbnQtc2l6ZToxLjEyNXJlbTtsaW5lLWhlaWdodDoxLjc1cmVtfS5uZS10ZXh0LWdyYXktOTAwey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6IzExMTgyNztjb2xvcjpyZ2IoMTcgMjQgMzkvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9Lm5lLXRleHQtcmVkLTgwMHstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOiM5OTFiMWI7Y29sb3I6cmdiKDE1MyAyNyAyNy92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0ubmUtbm8tdW5kZXJsaW5le3RleHQtZGVjb3JhdGlvbi1saW5lOm5vbmV9Lm5lLW9wYWNpdHktMzB7b3BhY2l0eTouM30ubm9zdHJFbWJlZENhcmR7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjojZmNmY2ZjO2JhY2tncm91bmQtY29sb3I6cmdiKDI1MiAyNTIgMjUyL3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOi41cmVtO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjJyZW07cGFkZGluZzoxLjI1cmVtIDFyZW0gLjc1cmVtfUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsubm9zdHJFbWJlZENhcmR7bWF4LXdpZHRoOjYwMHB4fX0ubm9zdHJFbWJlZENhcmR7Ym9yZGVyOjFweCBzb2xpZCAjZGRkO2ZvbnQtZmFtaWx5OnVpLXNhbnMtc2VyaWYsc3lzdGVtLXVpLC1hcHBsZS1zeXN0ZW0sU2Vnb2UgVUksUm9ib3RvLFVidW50dSxDYW50YXJlbGwsTm90byBTYW5zLHNhbnMtc2VyaWYsQmxpbmtNYWNTeXN0ZW1Gb250LEhlbHZldGljYSBOZXVlLEFyaWFsLEFwcGxlIENvbG9yIEVtb2ppLFNlZ29lIFVJIEVtb2ppLFNlZ29lIFVJIFN5bWJvbCxOb3RvIENvbG9yIEVtb2ppO3RleHQtYWxpZ246bGVmdH0uY2FyZENvbnRlbnR7d29yZC13cmFwOmJyZWFrLXdvcmQ7Zm9udC1zaXplOjEuMTI1cmVtO2xpbmUtaGVpZ2h0OjEuNzVyZW07d2hpdGUtc3BhY2U6cHJlLWxpbmV9LmNhcmRDb250ZW50TWVkaWF7dGV4dC1hbGlnbjpjZW50ZXJ9LmNhcmRDb250ZW50TWVkaWE+aWZyYW1lLC5jYXJkQ29udGVudE1lZGlhPmltZywuY2FyZENvbnRlbnRNZWRpYT52aWRlb3tib3JkZXItcmFkaXVzOjE1cHg7d2lkdGg6NTAlfS5jYXJkUHJvZmlsZXthbGlnbi1pdGVtczpjZW50ZXI7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztnYXA6MXJlbX0ucHJvZmlsZUltZ3tib3JkZXItcmFkaXVzOjk5OTlweDtoZWlnaHQ6M3JlbTt3aWR0aDozcmVtfS5wcm9maWxlRGV0YWlsc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5wcm9maWxlTmFtZXtmb250LXNpemU6MS4xMjVyZW07Zm9udC13ZWlnaHQ6NzAwO2xpbmUtaGVpZ2h0OjEuNzVyZW19LnByb2ZpbGVOYW1lIGF7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjojMTExODI3O2NvbG9yOnJnYigxNyAyNCAzOS92YXIoLS10dy10ZXh0LW9wYWNpdHkpKTt0ZXh0LWRlY29yYXRpb24tbGluZTpub25lfS5wcm9maWxlTmFtZSBhOmhvdmVyey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6IzRiNTU2Mztjb2xvcjpyZ2IoNzUgODUgOTkvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnByb2ZpbGVQa2V5e2FsaWduLWl0ZW1zOmNlbnRlcjtmbGV4LWRpcmVjdGlvbjpyb3d9LmNhcmRNZXRhLC5wcm9maWxlUGtleXtkaXNwbGF5OmZsZXg7Z2FwOi4yNXJlbX0uY2FyZE1ldGF7ZmxleC1kaXJlY3Rpb246Y29sdW1ufUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsuY2FyZE1ldGF7Z2FwOi41cmVtfX1ocntib3JkZXItY29sb3I6I2RkZDttYXJnaW46LjI1cmVtO29wYWNpdHk6LjM7d2lkdGg6MTAwJX0uY2FyZEludGVyYWN0aW9uc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsuY2FyZEludGVyYWN0aW9uc3tnYXA6Mi41cmVtO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fX0uaW50ZXJhY3Rpb25Db250YWluZXJ7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7Z2FwOi41cmVtfS5jb3B5SWNvbiwuaGVhcnRJY29uLC5saW5rSWNvbiwucmVwbHlJY29uLC5yZXBvc3RJY29ue2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjEuMjVyZW07d2lkdGg6MS4yNXJlbX0uY29weUljb24sLmhlYXJ0SWNvbiwubGlua0NvcHlCdG4sLmxpbmtJY29uLC5saW5rTGluaywucmVwbHlJY29uLC5yZXBvc3RJY29uey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6IzExMTgyNztjb2xvcjpyZ2IoMTcgMjQgMzkvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LmxpbmtDb3B5QnRuLC5saW5rTGlua3thbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6MDtjdXJzb3I6cG9pbnRlcjtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2dhcDouNXJlbTtwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWRlY29yYXRpb24tbGluZTpub25lfS5saW5rQ29weUJ0bjpob3ZlciwubGlua0NvcHlCdG46aG92ZXIgLmNvcHlJY29uLC5saW5rTGluazpob3ZlcnstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOiM0YjU1NjM7Y29sb3I6cmdiKDc1IDg1IDk5L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS5saW5rQ29weUJ0bi5ncmVlbiwubGlua0NvcHlCdG4uZ3JlZW4gLmNvcHlJY29uey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6IzE2YTM0YTtjb2xvcjpyZ2IoMjIgMTYzIDc0L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS5kaXNwbGF5VGV4dHtkaXNwbGF5Om5vbmV9QG1lZGlhIChtaW4td2lkdGg6NzY4cHgpey5kaXNwbGF5VGV4dHtkaXNwbGF5OmZsZXg7Zm9udC1zaXplOi44NzVyZW07bGluZS1oZWlnaHQ6MS4yNXJlbTt2aXNpYmlsaXR5OnZpc2libGV9fS5jb3B5VGV4dHtkaXNwbGF5Om5vbmV9Lm5vc3RyaWNoTGlua3tkaXNwbGF5OmZsZXg7ZmxleC1ncm93OjE7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfS5jYXJkVGl0bGV7bWFyZ2luOjB9LmNhcmREZXNjcmlwdGlvbnttYXJnaW4tdG9wOjB9LmNhcmRMaXN0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjIwcHg7bWFyZ2luLXRvcDoxMHB4fS5wcm9maWxlV2l0aG91dEltZ3tiYWNrZ3JvdW5kLWNvbG9yOiNlOWU5ZTk7Ym9yZGVyLXJhZGl1czo1MCU7aGVpZ2h0OjUwcHg7d2lkdGg6NTBweH0uZGlmZlByb2ZpbGVze2ZvbnQtc2l6ZToxLjJyZW07Zm9udC13ZWlnaHQ6NzAwfUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsubWRcXFxcOm5lLXZpc2libGV7dmlzaWJpbGl0eTp2aXNpYmxlfS5tZFxcXFw6bmUtZmxleHtkaXNwbGF5OmZsZXh9Lm1kXFxcXDpuZS1tYXgtdy1cXFxcWzYwMHB4XFxcXF17bWF4LXdpZHRoOjYwMHB4fS5tZFxcXFw6bmUtanVzdGlmeS1zdGFydHtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvc3R5bGUuY3NzXCIsXCI8bm8gc291cmNlPlwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxpQkFBQSx1QkFBYyxDQUFkLHVCQUFjLENBQWQsa0JBQWMsQ0FBZCxrQkFBYyxDQUFkLGFBQWMsQ0FBZCxhQUFjLENBQWQsYUFBYyxDQUFkLGNBQWMsQ0FBZCxjQUFjLENBQWQsWUFBYyxDQUFkLFlBQWMsQ0FBZCxpQkFBYyxDQUFkLHFDQUFjLENBQWQsNkJBQWMsQ0FBZCw0QkFBYyxDQUFkLDJCQUFjLENBQWQsY0FBYyxDQUFk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Y0FBQSxZQUFjLENBQ2QsV0FBWSxDQUNaLHdCQUZjLENBS2hCLFdBQ0UsUUFDRixDQUVBLGlCQUNFLFlBQ0YsQ0FFQSxVQUNFLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsUUFBUyxDQUNULGVBQ0YsQ0FFQSxtQkFHRSx3QkFBeUIsQ0FDekIsaUJBQWtCLENBRmxCLFdBQVksQ0FEWixVQUlGLENBRUEsY0FFRSxnQkFBaUIsQ0FEakIsZUFFRixDQXRJQSx5QkFBQSxnQkFBQSxtQkNBQSxBREFBLGFBQUEsYUNBQSxBREFBLHdCQUFBLGdCQ0FBLEFEQUEsc0JBQUEsMkJDQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdGFpbHdpbmQgYmFzZTtcXG5AdGFpbHdpbmQgY29tcG9uZW50cztcXG5AdGFpbHdpbmQgdXRpbGl0aWVzO1xcblxcbi5ub3N0ckVtYmVkQ2FyZCB7XFxuICBAYXBwbHkgbmUtcHgtNCBuZS1weS01IG5lLXBiLTMgbmUtYmctWyNmY2ZjZmNdIG5lLXJvdW5kZWQtbGcgbWQ6bmUtbWF4LXctWzYwMHB4XSBuZS1mbGV4IG5lLWZsZXgtY29sIG5lLWdhcC04O1xcbiAgQGFwcGx5IG5lLWZvbnQtc2FucyBuZS10ZXh0LWxlZnQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xcbn1cXG5cXG4uY2FyZENvbnRlbnQge1xcbiAgQGFwcGx5IG5lLXRleHQtbGcgbmUtYnJlYWstd29yZHMgbmUtd2hpdGVzcGFjZS1wcmUtbGluZTtcXG59XFxuXFxuLmNhcmRDb250ZW50TWVkaWEge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uY2FyZENvbnRlbnRNZWRpYSA+IHZpZGVvLFxcbi5jYXJkQ29udGVudE1lZGlhID4gaW1nLFxcbi5jYXJkQ29udGVudE1lZGlhID4gaWZyYW1lIHtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICB3aWR0aDogNTAlO1xcbn1cXG5cXG4uY2FyZFByb2ZpbGUge1xcbiAgQGFwcGx5IG5lLWZsZXggbmUtZmxleC1yb3cgbmUtZ2FwLTQgbmUtaXRlbXMtY2VudGVyO1xcbn1cXG5cXG4ucHJvZmlsZUltZyB7XFxuICBAYXBwbHkgbmUtdy0xMiBuZS1oLTEyIG5lLXJvdW5kZWQtZnVsbDtcXG59XFxuXFxuLnByb2ZpbGVEZXRhaWxzIHtcXG4gIEBhcHBseSBuZS1mbGV4IG5lLWZsZXgtY29sO1xcbn1cXG5cXG4ucHJvZmlsZU5hbWUge1xcbiAgQGFwcGx5IG5lLXRleHQtbGcgbmUtZm9udC1ib2xkO1xcbn1cXG5cXG4ucHJvZmlsZU5hbWUgYSB7XFxuICBAYXBwbHkgbmUtbm8tdW5kZXJsaW5lIG5lLXRleHQtZ3JheS05MDA7XFxufVxcbi5wcm9maWxlTmFtZSBhOmhvdmVyIHtcXG4gIEBhcHBseSBuZS10ZXh0LWdyYXktNjAwO1xcbn1cXG5cXG4ucHJvZmlsZVBrZXkge1xcbiAgQGFwcGx5IG5lLWZsZXggbmUtZmxleC1yb3cgbmUtZ2FwLTEgbmUtaXRlbXMtY2VudGVyO1xcbn1cXG5cXG4uY2FyZE1ldGEge1xcbiAgQGFwcGx5IG5lLWZsZXggbmUtZmxleC1jb2wgbmUtZ2FwLTEgbWQ6bmUtZ2FwLTI7XFxufVxcblxcbmhyIHtcXG4gIEBhcHBseSBuZS13LWZ1bGwgbmUtb3BhY2l0eS0zMCBuZS1tLTE7XFxuICBib3JkZXItY29sb3I6ICNkZGQ7XFxufVxcblxcbi5jYXJkSW50ZXJhY3Rpb25zIHtcXG4gIEBhcHBseSBuZS1mbGV4IG5lLWZsZXgtcm93IG5lLWp1c3RpZnktYmV0d2VlbiBtZDpuZS1qdXN0aWZ5LXN0YXJ0IG1kOm5lLWdhcC0xMDtcXG59XFxuXFxuLmludGVyYWN0aW9uQ29udGFpbmVyIHtcXG4gIEBhcHBseSBuZS1mbGV4IG5lLWZsZXgtcm93IG5lLWl0ZW1zLWNlbnRlciBuZS1nYXAtMjtcXG59XFxuXFxuLnJlcGx5SWNvbixcXG4ucmVwb3N0SWNvbixcXG4uaGVhcnRJY29uLFxcbi5saW5rSWNvbixcXG4uY29weUljb24ge1xcbiAgQGFwcGx5IG5lLXRleHQtZ3JheS05MDAgbmUtYmxvY2sgbmUtdy01IG5lLWgtNTtcXG59XFxuXFxuLmxpbmtDb3B5QnRuLFxcbi5saW5rTGluayB7XFxuICBAYXBwbHkgbmUtdGV4dC1ncmF5LTkwMCBuZS1uby11bmRlcmxpbmUgbmUtZmxleCBuZS1mbGV4LXJvdyBuZS1pdGVtcy1jZW50ZXIgbmUtZ2FwLTIgbmUtY3Vyc29yLXBvaW50ZXIgbmUtcmVsYXRpdmU7XFxuICBib3JkZXI6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmxpbmtDb3B5QnRuOmhvdmVyLFxcbi5saW5rTGluazpob3ZlcixcXG4ubGlua0NvcHlCdG46aG92ZXIgLmNvcHlJY29uIHtcXG4gIEBhcHBseSBuZS10ZXh0LWdyYXktNjAwO1xcbn1cXG5cXG4ubGlua0NvcHlCdG4uZ3JlZW4sXFxuLmxpbmtDb3B5QnRuLmdyZWVuIC5jb3B5SWNvbiB7XFxuICBAYXBwbHkgbmUtdGV4dC1ncmVlbi02MDA7XFxufVxcblxcbi5kaXNwbGF5VGV4dCB7XFxuICBAYXBwbHkgbmUtaGlkZGVuIG1kOm5lLWZsZXggbWQ6bmUtdmlzaWJsZSBtZDpuZS10ZXh0LXNtO1xcbn1cXG5cXG4uY29weVRleHQge1xcbiAgQGFwcGx5IG5lLWhpZGRlbjtcXG59XFxuXFxuLm5vc3RyaWNoTGluayB7XFxuICBAYXBwbHkgbmUtZmxleDtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcblxcbi5jYXJkVGl0bGUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uY2FyZERlc2NyaXB0aW9uIHtcXG4gIG1hcmdpbi10b3A6IDA7XFxufVxcblxcbi5jYXJkTGlzdCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMjBweDtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblxcbi5wcm9maWxlV2l0aG91dEltZyB7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWU5ZTk7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxufVxcblxcbi5kaWZmUHJvZmlsZXMge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG59XFxuXCIsbnVsbF0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsImNvbnN0IHtiZWNoMzIsIGhleCwgdXRmOH0gPSByZXF1aXJlKCdAc2N1cmUvYmFzZScpXG5cbi8vIGRlZmF1bHRzIGZvciBlbmNvZGU7IGRlZmF1bHQgdGltZXN0YW1wIGlzIGN1cnJlbnQgdGltZSBhdCBjYWxsXG5jb25zdCBERUZBVUxUTkVUV09SSyA9IHtcbiAgLy8gZGVmYXVsdCBuZXR3b3JrIGlzIGJpdGNvaW5cbiAgYmVjaDMyOiAnYmMnLFxuICBwdWJLZXlIYXNoOiAweDAwLFxuICBzY3JpcHRIYXNoOiAweDA1LFxuICB2YWxpZFdpdG5lc3NWZXJzaW9uczogWzBdXG59XG5jb25zdCBURVNUTkVUV09SSyA9IHtcbiAgYmVjaDMyOiAndGInLFxuICBwdWJLZXlIYXNoOiAweDZmLFxuICBzY3JpcHRIYXNoOiAweGM0LFxuICB2YWxpZFdpdG5lc3NWZXJzaW9uczogWzBdXG59XG5jb25zdCBSRUdURVNUTkVUV09SSyA9IHtcbiAgYmVjaDMyOiAnYmNydCcsXG4gIHB1YktleUhhc2g6IDB4NmYsXG4gIHNjcmlwdEhhc2g6IDB4YzQsXG4gIHZhbGlkV2l0bmVzc1ZlcnNpb25zOiBbMF1cbn1cbmNvbnN0IFNJTU5FVFdPUksgPSB7XG4gIGJlY2gzMjogJ3NiJyxcbiAgcHViS2V5SGFzaDogMHgzZixcbiAgc2NyaXB0SGFzaDogMHg3YixcbiAgdmFsaWRXaXRuZXNzVmVyc2lvbnM6IFswXVxufVxuXG5jb25zdCBGRUFUVVJFQklUX09SREVSID0gW1xuICAnb3B0aW9uX2RhdGFfbG9zc19wcm90ZWN0JyxcbiAgJ2luaXRpYWxfcm91dGluZ19zeW5jJyxcbiAgJ29wdGlvbl91cGZyb250X3NodXRkb3duX3NjcmlwdCcsXG4gICdnb3NzaXBfcXVlcmllcycsXG4gICd2YXJfb25pb25fb3B0aW4nLFxuICAnZ29zc2lwX3F1ZXJpZXNfZXgnLFxuICAnb3B0aW9uX3N0YXRpY19yZW1vdGVrZXknLFxuICAncGF5bWVudF9zZWNyZXQnLFxuICAnYmFzaWNfbXBwJyxcbiAgJ29wdGlvbl9zdXBwb3J0X2xhcmdlX2NoYW5uZWwnXG5dXG5cbmNvbnN0IERJVklTT1JTID0ge1xuICBtOiBCaWdJbnQoMWUzKSxcbiAgdTogQmlnSW50KDFlNiksXG4gIG46IEJpZ0ludCgxZTkpLFxuICBwOiBCaWdJbnQoMWUxMilcbn1cblxuY29uc3QgTUFYX01JTExJU0FUUyA9IEJpZ0ludCgnMjEwMDAwMDAwMDAwMDAwMDAwMCcpXG5cbmNvbnN0IE1JTExJU0FUU19QRVJfQlRDID0gQmlnSW50KDFlMTEpXG5cbmNvbnN0IFRBR0NPREVTID0ge1xuICBwYXltZW50X2hhc2g6IDEsXG4gIHBheW1lbnRfc2VjcmV0OiAxNixcbiAgZGVzY3JpcHRpb246IDEzLFxuICBwYXllZTogMTksXG4gIGRlc2NyaXB0aW9uX2hhc2g6IDIzLCAvLyBjb21taXQgdG8gbG9uZ2VyIGRlc2NyaXB0aW9ucyAodXNlZCBieSBsbnVybC1wYXkpXG4gIGV4cGlyeTogNiwgLy8gZGVmYXVsdDogMzYwMCAoMSBob3VyKVxuICBtaW5fZmluYWxfY2x0dl9leHBpcnk6IDI0LCAvLyBkZWZhdWx0OiA5XG4gIGZhbGxiYWNrX2FkZHJlc3M6IDksXG4gIHJvdXRlX2hpbnQ6IDMsIC8vIGZvciBleHRyYSByb3V0aW5nIGluZm8gKHByaXZhdGUgZXRjLilcbiAgZmVhdHVyZV9iaXRzOiA1LFxuICBtZXRhZGF0YTogMjdcbn1cblxuLy8gcmV2ZXJzZSB0aGUga2V5cyBhbmQgdmFsdWVzIG9mIFRBR0NPREVTIGFuZCBpbnNlcnQgaW50byBUQUdOQU1FU1xuY29uc3QgVEFHTkFNRVMgPSB7fVxuZm9yIChsZXQgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhUQUdDT0RFUyk7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gIGNvbnN0IGN1cnJlbnROYW1lID0ga2V5c1tpXVxuICBjb25zdCBjdXJyZW50Q29kZSA9IFRBR0NPREVTW2tleXNbaV1dLnRvU3RyaW5nKClcbiAgVEFHTkFNRVNbY3VycmVudENvZGVdID0gY3VycmVudE5hbWVcbn1cblxuY29uc3QgVEFHUEFSU0VSUyA9IHtcbiAgMTogd29yZHMgPT4gaGV4LmVuY29kZShiZWNoMzIuZnJvbVdvcmRzVW5zYWZlKHdvcmRzKSksIC8vIDI1NiBiaXRzXG4gIDE2OiB3b3JkcyA9PiBoZXguZW5jb2RlKGJlY2gzMi5mcm9tV29yZHNVbnNhZmUod29yZHMpKSwgLy8gMjU2IGJpdHNcbiAgMTM6IHdvcmRzID0+IHV0ZjguZW5jb2RlKGJlY2gzMi5mcm9tV29yZHNVbnNhZmUod29yZHMpKSwgLy8gc3RyaW5nIHZhcmlhYmxlIGxlbmd0aFxuICAxOTogd29yZHMgPT4gaGV4LmVuY29kZShiZWNoMzIuZnJvbVdvcmRzVW5zYWZlKHdvcmRzKSksIC8vIDI2NCBiaXRzXG4gIDIzOiB3b3JkcyA9PiBoZXguZW5jb2RlKGJlY2gzMi5mcm9tV29yZHNVbnNhZmUod29yZHMpKSwgLy8gMjU2IGJpdHNcbiAgMjc6IHdvcmRzID0+IGhleC5lbmNvZGUoYmVjaDMyLmZyb21Xb3Jkc1Vuc2FmZSh3b3JkcykpLCAvLyB2YXJpYWJsZVxuICA2OiB3b3Jkc1RvSW50QkUsIC8vIGRlZmF1bHQ6IDM2MDAgKDEgaG91cilcbiAgMjQ6IHdvcmRzVG9JbnRCRSwgLy8gZGVmYXVsdDogOVxuICAzOiByb3V0aW5nSW5mb1BhcnNlciwgLy8gZm9yIGV4dHJhIHJvdXRpbmcgaW5mbyAocHJpdmF0ZSBldGMuKVxuICA1OiBmZWF0dXJlQml0c1BhcnNlciAvLyBrZWVwIGZlYXR1cmUgYml0cyBhcyBhcnJheSBvZiA1IGJpdCB3b3Jkc1xufVxuXG5mdW5jdGlvbiBnZXRVbmtub3duUGFyc2VyKHRhZ0NvZGUpIHtcbiAgcmV0dXJuIHdvcmRzID0+ICh7XG4gICAgdGFnQ29kZTogcGFyc2VJbnQodGFnQ29kZSksXG4gICAgd29yZHM6IGJlY2gzMi5lbmNvZGUoJ3Vua25vd24nLCB3b3JkcywgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHdvcmRzVG9JbnRCRSh3b3Jkcykge1xuICByZXR1cm4gd29yZHMucmV2ZXJzZSgpLnJlZHVjZSgodG90YWwsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIHRvdGFsICsgaXRlbSAqIE1hdGgucG93KDMyLCBpbmRleClcbiAgfSwgMClcbn1cblxuLy8gZmlyc3QgY29udmVydCBmcm9tIHdvcmRzIHRvIGJ1ZmZlciwgdHJpbW1pbmcgcGFkZGluZyB3aGVyZSBuZWNlc3Nhcnlcbi8vIHBhcnNlIGluIDUxIGJ5dGUgY2h1bmtzLiBTZWUgZW5jb2RlciBmb3IgZGV0YWlscy5cbmZ1bmN0aW9uIHJvdXRpbmdJbmZvUGFyc2VyKHdvcmRzKSB7XG4gIGNvbnN0IHJvdXRlcyA9IFtdXG4gIGxldCBwdWJrZXksXG4gICAgc2hvcnRDaGFubmVsSWQsXG4gICAgZmVlQmFzZU1TYXRzLFxuICAgIGZlZVByb3BvcnRpb25hbE1pbGxpb250aHMsXG4gICAgY2x0dkV4cGlyeURlbHRhXG4gIGxldCByb3V0ZXNCdWZmZXIgPSBiZWNoMzIuZnJvbVdvcmRzVW5zYWZlKHdvcmRzKVxuICB3aGlsZSAocm91dGVzQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICBwdWJrZXkgPSBoZXguZW5jb2RlKHJvdXRlc0J1ZmZlci5zbGljZSgwLCAzMykpIC8vIDMzIGJ5dGVzXG4gICAgc2hvcnRDaGFubmVsSWQgPSBoZXguZW5jb2RlKHJvdXRlc0J1ZmZlci5zbGljZSgzMywgNDEpKSAvLyA4IGJ5dGVzXG4gICAgZmVlQmFzZU1TYXRzID0gcGFyc2VJbnQoaGV4LmVuY29kZShyb3V0ZXNCdWZmZXIuc2xpY2UoNDEsIDQ1KSksIDE2KSAvLyA0IGJ5dGVzXG4gICAgZmVlUHJvcG9ydGlvbmFsTWlsbGlvbnRocyA9IHBhcnNlSW50KFxuICAgICAgaGV4LmVuY29kZShyb3V0ZXNCdWZmZXIuc2xpY2UoNDUsIDQ5KSksXG4gICAgICAxNlxuICAgICkgLy8gNCBieXRlc1xuICAgIGNsdHZFeHBpcnlEZWx0YSA9IHBhcnNlSW50KGhleC5lbmNvZGUocm91dGVzQnVmZmVyLnNsaWNlKDQ5LCA1MSkpLCAxNikgLy8gMiBieXRlc1xuXG4gICAgcm91dGVzQnVmZmVyID0gcm91dGVzQnVmZmVyLnNsaWNlKDUxKVxuXG4gICAgcm91dGVzLnB1c2goe1xuICAgICAgcHVia2V5LFxuICAgICAgc2hvcnRfY2hhbm5lbF9pZDogc2hvcnRDaGFubmVsSWQsXG4gICAgICBmZWVfYmFzZV9tc2F0OiBmZWVCYXNlTVNhdHMsXG4gICAgICBmZWVfcHJvcG9ydGlvbmFsX21pbGxpb250aHM6IGZlZVByb3BvcnRpb25hbE1pbGxpb250aHMsXG4gICAgICBjbHR2X2V4cGlyeV9kZWx0YTogY2x0dkV4cGlyeURlbHRhXG4gICAgfSlcbiAgfVxuICByZXR1cm4gcm91dGVzXG59XG5cbmZ1bmN0aW9uIGZlYXR1cmVCaXRzUGFyc2VyKHdvcmRzKSB7XG4gIGNvbnN0IGJvb2xzID0gd29yZHNcbiAgICAuc2xpY2UoKVxuICAgIC5yZXZlcnNlKClcbiAgICAubWFwKHdvcmQgPT4gW1xuICAgICAgISEod29yZCAmIDBiMSksXG4gICAgICAhISh3b3JkICYgMGIxMCksXG4gICAgICAhISh3b3JkICYgMGIxMDApLFxuICAgICAgISEod29yZCAmIDBiMTAwMCksXG4gICAgICAhISh3b3JkICYgMGIxMDAwMClcbiAgICBdKVxuICAgIC5yZWR1Y2UoKGZpbmFsQXJyLCBpdGVtQXJyKSA9PiBmaW5hbEFyci5jb25jYXQoaXRlbUFyciksIFtdKVxuICB3aGlsZSAoYm9vbHMubGVuZ3RoIDwgRkVBVFVSRUJJVF9PUkRFUi5sZW5ndGggKiAyKSB7XG4gICAgYm9vbHMucHVzaChmYWxzZSlcbiAgfVxuXG4gIGNvbnN0IGZlYXR1cmVCaXRzID0ge31cblxuICBGRUFUVVJFQklUX09SREVSLmZvckVhY2goKGZlYXR1cmVOYW1lLCBpbmRleCkgPT4ge1xuICAgIGxldCBzdGF0dXNcbiAgICBpZiAoYm9vbHNbaW5kZXggKiAyXSkge1xuICAgICAgc3RhdHVzID0gJ3JlcXVpcmVkJ1xuICAgIH0gZWxzZSBpZiAoYm9vbHNbaW5kZXggKiAyICsgMV0pIHtcbiAgICAgIHN0YXR1cyA9ICdzdXBwb3J0ZWQnXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXR1cyA9ICd1bnN1cHBvcnRlZCdcbiAgICB9XG4gICAgZmVhdHVyZUJpdHNbZmVhdHVyZU5hbWVdID0gc3RhdHVzXG4gIH0pXG5cbiAgY29uc3QgZXh0cmFCaXRzID0gYm9vbHMuc2xpY2UoRkVBVFVSRUJJVF9PUkRFUi5sZW5ndGggKiAyKVxuICBmZWF0dXJlQml0cy5leHRyYV9iaXRzID0ge1xuICAgIHN0YXJ0X2JpdDogRkVBVFVSRUJJVF9PUkRFUi5sZW5ndGggKiAyLFxuICAgIGJpdHM6IGV4dHJhQml0cyxcbiAgICBoYXNfcmVxdWlyZWQ6IGV4dHJhQml0cy5yZWR1Y2UoXG4gICAgICAocmVzdWx0LCBiaXQsIGluZGV4KSA9PlxuICAgICAgICBpbmRleCAlIDIgIT09IDAgPyByZXN1bHQgfHwgZmFsc2UgOiByZXN1bHQgfHwgYml0LFxuICAgICAgZmFsc2VcbiAgICApXG4gIH1cblxuICByZXR1cm4gZmVhdHVyZUJpdHNcbn1cblxuZnVuY3Rpb24gaHJwVG9NaWxsaXNhdChocnBTdHJpbmcsIG91dHB1dFN0cmluZykge1xuICBsZXQgZGl2aXNvciwgdmFsdWVcbiAgaWYgKGhycFN0cmluZy5zbGljZSgtMSkubWF0Y2goL15bbXVucF0kLykpIHtcbiAgICBkaXZpc29yID0gaHJwU3RyaW5nLnNsaWNlKC0xKVxuICAgIHZhbHVlID0gaHJwU3RyaW5nLnNsaWNlKDAsIC0xKVxuICB9IGVsc2UgaWYgKGhycFN0cmluZy5zbGljZSgtMSkubWF0Y2goL15bXm11bnAwLTldJC8pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSB2YWxpZCBtdWx0aXBsaWVyIGZvciB0aGUgYW1vdW50JylcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGhycFN0cmluZ1xuICB9XG5cbiAgaWYgKCF2YWx1ZS5tYXRjaCgvXlxcZCskLykpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSB2YWxpZCBodW1hbiByZWFkYWJsZSBhbW91bnQnKVxuXG4gIGNvbnN0IHZhbHVlQk4gPSBCaWdJbnQodmFsdWUpXG5cbiAgY29uc3QgbWlsbGlzYXRvc2hpc0JOID0gZGl2aXNvclxuICAgID8gKHZhbHVlQk4gKiBNSUxMSVNBVFNfUEVSX0JUQykgLyBESVZJU09SU1tkaXZpc29yXVxuICAgIDogdmFsdWVCTiAqIE1JTExJU0FUU19QRVJfQlRDXG5cbiAgaWYgKFxuICAgIChkaXZpc29yID09PSAncCcgJiYgISh2YWx1ZUJOICUgQmlnSW50KDEwKSA9PT0gQmlnSW50KDApKSkgfHxcbiAgICBtaWxsaXNhdG9zaGlzQk4gPiBNQVhfTUlMTElTQVRTXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcignQW1vdW50IGlzIG91dHNpZGUgb2YgdmFsaWQgcmFuZ2UnKVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFN0cmluZyA/IG1pbGxpc2F0b3NoaXNCTi50b1N0cmluZygpIDogbWlsbGlzYXRvc2hpc0JOXG59XG5cbi8vIGRlY29kZSB3aWxsIG9ubHkgaGF2ZSBleHRyYSBjb21tZW50cyB0aGF0IGFyZW4ndCBjb3ZlcmVkIGluIGVuY29kZSBjb21tZW50cy5cbi8vIGFsc28gaWYgYW55dGhpbmcgaXMgaGFyZCB0byByZWFkIEknbGwgY29tbWVudC5cbmZ1bmN0aW9uIGRlY29kZShwYXltZW50UmVxdWVzdCwgbmV0d29yaykge1xuICBpZiAodHlwZW9mIHBheW1lbnRSZXF1ZXN0ICE9PSAnc3RyaW5nJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xpZ2h0bmluZyBQYXltZW50IFJlcXVlc3QgbXVzdCBiZSBzdHJpbmcnKVxuICBpZiAocGF5bWVudFJlcXVlc3Quc2xpY2UoMCwgMikudG9Mb3dlckNhc2UoKSAhPT0gJ2xuJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIHByb3BlciBsaWdodG5pbmcgcGF5bWVudCByZXF1ZXN0JylcblxuICBjb25zdCBzZWN0aW9ucyA9IFtdXG4gIGNvbnN0IGRlY29kZWQgPSBiZWNoMzIuZGVjb2RlKHBheW1lbnRSZXF1ZXN0LCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUilcbiAgcGF5bWVudFJlcXVlc3QgPSBwYXltZW50UmVxdWVzdC50b0xvd2VyQ2FzZSgpXG4gIGNvbnN0IHByZWZpeCA9IGRlY29kZWQucHJlZml4XG4gIGxldCB3b3JkcyA9IGRlY29kZWQud29yZHNcbiAgbGV0IGxldHRlcnMgPSBwYXltZW50UmVxdWVzdC5zbGljZShwcmVmaXgubGVuZ3RoICsgMSlcbiAgbGV0IHNpZ1dvcmRzID0gd29yZHMuc2xpY2UoLTEwNClcbiAgd29yZHMgPSB3b3Jkcy5zbGljZSgwLCAtMTA0KVxuXG4gIC8vIFdpdGhvdXQgcmV2ZXJzZSBsb29rdXBzLCBjYW4ndCBzYXkgdGhhdCB0aGUgbXVsdGlwaWVyIGF0IHRoZSBlbmQgbXVzdFxuICAvLyBoYXZlIGEgbnVtYmVyIGJlZm9yZSBpdCwgc28gaW5zdGVhZCB3ZSBwYXJzZSwgYW5kIGlmIHRoZSBzZWNvbmQgZ3JvdXBcbiAgLy8gZG9lc24ndCBoYXZlIGFueXRoaW5nLCB0aGVyZSdzIGEgZ29vZCBjaGFuY2UgdGhlIGxhc3QgbGV0dGVyIG9mIHRoZVxuICAvLyBjb2luIHR5cGUgZ290IGNhcHR1cmVkIGJ5IHRoZSB0aGlyZCBncm91cCwgc28ganVzdCByZS1yZWdleCB3aXRob3V0XG4gIC8vIHRoZSBudW1iZXIuXG4gIGxldCBwcmVmaXhNYXRjaGVzID0gcHJlZml4Lm1hdGNoKC9ebG4oXFxTKz8pKFxcZCopKFthLXpBLVpdPykkLylcbiAgaWYgKHByZWZpeE1hdGNoZXMgJiYgIXByZWZpeE1hdGNoZXNbMl0pXG4gICAgcHJlZml4TWF0Y2hlcyA9IHByZWZpeC5tYXRjaCgvXmxuKFxcUyspJC8pXG4gIGlmICghcHJlZml4TWF0Y2hlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgcHJvcGVyIGxpZ2h0bmluZyBwYXltZW50IHJlcXVlc3QnKVxuICB9XG5cbiAgLy8gXCJsblwiIHNlY3Rpb25cbiAgc2VjdGlvbnMucHVzaCh7XG4gICAgbmFtZTogJ2xpZ2h0bmluZ19uZXR3b3JrJyxcbiAgICBsZXR0ZXJzOiAnbG4nXG4gIH0pXG5cbiAgLy8gXCJiY1wiIHNlY3Rpb25cbiAgY29uc3QgYmVjaDMyUHJlZml4ID0gcHJlZml4TWF0Y2hlc1sxXVxuICBsZXQgY29pbk5ldHdvcmtcbiAgaWYgKCFuZXR3b3JrKSB7XG4gICAgc3dpdGNoIChiZWNoMzJQcmVmaXgpIHtcbiAgICAgIGNhc2UgREVGQVVMVE5FVFdPUksuYmVjaDMyOlxuICAgICAgICBjb2luTmV0d29yayA9IERFRkFVTFRORVRXT1JLXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFRFU1RORVRXT1JLLmJlY2gzMjpcbiAgICAgICAgY29pbk5ldHdvcmsgPSBURVNUTkVUV09SS1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBSRUdURVNUTkVUV09SSy5iZWNoMzI6XG4gICAgICAgIGNvaW5OZXR3b3JrID0gUkVHVEVTVE5FVFdPUktcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgU0lNTkVUV09SSy5iZWNoMzI6XG4gICAgICAgIGNvaW5OZXR3b3JrID0gU0lNTkVUV09SS1xuICAgICAgICBicmVha1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoXG4gICAgICBuZXR3b3JrLmJlY2gzMiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBuZXR3b3JrLnB1YktleUhhc2ggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgbmV0d29yay5zY3JpcHRIYXNoID09PSB1bmRlZmluZWQgfHxcbiAgICAgICFBcnJheS5pc0FycmF5KG5ldHdvcmsudmFsaWRXaXRuZXNzVmVyc2lvbnMpXG4gICAgKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG5ldHdvcmsnKVxuICAgIGNvaW5OZXR3b3JrID0gbmV0d29ya1xuICB9XG4gIGlmICghY29pbk5ldHdvcmsgfHwgY29pbk5ldHdvcmsuYmVjaDMyICE9PSBiZWNoMzJQcmVmaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29pbiBiZWNoMzIgcHJlZml4JylcbiAgfVxuICBzZWN0aW9ucy5wdXNoKHtcbiAgICBuYW1lOiAnY29pbl9uZXR3b3JrJyxcbiAgICBsZXR0ZXJzOiBiZWNoMzJQcmVmaXgsXG4gICAgdmFsdWU6IGNvaW5OZXR3b3JrXG4gIH0pXG5cbiAgLy8gYW1vdW50IHNlY3Rpb25cbiAgY29uc3QgdmFsdWUgPSBwcmVmaXhNYXRjaGVzWzJdXG4gIGxldCBtaWxsaXNhdG9zaGlzXG4gIGlmICh2YWx1ZSkge1xuICAgIGNvbnN0IGRpdmlzb3IgPSBwcmVmaXhNYXRjaGVzWzNdXG4gICAgbWlsbGlzYXRvc2hpcyA9IGhycFRvTWlsbGlzYXQodmFsdWUgKyBkaXZpc29yLCB0cnVlKVxuICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgbmFtZTogJ2Ftb3VudCcsXG4gICAgICBsZXR0ZXJzOiBwcmVmaXhNYXRjaGVzWzJdICsgcHJlZml4TWF0Y2hlc1szXSxcbiAgICAgIHZhbHVlOiBtaWxsaXNhdG9zaGlzXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICBtaWxsaXNhdG9zaGlzID0gbnVsbFxuICB9XG5cbiAgLy8gXCIxXCIgc2VwYXJhdG9yXG4gIHNlY3Rpb25zLnB1c2goe1xuICAgIG5hbWU6ICdzZXBhcmF0b3InLFxuICAgIGxldHRlcnM6ICcxJ1xuICB9KVxuXG4gIC8vIHRpbWVzdGFtcFxuICBjb25zdCB0aW1lc3RhbXAgPSB3b3Jkc1RvSW50QkUod29yZHMuc2xpY2UoMCwgNykpXG4gIHdvcmRzID0gd29yZHMuc2xpY2UoNykgLy8gdHJpbSBvZmYgdGhlIGxlZnQgNyB3b3Jkc1xuICBzZWN0aW9ucy5wdXNoKHtcbiAgICBuYW1lOiAndGltZXN0YW1wJyxcbiAgICBsZXR0ZXJzOiBsZXR0ZXJzLnNsaWNlKDAsIDcpLFxuICAgIHZhbHVlOiB0aW1lc3RhbXBcbiAgfSlcbiAgbGV0dGVycyA9IGxldHRlcnMuc2xpY2UoNylcblxuICBsZXQgdGFnTmFtZSwgcGFyc2VyLCB0YWdMZW5ndGgsIHRhZ1dvcmRzXG4gIC8vIHdlIGhhdmUgbm8gdGFnIGNvdW50IHRvIGdvIG9uLCBzbyBqdXN0IGtlZXAgaGFja2luZyBvZmYgd29yZHNcbiAgLy8gdW50aWwgd2UgaGF2ZSBub25lLlxuICB3aGlsZSAod29yZHMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHRhZ0NvZGUgPSB3b3Jkc1swXS50b1N0cmluZygpXG4gICAgdGFnTmFtZSA9IFRBR05BTUVTW3RhZ0NvZGVdIHx8ICd1bmtub3duX3RhZydcbiAgICBwYXJzZXIgPSBUQUdQQVJTRVJTW3RhZ0NvZGVdIHx8IGdldFVua25vd25QYXJzZXIodGFnQ29kZSlcbiAgICB3b3JkcyA9IHdvcmRzLnNsaWNlKDEpXG5cbiAgICB0YWdMZW5ndGggPSB3b3Jkc1RvSW50QkUod29yZHMuc2xpY2UoMCwgMikpXG4gICAgd29yZHMgPSB3b3Jkcy5zbGljZSgyKVxuXG4gICAgdGFnV29yZHMgPSB3b3Jkcy5zbGljZSgwLCB0YWdMZW5ndGgpXG4gICAgd29yZHMgPSB3b3Jkcy5zbGljZSh0YWdMZW5ndGgpXG5cbiAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgIG5hbWU6IHRhZ05hbWUsXG4gICAgICB0YWc6IGxldHRlcnNbMF0sXG4gICAgICBsZXR0ZXJzOiBsZXR0ZXJzLnNsaWNlKDAsIDEgKyAyICsgdGFnTGVuZ3RoKSxcbiAgICAgIHZhbHVlOiBwYXJzZXIodGFnV29yZHMpIC8vIHNlZTogcGFyc2VycyBmb3IgbW9yZSBjb21tZW50c1xuICAgIH0pXG4gICAgbGV0dGVycyA9IGxldHRlcnMuc2xpY2UoMSArIDIgKyB0YWdMZW5ndGgpXG4gIH1cblxuICAvLyBzaWduYXR1cmVcbiAgc2VjdGlvbnMucHVzaCh7XG4gICAgbmFtZTogJ3NpZ25hdHVyZScsXG4gICAgbGV0dGVyczogbGV0dGVycy5zbGljZSgwLCAxMDQpLFxuICAgIHZhbHVlOiBoZXguZW5jb2RlKGJlY2gzMi5mcm9tV29yZHNVbnNhZmUoc2lnV29yZHMpKVxuICB9KVxuICBsZXR0ZXJzID0gbGV0dGVycy5zbGljZSgxMDQpXG5cbiAgLy8gY2hlY2tzdW1cbiAgc2VjdGlvbnMucHVzaCh7XG4gICAgbmFtZTogJ2NoZWNrc3VtJyxcbiAgICBsZXR0ZXJzOiBsZXR0ZXJzXG4gIH0pXG5cbiAgbGV0IHJlc3VsdCA9IHtcbiAgICBwYXltZW50UmVxdWVzdCxcbiAgICBzZWN0aW9ucyxcblxuICAgIGdldCBleHBpcnkoKSB7XG4gICAgICBsZXQgZXhwID0gc2VjdGlvbnMuZmluZChzID0+IHMubmFtZSA9PT0gJ2V4cGlyeScpXG4gICAgICBpZiAoZXhwKSByZXR1cm4gZ2V0VmFsdWUoJ3RpbWVzdGFtcCcpICsgZXhwLnZhbHVlXG4gICAgfSxcblxuICAgIGdldCByb3V0ZV9oaW50cygpIHtcbiAgICAgIHJldHVybiBzZWN0aW9ucy5maWx0ZXIocyA9PiBzLm5hbWUgPT09ICdyb3V0ZV9oaW50JykubWFwKHMgPT4gcy52YWx1ZSlcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBuYW1lIGluIFRBR0NPREVTKSB7XG4gICAgaWYgKG5hbWUgPT09ICdyb3V0ZV9oaW50Jykge1xuICAgICAgLy8gcm91dGUgaGludHMgY2FuIGJlIG11bHRpcGxlLCBzbyB0aGlzIHdvbid0IHdvcmsgZm9yIHRoZW1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCwgbmFtZSwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gZ2V0VmFsdWUobmFtZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxuXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG5hbWUpIHtcbiAgICBsZXQgc2VjdGlvbiA9IHNlY3Rpb25zLmZpbmQocyA9PiBzLm5hbWUgPT09IG5hbWUpXG4gICAgcmV0dXJuIHNlY3Rpb24gPyBzZWN0aW9uLnZhbHVlIDogdW5kZWZpbmVkXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlY29kZSxcbiAgaHJwVG9NaWxsaXNhdFxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJ2YXIgbixsLHUsaSx0LG8scixmLGUsYz17fSxzPVtdLGE9L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaSx2PUFycmF5LmlzQXJyYXk7ZnVuY3Rpb24gaChuLGwpe2Zvcih2YXIgdSBpbiBsKW5bdV09bFt1XTtyZXR1cm4gbn1mdW5jdGlvbiBwKG4pe3ZhciBsPW4ucGFyZW50Tm9kZTtsJiZsLnJlbW92ZUNoaWxkKG4pfWZ1bmN0aW9uIHkobCx1LGkpe3ZhciB0LG8scixmPXt9O2ZvcihyIGluIHUpXCJrZXlcIj09cj90PXVbcl06XCJyZWZcIj09cj9vPXVbcl06ZltyXT11W3JdO2lmKGFyZ3VtZW50cy5sZW5ndGg+MiYmKGYuY2hpbGRyZW49YXJndW1lbnRzLmxlbmd0aD4zP24uY2FsbChhcmd1bWVudHMsMik6aSksXCJmdW5jdGlvblwiPT10eXBlb2YgbCYmbnVsbCE9bC5kZWZhdWx0UHJvcHMpZm9yKHIgaW4gbC5kZWZhdWx0UHJvcHMpdm9pZCAwPT09ZltyXSYmKGZbcl09bC5kZWZhdWx0UHJvcHNbcl0pO3JldHVybiBkKGwsZix0LG8sbnVsbCl9ZnVuY3Rpb24gZChuLGksdCxvLHIpe3ZhciBmPXt0eXBlOm4scHJvcHM6aSxrZXk6dCxyZWY6byxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1yPysrdTpyfTtyZXR1cm4gbnVsbD09ciYmbnVsbCE9bC52bm9kZSYmbC52bm9kZShmKSxmfWZ1bmN0aW9uIF8oKXtyZXR1cm57Y3VycmVudDpudWxsfX1mdW5jdGlvbiBrKG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIGIobixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gZyhuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/ZyhuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT9nKG4pOm51bGx9ZnVuY3Rpb24gbShuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIG0obil9fWZ1bmN0aW9uIHcobil7KCFuLl9fZCYmKG4uX19kPSEwKSYmdC5wdXNoKG4pJiYheC5fX3IrK3x8byE9PWwuZGVib3VuY2VSZW5kZXJpbmcpJiYoKG89bC5kZWJvdW5jZVJlbmRlcmluZyl8fHIpKHgpfWZ1bmN0aW9uIHgoKXt2YXIgbixsLHUsaSxvLHIsZSxjO2Zvcih0LnNvcnQoZik7bj10LnNoaWZ0KCk7KW4uX19kJiYobD10Lmxlbmd0aCxpPXZvaWQgMCxvPXZvaWQgMCxlPShyPSh1PW4pLl9fdikuX19lLChjPXUuX19QKSYmKGk9W10sKG89aCh7fSxyKSkuX192PXIuX192KzEsTChjLHIsbyx1Ll9fbix2b2lkIDAhPT1jLm93bmVyU1ZHRWxlbWVudCxudWxsIT1yLl9faD9bZV06bnVsbCxpLG51bGw9PWU/ZyhyKTplLHIuX19oKSxNKGksciksci5fX2UhPWUmJm0ocikpLHQubGVuZ3RoPmwmJnQuc29ydChmKSk7eC5fX3I9MH1mdW5jdGlvbiBQKG4sbCx1LGksdCxvLHIsZixlLGEpe3ZhciBoLHAseSxfLGIsbSx3LHg9aSYmaS5fX2t8fHMsUD14Lmxlbmd0aDtmb3IodS5fX2s9W10saD0wO2g8bC5sZW5ndGg7aCsrKWlmKG51bGwhPShfPXUuX19rW2hdPW51bGw9PShfPWxbaF0pfHxcImJvb2xlYW5cIj09dHlwZW9mIF98fFwiZnVuY3Rpb25cIj09dHlwZW9mIF8/bnVsbDpcInN0cmluZ1wiPT10eXBlb2YgX3x8XCJudW1iZXJcIj09dHlwZW9mIF98fFwiYmlnaW50XCI9PXR5cGVvZiBfP2QobnVsbCxfLG51bGwsbnVsbCxfKTp2KF8pP2Qoayx7Y2hpbGRyZW46X30sbnVsbCxudWxsLG51bGwpOl8uX19iPjA/ZChfLnR5cGUsXy5wcm9wcyxfLmtleSxfLnJlZj9fLnJlZjpudWxsLF8uX192KTpfKSl7aWYoXy5fXz11LF8uX19iPXUuX19iKzEsbnVsbD09PSh5PXhbaF0pfHx5JiZfLmtleT09eS5rZXkmJl8udHlwZT09PXkudHlwZSl4W2hdPXZvaWQgMDtlbHNlIGZvcihwPTA7cDxQO3ArKyl7aWYoKHk9eFtwXSkmJl8ua2V5PT15LmtleSYmXy50eXBlPT09eS50eXBlKXt4W3BdPXZvaWQgMDticmVha315PW51bGx9TChuLF8seT15fHxjLHQsbyxyLGYsZSxhKSxiPV8uX19lLChwPV8ucmVmKSYmeS5yZWYhPXAmJih3fHwodz1bXSkseS5yZWYmJncucHVzaCh5LnJlZixudWxsLF8pLHcucHVzaChwLF8uX19jfHxiLF8pKSxudWxsIT1iPyhudWxsPT1tJiYobT1iKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBfLnR5cGUmJl8uX19rPT09eS5fX2s/Xy5fX2Q9ZT1DKF8sZSxuKTplPSQobixfLHkseCxiLGUpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmKHUuX19kPWUpKTplJiZ5Ll9fZT09ZSYmZS5wYXJlbnROb2RlIT1uJiYoZT1nKHkpKX1mb3IodS5fX2U9bSxoPVA7aC0tOyludWxsIT14W2hdJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiZudWxsIT14W2hdLl9fZSYmeFtoXS5fX2U9PXUuX19kJiYodS5fX2Q9QShpKS5uZXh0U2libGluZykscSh4W2hdLHhbaF0pKTtpZih3KWZvcihoPTA7aDx3Lmxlbmd0aDtoKyspTyh3W2hdLHdbKytoXSx3WysraF0pfWZ1bmN0aW9uIEMobixsLHUpe2Zvcih2YXIgaSx0PW4uX19rLG89MDt0JiZvPHQubGVuZ3RoO28rKykoaT10W29dKSYmKGkuX189bixsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGkudHlwZT9DKGksbCx1KTokKHUsaSxpLHQsaS5fX2UsbCkpO3JldHVybiBsfWZ1bmN0aW9uIFMobixsKXtyZXR1cm4gbD1sfHxbXSxudWxsPT1ufHxcImJvb2xlYW5cIj09dHlwZW9mIG58fCh2KG4pP24uc29tZShmdW5jdGlvbihuKXtTKG4sbCl9KTpsLnB1c2gobikpLGx9ZnVuY3Rpb24gJChuLGwsdSxpLHQsbyl7dmFyIHIsZixlO2lmKHZvaWQgMCE9PWwuX19kKXI9bC5fX2QsbC5fX2Q9dm9pZCAwO2Vsc2UgaWYobnVsbD09dXx8dCE9b3x8bnVsbD09dC5wYXJlbnROb2RlKW46aWYobnVsbD09b3x8by5wYXJlbnROb2RlIT09biluLmFwcGVuZENoaWxkKHQpLHI9bnVsbDtlbHNle2ZvcihmPW8sZT0wOyhmPWYubmV4dFNpYmxpbmcpJiZlPGkubGVuZ3RoO2UrPTEpaWYoZj09dClicmVhayBuO24uaW5zZXJ0QmVmb3JlKHQsbykscj1vfXJldHVybiB2b2lkIDAhPT1yP3I6dC5uZXh0U2libGluZ31mdW5jdGlvbiBBKG4pe3ZhciBsLHUsaTtpZihudWxsPT1uLnR5cGV8fFwic3RyaW5nXCI9PXR5cGVvZiBuLnR5cGUpcmV0dXJuIG4uX19lO2lmKG4uX19rKWZvcihsPW4uX19rLmxlbmd0aC0xO2w+PTA7bC0tKWlmKCh1PW4uX19rW2xdKSYmKGk9QSh1KSkpcmV0dXJuIGk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSChuLGwsdSxpLHQpe3ZhciBvO2ZvcihvIGluIHUpXCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fG8gaW4gbHx8VChuLG8sbnVsbCx1W29dLGkpO2ZvcihvIGluIGwpdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbFtvXXx8XCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fFwidmFsdWVcIj09PW98fFwiY2hlY2tlZFwiPT09b3x8dVtvXT09PWxbb118fFQobixvLGxbb10sdVtvXSxpKX1mdW5jdGlvbiBJKG4sbCx1KXtcIi1cIj09PWxbMF0/bi5zZXRQcm9wZXJ0eShsLG51bGw9PXU/XCJcIjp1KTpuW2xdPW51bGw9PXU/XCJcIjpcIm51bWJlclwiIT10eXBlb2YgdXx8YS50ZXN0KGwpP3U6dStcInB4XCJ9ZnVuY3Rpb24gVChuLGwsdSxpLHQpe3ZhciBvO246aWYoXCJzdHlsZVwiPT09bClpZihcInN0cmluZ1wiPT10eXBlb2YgdSluLnN0eWxlLmNzc1RleHQ9dTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiYobi5zdHlsZS5jc3NUZXh0PWk9XCJcIiksaSlmb3IobCBpbiBpKXUmJmwgaW4gdXx8SShuLnN0eWxlLGwsXCJcIik7aWYodSlmb3IobCBpbiB1KWkmJnVbbF09PT1pW2xdfHxJKG4uc3R5bGUsbCx1W2xdKX1lbHNlIGlmKFwib1wiPT09bFswXSYmXCJuXCI9PT1sWzFdKW89bCE9PShsPWwucmVwbGFjZSgvQ2FwdHVyZSQvLFwiXCIpKSxsPWwudG9Mb3dlckNhc2UoKWluIG4/bC50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpOmwuc2xpY2UoMiksbi5sfHwobi5sPXt9KSxuLmxbbCtvXT11LHU/aXx8bi5hZGRFdmVudExpc3RlbmVyKGwsbz96Omosbyk6bi5yZW1vdmVFdmVudExpc3RlbmVyKGwsbz96Omosbyk7ZWxzZSBpZihcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sKXtpZih0KWw9bC5yZXBsYWNlKC94bGluayhIfDpoKS8sXCJoXCIpLnJlcGxhY2UoL3NOYW1lJC8sXCJzXCIpO2Vsc2UgaWYoXCJ3aWR0aFwiIT09bCYmXCJoZWlnaHRcIiE9PWwmJlwiaHJlZlwiIT09bCYmXCJsaXN0XCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidGFiSW5kZXhcIiE9PWwmJlwiZG93bmxvYWRcIiE9PWwmJlwicm93U3BhblwiIT09bCYmXCJjb2xTcGFuXCIhPT1sJiZsIGluIG4pdHJ5e25bbF09bnVsbD09dT9cIlwiOnU7YnJlYWsgbn1jYXRjaChuKXt9XCJmdW5jdGlvblwiPT10eXBlb2YgdXx8KG51bGw9PXV8fCExPT09dSYmXCItXCIhPT1sWzRdP24ucmVtb3ZlQXR0cmlidXRlKGwpOm4uc2V0QXR0cmlidXRlKGwsdSkpfX1mdW5jdGlvbiBqKG4pe3JldHVybiB0aGlzLmxbbi50eXBlKyExXShsLmV2ZW50P2wuZXZlbnQobik6bil9ZnVuY3Rpb24geihuKXtyZXR1cm4gdGhpcy5sW24udHlwZSshMF0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIEwobix1LGksdCxvLHIsZixlLGMpe3ZhciBzLGEscCx5LGQsXyxnLG0sdyx4LEMsUywkLEEsSCxJPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYoYz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwscj1bZV0pLChzPWwuX19iKSYmcyh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBJKXtpZihtPXUucHJvcHMsdz0ocz1JLmNvbnRleHRUeXBlKSYmdFtzLl9fY10seD1zP3c/dy5wcm9wcy52YWx1ZTpzLl9fOnQsaS5fX2M/Zz0oYT11Ll9fYz1pLl9fYykuX189YS5fX0U6KFwicHJvdG90eXBlXCJpbiBJJiZJLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9YT1uZXcgSShtLHgpOih1Ll9fYz1hPW5ldyBiKG0seCksYS5jb25zdHJ1Y3Rvcj1JLGEucmVuZGVyPUIpLHcmJncuc3ViKGEpLGEucHJvcHM9bSxhLnN0YXRlfHwoYS5zdGF0ZT17fSksYS5jb250ZXh0PXgsYS5fX249dCxwPWEuX19kPSEwLGEuX19oPVtdLGEuX3NiPVtdKSxudWxsPT1hLl9fcyYmKGEuX19zPWEuc3RhdGUpLG51bGwhPUkuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoYS5fX3M9PWEuc3RhdGUmJihhLl9fcz1oKHt9LGEuX19zKSksaChhLl9fcyxJLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhtLGEuX19zKSkpLHk9YS5wcm9wcyxkPWEuc3RhdGUsYS5fX3Y9dSxwKW51bGw9PUkuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZudWxsIT1hLmNvbXBvbmVudFdpbGxNb3VudCYmYS5jb21wb25lbnRXaWxsTW91bnQoKSxudWxsIT1hLmNvbXBvbmVudERpZE1vdW50JiZhLl9faC5wdXNoKGEuY29tcG9uZW50RGlkTW91bnQpO2Vsc2V7aWYobnVsbD09SS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJm0hPT15JiZudWxsIT1hLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmEuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhtLHgpLCFhLl9fZSYmbnVsbCE9YS5zaG91bGRDb21wb25lbnRVcGRhdGUmJiExPT09YS5zaG91bGRDb21wb25lbnRVcGRhdGUobSxhLl9fcyx4KXx8dS5fX3Y9PT1pLl9fdil7Zm9yKHUuX192IT09aS5fX3YmJihhLnByb3BzPW0sYS5zdGF0ZT1hLl9fcyxhLl9fZD0hMSksYS5fX2U9ITEsdS5fX2U9aS5fX2UsdS5fX2s9aS5fX2ssdS5fX2suZm9yRWFjaChmdW5jdGlvbihuKXtuJiYobi5fXz11KX0pLEM9MDtDPGEuX3NiLmxlbmd0aDtDKyspYS5fX2gucHVzaChhLl9zYltDXSk7YS5fc2I9W10sYS5fX2gubGVuZ3RoJiZmLnB1c2goYSk7YnJlYWsgbn1udWxsIT1hLmNvbXBvbmVudFdpbGxVcGRhdGUmJmEuY29tcG9uZW50V2lsbFVwZGF0ZShtLGEuX19zLHgpLG51bGwhPWEuY29tcG9uZW50RGlkVXBkYXRlJiZhLl9faC5wdXNoKGZ1bmN0aW9uKCl7YS5jb21wb25lbnREaWRVcGRhdGUoeSxkLF8pfSl9aWYoYS5jb250ZXh0PXgsYS5wcm9wcz1tLGEuX19QPW4sUz1sLl9fciwkPTAsXCJwcm90b3R5cGVcImluIEkmJkkucHJvdG90eXBlLnJlbmRlcil7Zm9yKGEuc3RhdGU9YS5fX3MsYS5fX2Q9ITEsUyYmUyh1KSxzPWEucmVuZGVyKGEucHJvcHMsYS5zdGF0ZSxhLmNvbnRleHQpLEE9MDtBPGEuX3NiLmxlbmd0aDtBKyspYS5fX2gucHVzaChhLl9zYltBXSk7YS5fc2I9W119ZWxzZSBkb3thLl9fZD0hMSxTJiZTKHUpLHM9YS5yZW5kZXIoYS5wcm9wcyxhLnN0YXRlLGEuY29udGV4dCksYS5zdGF0ZT1hLl9fc313aGlsZShhLl9fZCYmKyskPDI1KTthLnN0YXRlPWEuX19zLG51bGwhPWEuZ2V0Q2hpbGRDb250ZXh0JiYodD1oKGgoe30sdCksYS5nZXRDaGlsZENvbnRleHQoKSkpLHB8fG51bGw9PWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChfPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxkKSksUChuLHYoSD1udWxsIT1zJiZzLnR5cGU9PT1rJiZudWxsPT1zLmtleT9zLnByb3BzLmNoaWxkcmVuOnMpP0g6W0hdLHUsaSx0LG8scixmLGUsYyksYS5iYXNlPXUuX19lLHUuX19oPW51bGwsYS5fX2gubGVuZ3RoJiZmLnB1c2goYSksZyYmKGEuX19FPWEuX189bnVsbCksYS5fX2U9ITF9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9TihpLl9fZSx1LGksdCxvLHIsZixjKTsocz1sLmRpZmZlZCkmJnModSl9Y2F0Y2gobil7dS5fX3Y9bnVsbCwoY3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhYyxyW3IuaW5kZXhPZihlKV09bnVsbCksbC5fX2Uobix1LGkpfX1mdW5jdGlvbiBNKG4sdSl7bC5fX2MmJmwuX19jKHUsbiksbi5zb21lKGZ1bmN0aW9uKHUpe3RyeXtuPXUuX19oLHUuX19oPVtdLG4uc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSl9KX1jYXRjaChuKXtsLl9fZShuLHUuX192KX19KX1mdW5jdGlvbiBOKGwsdSxpLHQsbyxyLGYsZSl7dmFyIHMsYSxoLHk9aS5wcm9wcyxkPXUucHJvcHMsXz11LnR5cGUsaz0wO2lmKFwic3ZnXCI9PT1fJiYobz0hMCksbnVsbCE9cilmb3IoO2s8ci5sZW5ndGg7aysrKWlmKChzPXJba10pJiZcInNldEF0dHJpYnV0ZVwiaW4gcz09ISFfJiYoXz9zLmxvY2FsTmFtZT09PV86Mz09PXMubm9kZVR5cGUpKXtsPXMscltrXT1udWxsO2JyZWFrfWlmKG51bGw9PWwpe2lmKG51bGw9PT1fKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkKTtsPW8/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixfKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KF8sZC5pcyYmZCkscj1udWxsLGU9ITF9aWYobnVsbD09PV8peT09PWR8fGUmJmwuZGF0YT09PWR8fChsLmRhdGE9ZCk7ZWxzZXtpZihyPXImJm4uY2FsbChsLmNoaWxkTm9kZXMpLGE9KHk9aS5wcm9wc3x8YykuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsaD1kLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFlKXtpZihudWxsIT1yKWZvcih5PXt9LGs9MDtrPGwuYXR0cmlidXRlcy5sZW5ndGg7aysrKXlbbC5hdHRyaWJ1dGVzW2tdLm5hbWVdPWwuYXR0cmlidXRlc1trXS52YWx1ZTsoaHx8YSkmJihoJiYoYSYmaC5fX2h0bWw9PWEuX19odG1sfHxoLl9faHRtbD09PWwuaW5uZXJIVE1MKXx8KGwuaW5uZXJIVE1MPWgmJmguX19odG1sfHxcIlwiKSl9aWYoSChsLGQseSxvLGUpLGgpdS5fX2s9W107ZWxzZSBpZihQKGwsdihrPXUucHJvcHMuY2hpbGRyZW4pP2s6W2tdLHUsaSx0LG8mJlwiZm9yZWlnbk9iamVjdFwiIT09XyxyLGYscj9yWzBdOmkuX19rJiZnKGksMCksZSksbnVsbCE9cilmb3Ioaz1yLmxlbmd0aDtrLS07KW51bGwhPXJba10mJnAocltrXSk7ZXx8KFwidmFsdWVcImluIGQmJnZvaWQgMCE9PShrPWQudmFsdWUpJiYoayE9PWwudmFsdWV8fFwicHJvZ3Jlc3NcIj09PV8mJiFrfHxcIm9wdGlvblwiPT09XyYmayE9PXkudmFsdWUpJiZUKGwsXCJ2YWx1ZVwiLGsseS52YWx1ZSwhMSksXCJjaGVja2VkXCJpbiBkJiZ2b2lkIDAhPT0oaz1kLmNoZWNrZWQpJiZrIT09bC5jaGVja2VkJiZUKGwsXCJjaGVja2VkXCIsayx5LmNoZWNrZWQsITEpKX1yZXR1cm4gbH1mdW5jdGlvbiBPKG4sdSxpKXt0cnl7XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKHUpOm4uY3VycmVudD11fWNhdGNoKG4pe2wuX19lKG4saSl9fWZ1bmN0aW9uIHEobix1LGkpe3ZhciB0LG87aWYobC51bm1vdW50JiZsLnVubW91bnQobiksKHQ9bi5yZWYpJiYodC5jdXJyZW50JiZ0LmN1cnJlbnQhPT1uLl9fZXx8Tyh0LG51bGwsdSkpLG51bGwhPSh0PW4uX19jKSl7aWYodC5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7dC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKG4pe2wuX19lKG4sdSl9dC5iYXNlPXQuX19QPW51bGwsbi5fX2M9dm9pZCAwfWlmKHQ9bi5fX2spZm9yKG89MDtvPHQubGVuZ3RoO28rKyl0W29dJiZxKHRbb10sdSxpfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBuLnR5cGUpO2l8fG51bGw9PW4uX19lfHxwKG4uX19lKSxuLl9fPW4uX19lPW4uX19kPXZvaWQgMH1mdW5jdGlvbiBCKG4sbCx1KXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihuLHUpfWZ1bmN0aW9uIEQodSxpLHQpe3ZhciBvLHIsZjtsLl9fJiZsLl9fKHUsaSkscj0obz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0KT9udWxsOnQmJnQuX19rfHxpLl9fayxmPVtdLEwoaSx1PSghbyYmdHx8aSkuX19rPXkoayxudWxsLFt1XSkscnx8YyxjLHZvaWQgMCE9PWkub3duZXJTVkdFbGVtZW50LCFvJiZ0P1t0XTpyP251bGw6aS5maXJzdENoaWxkP24uY2FsbChpLmNoaWxkTm9kZXMpOm51bGwsZiwhbyYmdD90OnI/ci5fX2U6aS5maXJzdENoaWxkLG8pLE0oZix1KX1mdW5jdGlvbiBFKG4sbCl7RChuLGwsRSl9ZnVuY3Rpb24gRihsLHUsaSl7dmFyIHQsbyxyLGYsZT1oKHt9LGwucHJvcHMpO2ZvcihyIGluIGwudHlwZSYmbC50eXBlLmRlZmF1bHRQcm9wcyYmKGY9bC50eXBlLmRlZmF1bHRQcm9wcyksdSlcImtleVwiPT1yP3Q9dVtyXTpcInJlZlwiPT1yP289dVtyXTplW3JdPXZvaWQgMD09PXVbcl0mJnZvaWQgMCE9PWY/ZltyXTp1W3JdO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjImJihlLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uLmNhbGwoYXJndW1lbnRzLDIpOmkpLGQobC50eXBlLGUsdHx8bC5rZXksb3x8bC5yZWYsbnVsbCl9ZnVuY3Rpb24gRyhuLGwpe3ZhciB1PXtfX2M6bD1cIl9fY0NcIitlKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgdSxpO3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KHU9W10sKGk9e30pW2xdPXRoaXMsdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gaX0sdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5wcm9wcy52YWx1ZSE9PW4udmFsdWUmJnUuc29tZShmdW5jdGlvbihuKXtuLl9fZT0hMCx3KG4pfSl9LHRoaXMuc3ViPWZ1bmN0aW9uKG4pe3UucHVzaChuKTt2YXIgbD1uLmNvbXBvbmVudFdpbGxVbm1vdW50O24uY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt1LnNwbGljZSh1LmluZGV4T2YobiksMSksbCYmbC5jYWxsKG4pfX0pLG4uY2hpbGRyZW59fTtyZXR1cm4gdS5Qcm92aWRlci5fXz11LkNvbnN1bWVyLmNvbnRleHRUeXBlPXV9bj1zLnNsaWNlLGw9e19fZTpmdW5jdGlvbihuLGwsdSxpKXtmb3IodmFyIHQsbyxyO2w9bC5fXzspaWYoKHQ9bC5fX2MpJiYhdC5fXyl0cnl7aWYoKG89dC5jb25zdHJ1Y3RvcikmJm51bGwhPW8uZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yJiYodC5zZXRTdGF0ZShvLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihuKSkscj10Ll9fZCksbnVsbCE9dC5jb21wb25lbnREaWRDYXRjaCYmKHQuY29tcG9uZW50RGlkQ2F0Y2gobixpfHx7fSkscj10Ll9fZCkscilyZXR1cm4gdC5fX0U9dH1jYXRjaChsKXtuPWx9dGhyb3cgbn19LHU9MCxpPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsIT1uJiZ2b2lkIDA9PT1uLmNvbnN0cnVjdG9yfSxiLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihuLGwpe3ZhciB1O3U9bnVsbCE9dGhpcy5fX3MmJnRoaXMuX19zIT09dGhpcy5zdGF0ZT90aGlzLl9fczp0aGlzLl9fcz1oKHt9LHRoaXMuc3RhdGUpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihuPW4oaCh7fSx1KSx0aGlzLnByb3BzKSksbiYmaCh1LG4pLG51bGwhPW4mJnRoaXMuX192JiYobCYmdGhpcy5fc2IucHVzaChsKSx3KHRoaXMpKX0sYi5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5fX3YmJih0aGlzLl9fZT0hMCxuJiZ0aGlzLl9faC5wdXNoKG4pLHcodGhpcykpfSxiLnByb3RvdHlwZS5yZW5kZXI9ayx0PVtdLHI9XCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpOnNldFRpbWVvdXQsZj1mdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSx4Ll9fcj0wLGU9MDtleHBvcnR7YiBhcyBDb21wb25lbnQsayBhcyBGcmFnbWVudCxGIGFzIGNsb25lRWxlbWVudCxHIGFzIGNyZWF0ZUNvbnRleHQseSBhcyBjcmVhdGVFbGVtZW50LF8gYXMgY3JlYXRlUmVmLHkgYXMgaCxFIGFzIGh5ZHJhdGUsaSBhcyBpc1ZhbGlkRWxlbWVudCxsIGFzIG9wdGlvbnMsRCBhcyByZW5kZXIsUyBhcyB0b0NoaWxkQXJyYXl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0Lm1vZHVsZS5qcy5tYXBcbiIsIi8qISBub2JsZS1zZWNwMjU2azEgLSBNSVQgTGljZW5zZSAoYykgMjAxOSBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmltcG9ydCAqIGFzIG5vZGVDcnlwdG8gZnJvbSAnY3J5cHRvJztcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbmNvbnN0IF8xbiA9IEJpZ0ludCgxKTtcbmNvbnN0IF8ybiA9IEJpZ0ludCgyKTtcbmNvbnN0IF8zbiA9IEJpZ0ludCgzKTtcbmNvbnN0IF84biA9IEJpZ0ludCg4KTtcbmNvbnN0IENVUlZFID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgYTogXzBuLFxuICAgIGI6IEJpZ0ludCg3KSxcbiAgICBQOiBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmVmZmZmZmMyZicpLFxuICAgIG46IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxJyksXG4gICAgaDogXzFuLFxuICAgIEd4OiBCaWdJbnQoJzU1MDY2MjYzMDIyMjc3MzQzNjY5NTc4NzE4ODk1MTY4NTM0MzI2MjUwNjAzNDUzNzc3NTk0MTc1NTAwMTg3MzYwMzg5MTE2NzI5MjQwJyksXG4gICAgR3k6IEJpZ0ludCgnMzI2NzA1MTAwMjA3NTg4MTY5NzgwODMwODUxMzA1MDcwNDMxODQ0NzEyNzMzODA2NTkyNDMyNzU5Mzg5MDQzMzU3NTczMzc0ODI0MjQnKSxcbiAgICBiZXRhOiBCaWdJbnQoJzB4N2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScpLFxufSk7XG5jb25zdCBkaXZOZWFyZXN0ID0gKGEsIGIpID0+IChhICsgYiAvIF8ybikgLyBiO1xuY29uc3QgZW5kbyA9IHtcbiAgICBiZXRhOiBCaWdJbnQoJzB4N2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScpLFxuICAgIHNwbGl0U2NhbGFyKGspIHtcbiAgICAgICAgY29uc3QgeyBuIH0gPSBDVVJWRTtcbiAgICAgICAgY29uc3QgYTEgPSBCaWdJbnQoJzB4MzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnKTtcbiAgICAgICAgY29uc3QgYjEgPSAtXzFuICogQmlnSW50KCcweGU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJyk7XG4gICAgICAgIGNvbnN0IGEyID0gQmlnSW50KCcweDExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcpO1xuICAgICAgICBjb25zdCBiMiA9IGExO1xuICAgICAgICBjb25zdCBQT1dfMl8xMjggPSBCaWdJbnQoJzB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyk7XG4gICAgICAgIGNvbnN0IGMxID0gZGl2TmVhcmVzdChiMiAqIGssIG4pO1xuICAgICAgICBjb25zdCBjMiA9IGRpdk5lYXJlc3QoLWIxICogaywgbik7XG4gICAgICAgIGxldCBrMSA9IG1vZChrIC0gYzEgKiBhMSAtIGMyICogYTIsIG4pO1xuICAgICAgICBsZXQgazIgPSBtb2QoLWMxICogYjEgLSBjMiAqIGIyLCBuKTtcbiAgICAgICAgY29uc3QgazFuZWcgPSBrMSA+IFBPV18yXzEyODtcbiAgICAgICAgY29uc3QgazJuZWcgPSBrMiA+IFBPV18yXzEyODtcbiAgICAgICAgaWYgKGsxbmVnKVxuICAgICAgICAgICAgazEgPSBuIC0gazE7XG4gICAgICAgIGlmIChrMm5lZylcbiAgICAgICAgICAgIGsyID0gbiAtIGsyO1xuICAgICAgICBpZiAoazEgPiBQT1dfMl8xMjggfHwgazIgPiBQT1dfMl8xMjgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3BsaXRTY2FsYXJFbmRvOiBFbmRvbW9ycGhpc20gZmFpbGVkLCBrPScgKyBrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBrMW5lZywgazEsIGsybmVnLCBrMiB9O1xuICAgIH0sXG59O1xuY29uc3QgZmllbGRMZW4gPSAzMjtcbmNvbnN0IGdyb3VwTGVuID0gMzI7XG5jb25zdCBoYXNoTGVuID0gMzI7XG5jb25zdCBjb21wcmVzc2VkTGVuID0gZmllbGRMZW4gKyAxO1xuY29uc3QgdW5jb21wcmVzc2VkTGVuID0gMiAqIGZpZWxkTGVuICsgMTtcbmV4cG9ydCB7IENVUlZFIH07XG5mdW5jdGlvbiB3ZWllcnN0cmFzcyh4KSB7XG4gICAgY29uc3QgeyBhLCBiIH0gPSBDVVJWRTtcbiAgICBjb25zdCB4MiA9IG1vZCh4ICogeCk7XG4gICAgY29uc3QgeDMgPSBtb2QoeDIgKiB4KTtcbiAgICByZXR1cm4gbW9kKHgzICsgYSAqIHggKyBiKTtcbn1cbmNvbnN0IFVTRV9FTkRPTU9SUEhJU00gPSBDVVJWRS5hID09PSBfMG47XG5jbGFzcyBTaGFFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydEphY1BvaW50KG90aGVyKSB7XG4gICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBKYWNvYmlhblBvaW50KSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSmFjb2JpYW5Qb2ludCBleHBlY3RlZCcpO1xufVxuY2xhc3MgSmFjb2JpYW5Qb2ludCB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgeikge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUFmZmluZShwKSB7XG4gICAgICAgIGlmICghKHAgaW5zdGFuY2VvZiBQb2ludCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0phY29iaWFuUG9pbnQjZnJvbUFmZmluZTogZXhwZWN0ZWQgUG9pbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocC5lcXVhbHMoUG9pbnQuWkVSTykpXG4gICAgICAgICAgICByZXR1cm4gSmFjb2JpYW5Qb2ludC5aRVJPO1xuICAgICAgICByZXR1cm4gbmV3IEphY29iaWFuUG9pbnQocC54LCBwLnksIF8xbik7XG4gICAgfVxuICAgIHN0YXRpYyB0b0FmZmluZUJhdGNoKHBvaW50cykge1xuICAgICAgICBjb25zdCB0b0ludiA9IGludmVydEJhdGNoKHBvaW50cy5tYXAoKHApID0+IHAueikpO1xuICAgICAgICByZXR1cm4gcG9pbnRzLm1hcCgocCwgaSkgPT4gcC50b0FmZmluZSh0b0ludltpXSkpO1xuICAgIH1cbiAgICBzdGF0aWMgbm9ybWFsaXplWihwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIEphY29iaWFuUG9pbnQudG9BZmZpbmVCYXRjaChwb2ludHMpLm1hcChKYWNvYmlhblBvaW50LmZyb21BZmZpbmUpO1xuICAgIH1cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgYXNzZXJ0SmFjUG9pbnQob3RoZXIpO1xuICAgICAgICBjb25zdCB7IHg6IFgxLCB5OiBZMSwgejogWjEgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgeDogWDIsIHk6IFkyLCB6OiBaMiB9ID0gb3RoZXI7XG4gICAgICAgIGNvbnN0IFoxWjEgPSBtb2QoWjEgKiBaMSk7XG4gICAgICAgIGNvbnN0IFoyWjIgPSBtb2QoWjIgKiBaMik7XG4gICAgICAgIGNvbnN0IFUxID0gbW9kKFgxICogWjJaMik7XG4gICAgICAgIGNvbnN0IFUyID0gbW9kKFgyICogWjFaMSk7XG4gICAgICAgIGNvbnN0IFMxID0gbW9kKG1vZChZMSAqIFoyKSAqIFoyWjIpO1xuICAgICAgICBjb25zdCBTMiA9IG1vZChtb2QoWTIgKiBaMSkgKiBaMVoxKTtcbiAgICAgICAgcmV0dXJuIFUxID09PSBVMiAmJiBTMSA9PT0gUzI7XG4gICAgfVxuICAgIG5lZ2F0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKYWNvYmlhblBvaW50KHRoaXMueCwgbW9kKC10aGlzLnkpLCB0aGlzLnopO1xuICAgIH1cbiAgICBkb3VibGUoKSB7XG4gICAgICAgIGNvbnN0IHsgeDogWDEsIHk6IFkxLCB6OiBaMSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgQSA9IG1vZChYMSAqIFgxKTtcbiAgICAgICAgY29uc3QgQiA9IG1vZChZMSAqIFkxKTtcbiAgICAgICAgY29uc3QgQyA9IG1vZChCICogQik7XG4gICAgICAgIGNvbnN0IHgxYiA9IFgxICsgQjtcbiAgICAgICAgY29uc3QgRCA9IG1vZChfMm4gKiAobW9kKHgxYiAqIHgxYikgLSBBIC0gQykpO1xuICAgICAgICBjb25zdCBFID0gbW9kKF8zbiAqIEEpO1xuICAgICAgICBjb25zdCBGID0gbW9kKEUgKiBFKTtcbiAgICAgICAgY29uc3QgWDMgPSBtb2QoRiAtIF8ybiAqIEQpO1xuICAgICAgICBjb25zdCBZMyA9IG1vZChFICogKEQgLSBYMykgLSBfOG4gKiBDKTtcbiAgICAgICAgY29uc3QgWjMgPSBtb2QoXzJuICogWTEgKiBaMSk7XG4gICAgICAgIHJldHVybiBuZXcgSmFjb2JpYW5Qb2ludChYMywgWTMsIFozKTtcbiAgICB9XG4gICAgYWRkKG90aGVyKSB7XG4gICAgICAgIGFzc2VydEphY1BvaW50KG90aGVyKTtcbiAgICAgICAgY29uc3QgeyB4OiBYMSwgeTogWTEsIHo6IFoxIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHg6IFgyLCB5OiBZMiwgejogWjIgfSA9IG90aGVyO1xuICAgICAgICBpZiAoWDIgPT09IF8wbiB8fCBZMiA9PT0gXzBuKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmIChYMSA9PT0gXzBuIHx8IFkxID09PSBfMG4pXG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgIGNvbnN0IFoxWjEgPSBtb2QoWjEgKiBaMSk7XG4gICAgICAgIGNvbnN0IFoyWjIgPSBtb2QoWjIgKiBaMik7XG4gICAgICAgIGNvbnN0IFUxID0gbW9kKFgxICogWjJaMik7XG4gICAgICAgIGNvbnN0IFUyID0gbW9kKFgyICogWjFaMSk7XG4gICAgICAgIGNvbnN0IFMxID0gbW9kKG1vZChZMSAqIFoyKSAqIFoyWjIpO1xuICAgICAgICBjb25zdCBTMiA9IG1vZChtb2QoWTIgKiBaMSkgKiBaMVoxKTtcbiAgICAgICAgY29uc3QgSCA9IG1vZChVMiAtIFUxKTtcbiAgICAgICAgY29uc3QgciA9IG1vZChTMiAtIFMxKTtcbiAgICAgICAgaWYgKEggPT09IF8wbikge1xuICAgICAgICAgICAgaWYgKHIgPT09IF8wbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvdWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEphY29iaWFuUG9pbnQuWkVSTztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBISCA9IG1vZChIICogSCk7XG4gICAgICAgIGNvbnN0IEhISCA9IG1vZChIICogSEgpO1xuICAgICAgICBjb25zdCBWID0gbW9kKFUxICogSEgpO1xuICAgICAgICBjb25zdCBYMyA9IG1vZChyICogciAtIEhISCAtIF8ybiAqIFYpO1xuICAgICAgICBjb25zdCBZMyA9IG1vZChyICogKFYgLSBYMykgLSBTMSAqIEhISCk7XG4gICAgICAgIGNvbnN0IFozID0gbW9kKFoxICogWjIgKiBIKTtcbiAgICAgICAgcmV0dXJuIG5ldyBKYWNvYmlhblBvaW50KFgzLCBZMywgWjMpO1xuICAgIH1cbiAgICBzdWJ0cmFjdChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQob3RoZXIubmVnYXRlKCkpO1xuICAgIH1cbiAgICBtdWx0aXBseVVuc2FmZShzY2FsYXIpIHtcbiAgICAgICAgY29uc3QgUDAgPSBKYWNvYmlhblBvaW50LlpFUk87XG4gICAgICAgIGlmICh0eXBlb2Ygc2NhbGFyID09PSAnYmlnaW50JyAmJiBzY2FsYXIgPT09IF8wbilcbiAgICAgICAgICAgIHJldHVybiBQMDtcbiAgICAgICAgbGV0IG4gPSBub3JtYWxpemVTY2FsYXIoc2NhbGFyKTtcbiAgICAgICAgaWYgKG4gPT09IF8xbilcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBpZiAoIVVTRV9FTkRPTU9SUEhJU00pIHtcbiAgICAgICAgICAgIGxldCBwID0gUDA7XG4gICAgICAgICAgICBsZXQgZCA9IHRoaXM7XG4gICAgICAgICAgICB3aGlsZSAobiA+IF8wbikge1xuICAgICAgICAgICAgICAgIGlmIChuICYgXzFuKVxuICAgICAgICAgICAgICAgICAgICBwID0gcC5hZGQoZCk7XG4gICAgICAgICAgICAgICAgZCA9IGQuZG91YmxlKCk7XG4gICAgICAgICAgICAgICAgbiA+Pj0gXzFuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHsgazFuZWcsIGsxLCBrMm5lZywgazIgfSA9IGVuZG8uc3BsaXRTY2FsYXIobik7XG4gICAgICAgIGxldCBrMXAgPSBQMDtcbiAgICAgICAgbGV0IGsycCA9IFAwO1xuICAgICAgICBsZXQgZCA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChrMSA+IF8wbiB8fCBrMiA+IF8wbikge1xuICAgICAgICAgICAgaWYgKGsxICYgXzFuKVxuICAgICAgICAgICAgICAgIGsxcCA9IGsxcC5hZGQoZCk7XG4gICAgICAgICAgICBpZiAoazIgJiBfMW4pXG4gICAgICAgICAgICAgICAgazJwID0gazJwLmFkZChkKTtcbiAgICAgICAgICAgIGQgPSBkLmRvdWJsZSgpO1xuICAgICAgICAgICAgazEgPj49IF8xbjtcbiAgICAgICAgICAgIGsyID4+PSBfMW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGsxbmVnKVxuICAgICAgICAgICAgazFwID0gazFwLm5lZ2F0ZSgpO1xuICAgICAgICBpZiAoazJuZWcpXG4gICAgICAgICAgICBrMnAgPSBrMnAubmVnYXRlKCk7XG4gICAgICAgIGsycCA9IG5ldyBKYWNvYmlhblBvaW50KG1vZChrMnAueCAqIGVuZG8uYmV0YSksIGsycC55LCBrMnAueik7XG4gICAgICAgIHJldHVybiBrMXAuYWRkKGsycCk7XG4gICAgfVxuICAgIHByZWNvbXB1dGVXaW5kb3coVykge1xuICAgICAgICBjb25zdCB3aW5kb3dzID0gVVNFX0VORE9NT1JQSElTTSA/IDEyOCAvIFcgKyAxIDogMjU2IC8gVyArIDE7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgICAgICBsZXQgcCA9IHRoaXM7XG4gICAgICAgIGxldCBiYXNlID0gcDtcbiAgICAgICAgZm9yIChsZXQgd2luZG93ID0gMDsgd2luZG93IDwgd2luZG93czsgd2luZG93KyspIHtcbiAgICAgICAgICAgIGJhc2UgPSBwO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goYmFzZSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IDIgKiogKFcgLSAxKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYmFzZSA9IGJhc2UuYWRkKHApO1xuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGJhc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCA9IGJhc2UuZG91YmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9XG4gICAgd05BRihuLCBhZmZpbmVQb2ludCkge1xuICAgICAgICBpZiAoIWFmZmluZVBvaW50ICYmIHRoaXMuZXF1YWxzKEphY29iaWFuUG9pbnQuQkFTRSkpXG4gICAgICAgICAgICBhZmZpbmVQb2ludCA9IFBvaW50LkJBU0U7XG4gICAgICAgIGNvbnN0IFcgPSAoYWZmaW5lUG9pbnQgJiYgYWZmaW5lUG9pbnQuX1dJTkRPV19TSVpFKSB8fCAxO1xuICAgICAgICBpZiAoMjU2ICUgVykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludCN3TkFGOiBJbnZhbGlkIHByZWNvbXB1dGF0aW9uIHdpbmRvdywgbXVzdCBiZSBwb3dlciBvZiAyJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByZWNvbXB1dGVzID0gYWZmaW5lUG9pbnQgJiYgcG9pbnRQcmVjb21wdXRlcy5nZXQoYWZmaW5lUG9pbnQpO1xuICAgICAgICBpZiAoIXByZWNvbXB1dGVzKSB7XG4gICAgICAgICAgICBwcmVjb21wdXRlcyA9IHRoaXMucHJlY29tcHV0ZVdpbmRvdyhXKTtcbiAgICAgICAgICAgIGlmIChhZmZpbmVQb2ludCAmJiBXICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgcHJlY29tcHV0ZXMgPSBKYWNvYmlhblBvaW50Lm5vcm1hbGl6ZVoocHJlY29tcHV0ZXMpO1xuICAgICAgICAgICAgICAgIHBvaW50UHJlY29tcHV0ZXMuc2V0KGFmZmluZVBvaW50LCBwcmVjb21wdXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHAgPSBKYWNvYmlhblBvaW50LlpFUk87XG4gICAgICAgIGxldCBmID0gSmFjb2JpYW5Qb2ludC5CQVNFO1xuICAgICAgICBjb25zdCB3aW5kb3dzID0gMSArIChVU0VfRU5ET01PUlBISVNNID8gMTI4IC8gVyA6IDI1NiAvIFcpO1xuICAgICAgICBjb25zdCB3aW5kb3dTaXplID0gMiAqKiAoVyAtIDEpO1xuICAgICAgICBjb25zdCBtYXNrID0gQmlnSW50KDIgKiogVyAtIDEpO1xuICAgICAgICBjb25zdCBtYXhOdW1iZXIgPSAyICoqIFc7XG4gICAgICAgIGNvbnN0IHNoaWZ0QnkgPSBCaWdJbnQoVyk7XG4gICAgICAgIGZvciAobGV0IHdpbmRvdyA9IDA7IHdpbmRvdyA8IHdpbmRvd3M7IHdpbmRvdysrKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3aW5kb3cgKiB3aW5kb3dTaXplO1xuICAgICAgICAgICAgbGV0IHdiaXRzID0gTnVtYmVyKG4gJiBtYXNrKTtcbiAgICAgICAgICAgIG4gPj49IHNoaWZ0Qnk7XG4gICAgICAgICAgICBpZiAod2JpdHMgPiB3aW5kb3dTaXplKSB7XG4gICAgICAgICAgICAgICAgd2JpdHMgLT0gbWF4TnVtYmVyO1xuICAgICAgICAgICAgICAgIG4gKz0gXzFuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0MSA9IG9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldDIgPSBvZmZzZXQgKyBNYXRoLmFicyh3Yml0cykgLSAxO1xuICAgICAgICAgICAgY29uc3QgY29uZDEgPSB3aW5kb3cgJSAyICE9PSAwO1xuICAgICAgICAgICAgY29uc3QgY29uZDIgPSB3Yml0cyA8IDA7XG4gICAgICAgICAgICBpZiAod2JpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmID0gZi5hZGQoY29uc3RUaW1lTmVnYXRlKGNvbmQxLCBwcmVjb21wdXRlc1tvZmZzZXQxXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcCA9IHAuYWRkKGNvbnN0VGltZU5lZ2F0ZShjb25kMiwgcHJlY29tcHV0ZXNbb2Zmc2V0Ml0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBwLCBmIH07XG4gICAgfVxuICAgIG11bHRpcGx5KHNjYWxhciwgYWZmaW5lUG9pbnQpIHtcbiAgICAgICAgbGV0IG4gPSBub3JtYWxpemVTY2FsYXIoc2NhbGFyKTtcbiAgICAgICAgbGV0IHBvaW50O1xuICAgICAgICBsZXQgZmFrZTtcbiAgICAgICAgaWYgKFVTRV9FTkRPTU9SUEhJU00pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgazFuZWcsIGsxLCBrMm5lZywgazIgfSA9IGVuZG8uc3BsaXRTY2FsYXIobik7XG4gICAgICAgICAgICBsZXQgeyBwOiBrMXAsIGY6IGYxcCB9ID0gdGhpcy53TkFGKGsxLCBhZmZpbmVQb2ludCk7XG4gICAgICAgICAgICBsZXQgeyBwOiBrMnAsIGY6IGYycCB9ID0gdGhpcy53TkFGKGsyLCBhZmZpbmVQb2ludCk7XG4gICAgICAgICAgICBrMXAgPSBjb25zdFRpbWVOZWdhdGUoazFuZWcsIGsxcCk7XG4gICAgICAgICAgICBrMnAgPSBjb25zdFRpbWVOZWdhdGUoazJuZWcsIGsycCk7XG4gICAgICAgICAgICBrMnAgPSBuZXcgSmFjb2JpYW5Qb2ludChtb2QoazJwLnggKiBlbmRvLmJldGEpLCBrMnAueSwgazJwLnopO1xuICAgICAgICAgICAgcG9pbnQgPSBrMXAuYWRkKGsycCk7XG4gICAgICAgICAgICBmYWtlID0gZjFwLmFkZChmMnApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBwLCBmIH0gPSB0aGlzLndOQUYobiwgYWZmaW5lUG9pbnQpO1xuICAgICAgICAgICAgcG9pbnQgPSBwO1xuICAgICAgICAgICAgZmFrZSA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEphY29iaWFuUG9pbnQubm9ybWFsaXplWihbcG9pbnQsIGZha2VdKVswXTtcbiAgICB9XG4gICAgdG9BZmZpbmUoaW52Wikge1xuICAgICAgICBjb25zdCB7IHgsIHksIHogfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGlzMCA9IHRoaXMuZXF1YWxzKEphY29iaWFuUG9pbnQuWkVSTyk7XG4gICAgICAgIGlmIChpbnZaID09IG51bGwpXG4gICAgICAgICAgICBpbnZaID0gaXMwID8gXzhuIDogaW52ZXJ0KHopO1xuICAgICAgICBjb25zdCBpejEgPSBpbnZaO1xuICAgICAgICBjb25zdCBpejIgPSBtb2QoaXoxICogaXoxKTtcbiAgICAgICAgY29uc3QgaXozID0gbW9kKGl6MiAqIGl6MSk7XG4gICAgICAgIGNvbnN0IGF4ID0gbW9kKHggKiBpejIpO1xuICAgICAgICBjb25zdCBheSA9IG1vZCh5ICogaXozKTtcbiAgICAgICAgY29uc3QgenogPSBtb2QoeiAqIGl6MSk7XG4gICAgICAgIGlmIChpczApXG4gICAgICAgICAgICByZXR1cm4gUG9pbnQuWkVSTztcbiAgICAgICAgaWYgKHp6ICE9PSBfMW4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludlogd2FzIGludmFsaWQnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChheCwgYXkpO1xuICAgIH1cbn1cbkphY29iaWFuUG9pbnQuQkFTRSA9IG5ldyBKYWNvYmlhblBvaW50KENVUlZFLkd4LCBDVVJWRS5HeSwgXzFuKTtcbkphY29iaWFuUG9pbnQuWkVSTyA9IG5ldyBKYWNvYmlhblBvaW50KF8wbiwgXzFuLCBfMG4pO1xuZnVuY3Rpb24gY29uc3RUaW1lTmVnYXRlKGNvbmRpdGlvbiwgaXRlbSkge1xuICAgIGNvbnN0IG5lZyA9IGl0ZW0ubmVnYXRlKCk7XG4gICAgcmV0dXJuIGNvbmRpdGlvbiA/IG5lZyA6IGl0ZW07XG59XG5jb25zdCBwb2ludFByZWNvbXB1dGVzID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBjbGFzcyBQb2ludCB7XG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH1cbiAgICBfc2V0V2luZG93U2l6ZSh3aW5kb3dTaXplKSB7XG4gICAgICAgIHRoaXMuX1dJTkRPV19TSVpFID0gd2luZG93U2l6ZTtcbiAgICAgICAgcG9pbnRQcmVjb21wdXRlcy5kZWxldGUodGhpcyk7XG4gICAgfVxuICAgIGhhc0V2ZW5ZKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ICUgXzJuID09PSBfMG47XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQ29tcHJlc3NlZEhleChieXRlcykge1xuICAgICAgICBjb25zdCBpc1Nob3J0ID0gYnl0ZXMubGVuZ3RoID09PSAzMjtcbiAgICAgICAgY29uc3QgeCA9IGJ5dGVzVG9OdW1iZXIoaXNTaG9ydCA/IGJ5dGVzIDogYnl0ZXMuc3ViYXJyYXkoMSkpO1xuICAgICAgICBpZiAoIWlzVmFsaWRGaWVsZEVsZW1lbnQoeCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BvaW50IGlzIG5vdCBvbiBjdXJ2ZScpO1xuICAgICAgICBjb25zdCB5MiA9IHdlaWVyc3RyYXNzKHgpO1xuICAgICAgICBsZXQgeSA9IHNxcnRNb2QoeTIpO1xuICAgICAgICBjb25zdCBpc1lPZGQgPSAoeSAmIF8xbikgPT09IF8xbjtcbiAgICAgICAgaWYgKGlzU2hvcnQpIHtcbiAgICAgICAgICAgIGlmIChpc1lPZGQpXG4gICAgICAgICAgICAgICAgeSA9IG1vZCgteSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpc0ZpcnN0Qnl0ZU9kZCA9IChieXRlc1swXSAmIDEpID09PSAxO1xuICAgICAgICAgICAgaWYgKGlzRmlyc3RCeXRlT2RkICE9PSBpc1lPZGQpXG4gICAgICAgICAgICAgICAgeSA9IG1vZCgteSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQoeCwgeSk7XG4gICAgICAgIHBvaW50LmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiBwb2ludDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21VbmNvbXByZXNzZWRIZXgoYnl0ZXMpIHtcbiAgICAgICAgY29uc3QgeCA9IGJ5dGVzVG9OdW1iZXIoYnl0ZXMuc3ViYXJyYXkoMSwgZmllbGRMZW4gKyAxKSk7XG4gICAgICAgIGNvbnN0IHkgPSBieXRlc1RvTnVtYmVyKGJ5dGVzLnN1YmFycmF5KGZpZWxkTGVuICsgMSwgZmllbGRMZW4gKiAyICsgMSkpO1xuICAgICAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICAgICAgcG9pbnQuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUhleChoZXgpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBlbnN1cmVCeXRlcyhoZXgpO1xuICAgICAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGJ5dGVzWzBdO1xuICAgICAgICBpZiAobGVuID09PSBmaWVsZExlbilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21Db21wcmVzc2VkSGV4KGJ5dGVzKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gY29tcHJlc3NlZExlbiAmJiAoaGVhZGVyID09PSAweDAyIHx8IGhlYWRlciA9PT0gMHgwMykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21Db21wcmVzc2VkSGV4KGJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuID09PSB1bmNvbXByZXNzZWRMZW4gJiYgaGVhZGVyID09PSAweDA0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVVuY29tcHJlc3NlZEhleChieXRlcyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUG9pbnQuZnJvbUhleDogcmVjZWl2ZWQgaW52YWxpZCBwb2ludC4gRXhwZWN0ZWQgMzItJHtjb21wcmVzc2VkTGVufSBjb21wcmVzc2VkIGJ5dGVzIG9yICR7dW5jb21wcmVzc2VkTGVufSB1bmNvbXByZXNzZWQgYnl0ZXMsIG5vdCAke2xlbn1gKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpIHtcbiAgICAgICAgcmV0dXJuIFBvaW50LkJBU0UubXVsdGlwbHkobm9ybWFsaXplUHJpdmF0ZUtleShwcml2YXRlS2V5KSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU2lnbmF0dXJlKG1zZ0hhc2gsIHNpZ25hdHVyZSwgcmVjb3ZlcnkpIHtcbiAgICAgICAgY29uc3QgeyByLCBzIH0gPSBub3JtYWxpemVTaWduYXR1cmUoc2lnbmF0dXJlKTtcbiAgICAgICAgaWYgKCFbMCwgMSwgMiwgM10uaW5jbHVkZXMocmVjb3ZlcnkpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVjb3ZlcjogaW52YWxpZCByZWNvdmVyeSBiaXQnKTtcbiAgICAgICAgY29uc3QgaCA9IHRydW5jYXRlSGFzaChlbnN1cmVCeXRlcyhtc2dIYXNoKSk7XG4gICAgICAgIGNvbnN0IHsgbiB9ID0gQ1VSVkU7XG4gICAgICAgIGNvbnN0IHJhZGogPSByZWNvdmVyeSA9PT0gMiB8fCByZWNvdmVyeSA9PT0gMyA/IHIgKyBuIDogcjtcbiAgICAgICAgY29uc3QgcmludiA9IGludmVydChyYWRqLCBuKTtcbiAgICAgICAgY29uc3QgdTEgPSBtb2QoLWggKiByaW52LCBuKTtcbiAgICAgICAgY29uc3QgdTIgPSBtb2QocyAqIHJpbnYsIG4pO1xuICAgICAgICBjb25zdCBwcmVmaXggPSByZWNvdmVyeSAmIDEgPyAnMDMnIDogJzAyJztcbiAgICAgICAgY29uc3QgUiA9IFBvaW50LmZyb21IZXgocHJlZml4ICsgbnVtVG8zMmJTdHIocmFkaikpO1xuICAgICAgICBjb25zdCBRID0gUG9pbnQuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShSLCB1MSwgdTIpO1xuICAgICAgICBpZiAoIVEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWNvdmVyIHNpZ25hdHVyZTogcG9pbnQgYXQgaW5maW5pZnknKTtcbiAgICAgICAgUS5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4gUTtcbiAgICB9XG4gICAgdG9SYXdCeXRlcyhpc0NvbXByZXNzZWQgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gaGV4VG9CeXRlcyh0aGlzLnRvSGV4KGlzQ29tcHJlc3NlZCkpO1xuICAgIH1cbiAgICB0b0hleChpc0NvbXByZXNzZWQgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCB4ID0gbnVtVG8zMmJTdHIodGhpcy54KTtcbiAgICAgICAgaWYgKGlzQ29tcHJlc3NlZCkge1xuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gdGhpcy5oYXNFdmVuWSgpID8gJzAyJyA6ICcwMyc7XG4gICAgICAgICAgICByZXR1cm4gYCR7cHJlZml4fSR7eH1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAwNCR7eH0ke251bVRvMzJiU3RyKHRoaXMueSl9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0hleFgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvSGV4KHRydWUpLnNsaWNlKDIpO1xuICAgIH1cbiAgICB0b1Jhd1goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvUmF3Qnl0ZXModHJ1ZSkuc2xpY2UoMSk7XG4gICAgfVxuICAgIGFzc2VydFZhbGlkaXR5KCkge1xuICAgICAgICBjb25zdCBtc2cgPSAnUG9pbnQgaXMgbm90IG9uIGVsbGlwdGljIGN1cnZlJztcbiAgICAgICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWlzVmFsaWRGaWVsZEVsZW1lbnQoeCkgfHwgIWlzVmFsaWRGaWVsZEVsZW1lbnQoeSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgY29uc3QgbGVmdCA9IG1vZCh5ICogeSk7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gd2VpZXJzdHJhc3MoeCk7XG4gICAgICAgIGlmIChtb2QobGVmdCAtIHJpZ2h0KSAhPT0gXzBuKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09PSBvdGhlci54ICYmIHRoaXMueSA9PT0gb3RoZXIueTtcbiAgICB9XG4gICAgbmVnYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgbW9kKC10aGlzLnkpKTtcbiAgICB9XG4gICAgZG91YmxlKCkge1xuICAgICAgICByZXR1cm4gSmFjb2JpYW5Qb2ludC5mcm9tQWZmaW5lKHRoaXMpLmRvdWJsZSgpLnRvQWZmaW5lKCk7XG4gICAgfVxuICAgIGFkZChvdGhlcikge1xuICAgICAgICByZXR1cm4gSmFjb2JpYW5Qb2ludC5mcm9tQWZmaW5lKHRoaXMpLmFkZChKYWNvYmlhblBvaW50LmZyb21BZmZpbmUob3RoZXIpKS50b0FmZmluZSgpO1xuICAgIH1cbiAgICBzdWJ0cmFjdChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQob3RoZXIubmVnYXRlKCkpO1xuICAgIH1cbiAgICBtdWx0aXBseShzY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIEphY29iaWFuUG9pbnQuZnJvbUFmZmluZSh0aGlzKS5tdWx0aXBseShzY2FsYXIsIHRoaXMpLnRvQWZmaW5lKCk7XG4gICAgfVxuICAgIG11bHRpcGx5QW5kQWRkVW5zYWZlKFEsIGEsIGIpIHtcbiAgICAgICAgY29uc3QgUCA9IEphY29iaWFuUG9pbnQuZnJvbUFmZmluZSh0aGlzKTtcbiAgICAgICAgY29uc3QgYVAgPSBhID09PSBfMG4gfHwgYSA9PT0gXzFuIHx8IHRoaXMgIT09IFBvaW50LkJBU0UgPyBQLm11bHRpcGx5VW5zYWZlKGEpIDogUC5tdWx0aXBseShhKTtcbiAgICAgICAgY29uc3QgYlEgPSBKYWNvYmlhblBvaW50LmZyb21BZmZpbmUoUSkubXVsdGlwbHlVbnNhZmUoYik7XG4gICAgICAgIGNvbnN0IHN1bSA9IGFQLmFkZChiUSk7XG4gICAgICAgIHJldHVybiBzdW0uZXF1YWxzKEphY29iaWFuUG9pbnQuWkVSTykgPyB1bmRlZmluZWQgOiBzdW0udG9BZmZpbmUoKTtcbiAgICB9XG59XG5Qb2ludC5CQVNFID0gbmV3IFBvaW50KENVUlZFLkd4LCBDVVJWRS5HeSk7XG5Qb2ludC5aRVJPID0gbmV3IFBvaW50KF8wbiwgXzBuKTtcbmZ1bmN0aW9uIHNsaWNlREVSKHMpIHtcbiAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHNbMF0sIDE2KSA+PSA4ID8gJzAwJyArIHMgOiBzO1xufVxuZnVuY3Rpb24gcGFyc2VERVJJbnQoZGF0YSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA8IDIgfHwgZGF0YVswXSAhPT0gMHgwMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2lnbmF0dXJlIGludGVnZXIgdGFnOiAke2J5dGVzVG9IZXgoZGF0YSl9YCk7XG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IGRhdGFbMV07XG4gICAgY29uc3QgcmVzID0gZGF0YS5zdWJhcnJheSgyLCBsZW4gKyAyKTtcbiAgICBpZiAoIWxlbiB8fCByZXMubGVuZ3RoICE9PSBsZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNpZ25hdHVyZSBpbnRlZ2VyOiB3cm9uZyBsZW5ndGhgKTtcbiAgICB9XG4gICAgaWYgKHJlc1swXSA9PT0gMHgwMCAmJiByZXNbMV0gPD0gMHg3Zikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIGludGVnZXI6IHRyYWlsaW5nIGxlbmd0aCcpO1xuICAgIH1cbiAgICByZXR1cm4geyBkYXRhOiBieXRlc1RvTnVtYmVyKHJlcyksIGxlZnQ6IGRhdGEuc3ViYXJyYXkobGVuICsgMikgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlREVSU2lnbmF0dXJlKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAyIHx8IGRhdGFbMF0gIT0gMHgzMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2lnbmF0dXJlIHRhZzogJHtieXRlc1RvSGV4KGRhdGEpfWApO1xuICAgIH1cbiAgICBpZiAoZGF0YVsxXSAhPT0gZGF0YS5sZW5ndGggLSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaWduYXR1cmU6IGluY29ycmVjdCBsZW5ndGgnKTtcbiAgICB9XG4gICAgY29uc3QgeyBkYXRhOiByLCBsZWZ0OiBzQnl0ZXMgfSA9IHBhcnNlREVSSW50KGRhdGEuc3ViYXJyYXkoMikpO1xuICAgIGNvbnN0IHsgZGF0YTogcywgbGVmdDogckJ5dGVzTGVmdCB9ID0gcGFyc2VERVJJbnQoc0J5dGVzKTtcbiAgICBpZiAockJ5dGVzTGVmdC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNpZ25hdHVyZTogbGVmdCBieXRlcyBhZnRlciBwYXJzaW5nOiAke2J5dGVzVG9IZXgockJ5dGVzTGVmdCl9YCk7XG4gICAgfVxuICAgIHJldHVybiB7IHIsIHMgfTtcbn1cbmV4cG9ydCBjbGFzcyBTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKHIsIHMpIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5zID0gcztcbiAgICAgICAgdGhpcy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUNvbXBhY3QoaGV4KSB7XG4gICAgICAgIGNvbnN0IGFyciA9IGhleCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAnU2lnbmF0dXJlLmZyb21Db21wYWN0JztcbiAgICAgICAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnICYmICFhcnIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke25hbWV9OiBFeHBlY3RlZCBzdHJpbmcgb3IgVWludDhBcnJheWApO1xuICAgICAgICBjb25zdCBzdHIgPSBhcnIgPyBieXRlc1RvSGV4KGhleCkgOiBoZXg7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoICE9PSAxMjgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX06IEV4cGVjdGVkIDY0LWJ5dGUgaGV4YCk7XG4gICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKGhleFRvTnVtYmVyKHN0ci5zbGljZSgwLCA2NCkpLCBoZXhUb051bWJlcihzdHIuc2xpY2UoNjQsIDEyOCkpKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21ERVIoaGV4KSB7XG4gICAgICAgIGNvbnN0IGFyciA9IGhleCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk7XG4gICAgICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJyAmJiAhYXJyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgU2lnbmF0dXJlLmZyb21ERVI6IEV4cGVjdGVkIHN0cmluZyBvciBVaW50OEFycmF5YCk7XG4gICAgICAgIGNvbnN0IHsgciwgcyB9ID0gcGFyc2VERVJTaWduYXR1cmUoYXJyID8gaGV4IDogaGV4VG9CeXRlcyhoZXgpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaWduYXR1cmUociwgcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSGV4KGhleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tREVSKGhleCk7XG4gICAgfVxuICAgIGFzc2VydFZhbGlkaXR5KCkge1xuICAgICAgICBjb25zdCB7IHIsIHMgfSA9IHRoaXM7XG4gICAgICAgIGlmICghaXNXaXRoaW5DdXJ2ZU9yZGVyKHIpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFNpZ25hdHVyZTogciBtdXN0IGJlIDAgPCByIDwgbicpO1xuICAgICAgICBpZiAoIWlzV2l0aGluQ3VydmVPcmRlcihzKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBTaWduYXR1cmU6IHMgbXVzdCBiZSAwIDwgcyA8IG4nKTtcbiAgICB9XG4gICAgaGFzSGlnaFMoKSB7XG4gICAgICAgIGNvbnN0IEhBTEYgPSBDVVJWRS5uID4+IF8xbjtcbiAgICAgICAgcmV0dXJuIHRoaXMucyA+IEhBTEY7XG4gICAgfVxuICAgIG5vcm1hbGl6ZVMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0hpZ2hTKCkgPyBuZXcgU2lnbmF0dXJlKHRoaXMuciwgbW9kKC10aGlzLnMsIENVUlZFLm4pKSA6IHRoaXM7XG4gICAgfVxuICAgIHRvREVSUmF3Qnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiBoZXhUb0J5dGVzKHRoaXMudG9ERVJIZXgoKSk7XG4gICAgfVxuICAgIHRvREVSSGV4KCkge1xuICAgICAgICBjb25zdCBzSGV4ID0gc2xpY2VERVIobnVtYmVyVG9IZXhVbnBhZGRlZCh0aGlzLnMpKTtcbiAgICAgICAgY29uc3QgckhleCA9IHNsaWNlREVSKG51bWJlclRvSGV4VW5wYWRkZWQodGhpcy5yKSk7XG4gICAgICAgIGNvbnN0IHNIZXhMID0gc0hleC5sZW5ndGggLyAyO1xuICAgICAgICBjb25zdCBySGV4TCA9IHJIZXgubGVuZ3RoIC8gMjtcbiAgICAgICAgY29uc3Qgc0xlbiA9IG51bWJlclRvSGV4VW5wYWRkZWQoc0hleEwpO1xuICAgICAgICBjb25zdCByTGVuID0gbnVtYmVyVG9IZXhVbnBhZGRlZChySGV4TCk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IG51bWJlclRvSGV4VW5wYWRkZWQockhleEwgKyBzSGV4TCArIDQpO1xuICAgICAgICByZXR1cm4gYDMwJHtsZW5ndGh9MDIke3JMZW59JHtySGV4fTAyJHtzTGVufSR7c0hleH1gO1xuICAgIH1cbiAgICB0b1Jhd0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0RFUlJhd0J5dGVzKCk7XG4gICAgfVxuICAgIHRvSGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0RFUkhleCgpO1xuICAgIH1cbiAgICB0b0NvbXBhY3RSYXdCeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXModGhpcy50b0NvbXBhY3RIZXgoKSk7XG4gICAgfVxuICAgIHRvQ29tcGFjdEhleCgpIHtcbiAgICAgICAgcmV0dXJuIG51bVRvMzJiU3RyKHRoaXMucikgKyBudW1UbzMyYlN0cih0aGlzLnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbmNhdEJ5dGVzKC4uLmFycmF5cykge1xuICAgIGlmICghYXJyYXlzLmV2ZXJ5KChiKSA9PiBiIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBsaXN0IGV4cGVjdGVkJyk7XG4gICAgaWYgKGFycmF5cy5sZW5ndGggPT09IDEpXG4gICAgICAgIHJldHVybiBhcnJheXNbMF07XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXlzLnJlZHVjZSgoYSwgYXJyKSA9PiBhICsgYXJyLmxlbmd0aCwgMCk7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgcGFkID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhcnIgPSBhcnJheXNbaV07XG4gICAgICAgIHJlc3VsdC5zZXQoYXJyLCBwYWQpO1xuICAgICAgICBwYWQgKz0gYXJyLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IGhleGVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMjU2IH0sICh2LCBpKSA9PiBpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKTtcbmZ1bmN0aW9uIGJ5dGVzVG9IZXgodWludDhhKSB7XG4gICAgaWYgKCEodWludDhhIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xuICAgIGxldCBoZXggPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVpbnQ4YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBoZXggKz0gaGV4ZXNbdWludDhhW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbmNvbnN0IFBPV18yXzI1NiA9IEJpZ0ludCgnMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpO1xuZnVuY3Rpb24gbnVtVG8zMmJTdHIobnVtKSB7XG4gICAgaWYgKHR5cGVvZiBudW0gIT09ICdiaWdpbnQnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGJpZ2ludCcpO1xuICAgIGlmICghKF8wbiA8PSBudW0gJiYgbnVtIDwgUE9XXzJfMjU2KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBudW1iZXIgMCA8PSBuIDwgMl4yNTYnKTtcbiAgICByZXR1cm4gbnVtLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg2NCwgJzAnKTtcbn1cbmZ1bmN0aW9uIG51bVRvMzJiKG51bSkge1xuICAgIGNvbnN0IGIgPSBoZXhUb0J5dGVzKG51bVRvMzJiU3RyKG51bSkpO1xuICAgIGlmIChiLmxlbmd0aCAhPT0gMzIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3I6IGV4cGVjdGVkIDMyIGJ5dGVzJyk7XG4gICAgcmV0dXJuIGI7XG59XG5mdW5jdGlvbiBudW1iZXJUb0hleFVucGFkZGVkKG51bSkge1xuICAgIGNvbnN0IGhleCA9IG51bS50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIGhleC5sZW5ndGggJiAxID8gYDAke2hleH1gIDogaGV4O1xufVxuZnVuY3Rpb24gaGV4VG9OdW1iZXIoaGV4KSB7XG4gICAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hleFRvTnVtYmVyOiBleHBlY3RlZCBzdHJpbmcsIGdvdCAnICsgdHlwZW9mIGhleCk7XG4gICAgfVxuICAgIHJldHVybiBCaWdJbnQoYDB4JHtoZXh9YCk7XG59XG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleCkge1xuICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoZXhUb0J5dGVzOiBleHBlY3RlZCBzdHJpbmcsIGdvdCAnICsgdHlwZW9mIGhleCk7XG4gICAgfVxuICAgIGlmIChoZXgubGVuZ3RoICUgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXhUb0J5dGVzOiByZWNlaXZlZCBpbnZhbGlkIHVucGFkZGVkIGhleCcgKyBoZXgubGVuZ3RoKTtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGogPSBpICogMjtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGhleC5zbGljZShqLCBqICsgMik7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSBOdW1iZXIucGFyc2VJbnQoaGV4Qnl0ZSwgMTYpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGJ5dGUpIHx8IGJ5dGUgPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgc2VxdWVuY2UnKTtcbiAgICAgICAgYXJyYXlbaV0gPSBieXRlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBieXRlc1RvTnVtYmVyKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGhleFRvTnVtYmVyKGJ5dGVzVG9IZXgoYnl0ZXMpKTtcbn1cbmZ1bmN0aW9uIGVuc3VyZUJ5dGVzKGhleCkge1xuICAgIHJldHVybiBoZXggaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gVWludDhBcnJheS5mcm9tKGhleCkgOiBoZXhUb0J5dGVzKGhleCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTY2FsYXIobnVtKSB7XG4gICAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInICYmIE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bSkgJiYgbnVtID4gMClcbiAgICAgICAgcmV0dXJuIEJpZ0ludChudW0pO1xuICAgIGlmICh0eXBlb2YgbnVtID09PSAnYmlnaW50JyAmJiBpc1dpdGhpbkN1cnZlT3JkZXIobnVtKSlcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB2YWxpZCBwcml2YXRlIHNjYWxhcjogMCA8IHNjYWxhciA8IGN1cnZlLm4nKTtcbn1cbmZ1bmN0aW9uIG1vZChhLCBiID0gQ1VSVkUuUCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGEgJSBiO1xuICAgIHJldHVybiByZXN1bHQgPj0gXzBuID8gcmVzdWx0IDogYiArIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBvdzIoeCwgcG93ZXIpIHtcbiAgICBjb25zdCB7IFAgfSA9IENVUlZFO1xuICAgIGxldCByZXMgPSB4O1xuICAgIHdoaWxlIChwb3dlci0tID4gXzBuKSB7XG4gICAgICAgIHJlcyAqPSByZXM7XG4gICAgICAgIHJlcyAlPSBQO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gc3FydE1vZCh4KSB7XG4gICAgY29uc3QgeyBQIH0gPSBDVVJWRTtcbiAgICBjb25zdCBfNm4gPSBCaWdJbnQoNik7XG4gICAgY29uc3QgXzExbiA9IEJpZ0ludCgxMSk7XG4gICAgY29uc3QgXzIybiA9IEJpZ0ludCgyMik7XG4gICAgY29uc3QgXzIzbiA9IEJpZ0ludCgyMyk7XG4gICAgY29uc3QgXzQ0biA9IEJpZ0ludCg0NCk7XG4gICAgY29uc3QgXzg4biA9IEJpZ0ludCg4OCk7XG4gICAgY29uc3QgYjIgPSAoeCAqIHggKiB4KSAlIFA7XG4gICAgY29uc3QgYjMgPSAoYjIgKiBiMiAqIHgpICUgUDtcbiAgICBjb25zdCBiNiA9IChwb3cyKGIzLCBfM24pICogYjMpICUgUDtcbiAgICBjb25zdCBiOSA9IChwb3cyKGI2LCBfM24pICogYjMpICUgUDtcbiAgICBjb25zdCBiMTEgPSAocG93MihiOSwgXzJuKSAqIGIyKSAlIFA7XG4gICAgY29uc3QgYjIyID0gKHBvdzIoYjExLCBfMTFuKSAqIGIxMSkgJSBQO1xuICAgIGNvbnN0IGI0NCA9IChwb3cyKGIyMiwgXzIybikgKiBiMjIpICUgUDtcbiAgICBjb25zdCBiODggPSAocG93MihiNDQsIF80NG4pICogYjQ0KSAlIFA7XG4gICAgY29uc3QgYjE3NiA9IChwb3cyKGI4OCwgXzg4bikgKiBiODgpICUgUDtcbiAgICBjb25zdCBiMjIwID0gKHBvdzIoYjE3NiwgXzQ0bikgKiBiNDQpICUgUDtcbiAgICBjb25zdCBiMjIzID0gKHBvdzIoYjIyMCwgXzNuKSAqIGIzKSAlIFA7XG4gICAgY29uc3QgdDEgPSAocG93MihiMjIzLCBfMjNuKSAqIGIyMikgJSBQO1xuICAgIGNvbnN0IHQyID0gKHBvdzIodDEsIF82bikgKiBiMikgJSBQO1xuICAgIGNvbnN0IHJ0ID0gcG93Mih0MiwgXzJuKTtcbiAgICBjb25zdCB4YyA9IChydCAqIHJ0KSAlIFA7XG4gICAgaWYgKHhjICE9PSB4KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIHNxdWFyZSByb290Jyk7XG4gICAgcmV0dXJuIHJ0O1xufVxuZnVuY3Rpb24gaW52ZXJ0KG51bWJlciwgbW9kdWxvID0gQ1VSVkUuUCkge1xuICAgIGlmIChudW1iZXIgPT09IF8wbiB8fCBtb2R1bG8gPD0gXzBuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52ZXJ0OiBleHBlY3RlZCBwb3NpdGl2ZSBpbnRlZ2VycywgZ290IG49JHtudW1iZXJ9IG1vZD0ke21vZHVsb31gKTtcbiAgICB9XG4gICAgbGV0IGEgPSBtb2QobnVtYmVyLCBtb2R1bG8pO1xuICAgIGxldCBiID0gbW9kdWxvO1xuICAgIGxldCB4ID0gXzBuLCB5ID0gXzFuLCB1ID0gXzFuLCB2ID0gXzBuO1xuICAgIHdoaWxlIChhICE9PSBfMG4pIHtcbiAgICAgICAgY29uc3QgcSA9IGIgLyBhO1xuICAgICAgICBjb25zdCByID0gYiAlIGE7XG4gICAgICAgIGNvbnN0IG0gPSB4IC0gdSAqIHE7XG4gICAgICAgIGNvbnN0IG4gPSB5IC0gdiAqIHE7XG4gICAgICAgIGIgPSBhLCBhID0gciwgeCA9IHUsIHkgPSB2LCB1ID0gbSwgdiA9IG47XG4gICAgfVxuICAgIGNvbnN0IGdjZCA9IGI7XG4gICAgaWYgKGdjZCAhPT0gXzFuKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmVydDogZG9lcyBub3QgZXhpc3QnKTtcbiAgICByZXR1cm4gbW9kKHgsIG1vZHVsbyk7XG59XG5mdW5jdGlvbiBpbnZlcnRCYXRjaChudW1zLCBwID0gQ1VSVkUuUCkge1xuICAgIGNvbnN0IHNjcmF0Y2ggPSBuZXcgQXJyYXkobnVtcy5sZW5ndGgpO1xuICAgIGNvbnN0IGxhc3RNdWx0aXBsaWVkID0gbnVtcy5yZWR1Y2UoKGFjYywgbnVtLCBpKSA9PiB7XG4gICAgICAgIGlmIChudW0gPT09IF8wbilcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIHNjcmF0Y2hbaV0gPSBhY2M7XG4gICAgICAgIHJldHVybiBtb2QoYWNjICogbnVtLCBwKTtcbiAgICB9LCBfMW4pO1xuICAgIGNvbnN0IGludmVydGVkID0gaW52ZXJ0KGxhc3RNdWx0aXBsaWVkLCBwKTtcbiAgICBudW1zLnJlZHVjZVJpZ2h0KChhY2MsIG51bSwgaSkgPT4ge1xuICAgICAgICBpZiAobnVtID09PSBfMG4pXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICBzY3JhdGNoW2ldID0gbW9kKGFjYyAqIHNjcmF0Y2hbaV0sIHApO1xuICAgICAgICByZXR1cm4gbW9kKGFjYyAqIG51bSwgcCk7XG4gICAgfSwgaW52ZXJ0ZWQpO1xuICAgIHJldHVybiBzY3JhdGNoO1xufVxuZnVuY3Rpb24gYml0czJpbnRfMihieXRlcykge1xuICAgIGNvbnN0IGRlbHRhID0gYnl0ZXMubGVuZ3RoICogOCAtIGdyb3VwTGVuICogODtcbiAgICBjb25zdCBudW0gPSBieXRlc1RvTnVtYmVyKGJ5dGVzKTtcbiAgICByZXR1cm4gZGVsdGEgPiAwID8gbnVtID4+IEJpZ0ludChkZWx0YSkgOiBudW07XG59XG5mdW5jdGlvbiB0cnVuY2F0ZUhhc2goaGFzaCwgdHJ1bmNhdGVPbmx5ID0gZmFsc2UpIHtcbiAgICBjb25zdCBoID0gYml0czJpbnRfMihoYXNoKTtcbiAgICBpZiAodHJ1bmNhdGVPbmx5KVxuICAgICAgICByZXR1cm4gaDtcbiAgICBjb25zdCB7IG4gfSA9IENVUlZFO1xuICAgIHJldHVybiBoID49IG4gPyBoIC0gbiA6IGg7XG59XG5sZXQgX3NoYTI1NlN5bmM7XG5sZXQgX2htYWNTaGEyNTZTeW5jO1xuY2xhc3MgSG1hY0RyYmcge1xuICAgIGNvbnN0cnVjdG9yKGhhc2hMZW4sIHFCeXRlTGVuKSB7XG4gICAgICAgIHRoaXMuaGFzaExlbiA9IGhhc2hMZW47XG4gICAgICAgIHRoaXMucUJ5dGVMZW4gPSBxQnl0ZUxlbjtcbiAgICAgICAgaWYgKHR5cGVvZiBoYXNoTGVuICE9PSAnbnVtYmVyJyB8fCBoYXNoTGVuIDwgMilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaGFzaExlbiBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIGlmICh0eXBlb2YgcUJ5dGVMZW4gIT09ICdudW1iZXInIHx8IHFCeXRlTGVuIDwgMilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncUJ5dGVMZW4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgICAgICB0aGlzLnYgPSBuZXcgVWludDhBcnJheShoYXNoTGVuKS5maWxsKDEpO1xuICAgICAgICB0aGlzLmsgPSBuZXcgVWludDhBcnJheShoYXNoTGVuKS5maWxsKDApO1xuICAgICAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIH1cbiAgICBobWFjKC4uLnZhbHVlcykge1xuICAgICAgICByZXR1cm4gdXRpbHMuaG1hY1NoYTI1Nih0aGlzLmssIC4uLnZhbHVlcyk7XG4gICAgfVxuICAgIGhtYWNTeW5jKC4uLnZhbHVlcykge1xuICAgICAgICByZXR1cm4gX2htYWNTaGEyNTZTeW5jKHRoaXMuaywgLi4udmFsdWVzKTtcbiAgICB9XG4gICAgY2hlY2tTeW5jKCkge1xuICAgICAgICBpZiAodHlwZW9mIF9obWFjU2hhMjU2U3luYyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBTaGFFcnJvcignaG1hY1NoYTI1NlN5bmMgbmVlZHMgdG8gYmUgc2V0Jyk7XG4gICAgfVxuICAgIGluY3IoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvdW50ZXIgPj0gMTAwMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVHJpZWQgMSwwMDAgayB2YWx1ZXMgZm9yIHNpZ24oKSwgYWxsIHdlcmUgaW52YWxpZCcpO1xuICAgICAgICB0aGlzLmNvdW50ZXIgKz0gMTtcbiAgICB9XG4gICAgYXN5bmMgcmVzZWVkKHNlZWQgPSBuZXcgVWludDhBcnJheSgpKSB7XG4gICAgICAgIHRoaXMuayA9IGF3YWl0IHRoaXMuaG1hYyh0aGlzLnYsIFVpbnQ4QXJyYXkuZnJvbShbMHgwMF0pLCBzZWVkKTtcbiAgICAgICAgdGhpcy52ID0gYXdhaXQgdGhpcy5obWFjKHRoaXMudik7XG4gICAgICAgIGlmIChzZWVkLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5rID0gYXdhaXQgdGhpcy5obWFjKHRoaXMudiwgVWludDhBcnJheS5mcm9tKFsweDAxXSksIHNlZWQpO1xuICAgICAgICB0aGlzLnYgPSBhd2FpdCB0aGlzLmhtYWModGhpcy52KTtcbiAgICB9XG4gICAgcmVzZWVkU3luYyhzZWVkID0gbmV3IFVpbnQ4QXJyYXkoKSkge1xuICAgICAgICB0aGlzLmNoZWNrU3luYygpO1xuICAgICAgICB0aGlzLmsgPSB0aGlzLmhtYWNTeW5jKHRoaXMudiwgVWludDhBcnJheS5mcm9tKFsweDAwXSksIHNlZWQpO1xuICAgICAgICB0aGlzLnYgPSB0aGlzLmhtYWNTeW5jKHRoaXMudik7XG4gICAgICAgIGlmIChzZWVkLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5rID0gdGhpcy5obWFjU3luYyh0aGlzLnYsIFVpbnQ4QXJyYXkuZnJvbShbMHgwMV0pLCBzZWVkKTtcbiAgICAgICAgdGhpcy52ID0gdGhpcy5obWFjU3luYyh0aGlzLnYpO1xuICAgIH1cbiAgICBhc3luYyBnZW5lcmF0ZSgpIHtcbiAgICAgICAgdGhpcy5pbmNyKCk7XG4gICAgICAgIGxldCBsZW4gPSAwO1xuICAgICAgICBjb25zdCBvdXQgPSBbXTtcbiAgICAgICAgd2hpbGUgKGxlbiA8IHRoaXMucUJ5dGVMZW4pIHtcbiAgICAgICAgICAgIHRoaXMudiA9IGF3YWl0IHRoaXMuaG1hYyh0aGlzLnYpO1xuICAgICAgICAgICAgY29uc3Qgc2wgPSB0aGlzLnYuc2xpY2UoKTtcbiAgICAgICAgICAgIG91dC5wdXNoKHNsKTtcbiAgICAgICAgICAgIGxlbiArPSB0aGlzLnYubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25jYXRCeXRlcyguLi5vdXQpO1xuICAgIH1cbiAgICBnZW5lcmF0ZVN5bmMoKSB7XG4gICAgICAgIHRoaXMuY2hlY2tTeW5jKCk7XG4gICAgICAgIHRoaXMuaW5jcigpO1xuICAgICAgICBsZXQgbGVuID0gMDtcbiAgICAgICAgY29uc3Qgb3V0ID0gW107XG4gICAgICAgIHdoaWxlIChsZW4gPCB0aGlzLnFCeXRlTGVuKSB7XG4gICAgICAgICAgICB0aGlzLnYgPSB0aGlzLmhtYWNTeW5jKHRoaXMudik7XG4gICAgICAgICAgICBjb25zdCBzbCA9IHRoaXMudi5zbGljZSgpO1xuICAgICAgICAgICAgb3V0LnB1c2goc2wpO1xuICAgICAgICAgICAgbGVuICs9IHRoaXMudi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbmNhdEJ5dGVzKC4uLm91dCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNXaXRoaW5DdXJ2ZU9yZGVyKG51bSkge1xuICAgIHJldHVybiBfMG4gPCBudW0gJiYgbnVtIDwgQ1VSVkUubjtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRGaWVsZEVsZW1lbnQobnVtKSB7XG4gICAgcmV0dXJuIF8wbiA8IG51bSAmJiBudW0gPCBDVVJWRS5QO1xufVxuZnVuY3Rpb24ga21kVG9TaWcoa0J5dGVzLCBtLCBkLCBsb3dTID0gdHJ1ZSkge1xuICAgIGNvbnN0IHsgbiB9ID0gQ1VSVkU7XG4gICAgY29uc3QgayA9IHRydW5jYXRlSGFzaChrQnl0ZXMsIHRydWUpO1xuICAgIGlmICghaXNXaXRoaW5DdXJ2ZU9yZGVyKGspKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3Qga2ludiA9IGludmVydChrLCBuKTtcbiAgICBjb25zdCBxID0gUG9pbnQuQkFTRS5tdWx0aXBseShrKTtcbiAgICBjb25zdCByID0gbW9kKHEueCwgbik7XG4gICAgaWYgKHIgPT09IF8wbilcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHMgPSBtb2Qoa2ludiAqIG1vZChtICsgZCAqIHIsIG4pLCBuKTtcbiAgICBpZiAocyA9PT0gXzBuKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHNpZyA9IG5ldyBTaWduYXR1cmUociwgcyk7XG4gICAgbGV0IHJlY292ZXJ5ID0gKHEueCA9PT0gc2lnLnIgPyAwIDogMikgfCBOdW1iZXIocS55ICYgXzFuKTtcbiAgICBpZiAobG93UyAmJiBzaWcuaGFzSGlnaFMoKSkge1xuICAgICAgICBzaWcgPSBzaWcubm9ybWFsaXplUygpO1xuICAgICAgICByZWNvdmVyeSBePSAxO1xuICAgIH1cbiAgICByZXR1cm4geyBzaWcsIHJlY292ZXJ5IH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVQcml2YXRlS2V5KGtleSkge1xuICAgIGxldCBudW07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIG51bSA9IGtleTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGtleSA9PT0gJ251bWJlcicgJiYgTnVtYmVyLmlzU2FmZUludGVnZXIoa2V5KSAmJiBrZXkgPiAwKSB7XG4gICAgICAgIG51bSA9IEJpZ0ludChrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoa2V5Lmxlbmd0aCAhPT0gMiAqIGdyb3VwTGVuKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCAzMiBieXRlcyBvZiBwcml2YXRlIGtleScpO1xuICAgICAgICBudW0gPSBoZXhUb051bWJlcihrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGlmIChrZXkubGVuZ3RoICE9PSBncm91cExlbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgMzIgYnl0ZXMgb2YgcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgbnVtID0gYnl0ZXNUb051bWJlcihrZXkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdmFsaWQgcHJpdmF0ZSBrZXknKTtcbiAgICB9XG4gICAgaWYgKCFpc1dpdGhpbkN1cnZlT3JkZXIobnVtKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBwcml2YXRlIGtleTogMCA8IGtleSA8IG4nKTtcbiAgICByZXR1cm4gbnVtO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHVibGljS2V5KHB1YmxpY0tleSkge1xuICAgIGlmIChwdWJsaWNLZXkgaW5zdGFuY2VvZiBQb2ludCkge1xuICAgICAgICBwdWJsaWNLZXkuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIHB1YmxpY0tleTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBQb2ludC5mcm9tSGV4KHB1YmxpY0tleSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICAgIGlmIChzaWduYXR1cmUgaW5zdGFuY2VvZiBTaWduYXR1cmUpIHtcbiAgICAgICAgc2lnbmF0dXJlLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmU7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBTaWduYXR1cmUuZnJvbURFUihzaWduYXR1cmUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFNpZ25hdHVyZS5mcm9tQ29tcGFjdChzaWduYXR1cmUpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQdWJsaWNLZXkocHJpdmF0ZUtleSwgaXNDb21wcmVzc2VkID0gZmFsc2UpIHtcbiAgICByZXR1cm4gUG9pbnQuZnJvbVByaXZhdGVLZXkocHJpdmF0ZUtleSkudG9SYXdCeXRlcyhpc0NvbXByZXNzZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSwgaXNDb21wcmVzc2VkID0gZmFsc2UpIHtcbiAgICByZXR1cm4gUG9pbnQuZnJvbVNpZ25hdHVyZShtc2dIYXNoLCBzaWduYXR1cmUsIHJlY292ZXJ5KS50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCk7XG59XG5mdW5jdGlvbiBpc1Byb2JQdWIoaXRlbSkge1xuICAgIGNvbnN0IGFyciA9IGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5O1xuICAgIGNvbnN0IHN0ciA9IHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJztcbiAgICBjb25zdCBsZW4gPSAoYXJyIHx8IHN0cikgJiYgaXRlbS5sZW5ndGg7XG4gICAgaWYgKGFycilcbiAgICAgICAgcmV0dXJuIGxlbiA9PT0gY29tcHJlc3NlZExlbiB8fCBsZW4gPT09IHVuY29tcHJlc3NlZExlbjtcbiAgICBpZiAoc3RyKVxuICAgICAgICByZXR1cm4gbGVuID09PSBjb21wcmVzc2VkTGVuICogMiB8fCBsZW4gPT09IHVuY29tcHJlc3NlZExlbiAqIDI7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBQb2ludClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNoYXJlZFNlY3JldChwcml2YXRlQSwgcHVibGljQiwgaXNDb21wcmVzc2VkID0gZmFsc2UpIHtcbiAgICBpZiAoaXNQcm9iUHViKHByaXZhdGVBKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0U2hhcmVkU2VjcmV0OiBmaXJzdCBhcmcgbXVzdCBiZSBwcml2YXRlIGtleScpO1xuICAgIGlmICghaXNQcm9iUHViKHB1YmxpY0IpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXRTaGFyZWRTZWNyZXQ6IHNlY29uZCBhcmcgbXVzdCBiZSBwdWJsaWMga2V5Jyk7XG4gICAgY29uc3QgYiA9IG5vcm1hbGl6ZVB1YmxpY0tleShwdWJsaWNCKTtcbiAgICBiLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgcmV0dXJuIGIubXVsdGlwbHkobm9ybWFsaXplUHJpdmF0ZUtleShwcml2YXRlQSkpLnRvUmF3Qnl0ZXMoaXNDb21wcmVzc2VkKTtcbn1cbmZ1bmN0aW9uIGJpdHMyaW50KGJ5dGVzKSB7XG4gICAgY29uc3Qgc2xpY2UgPSBieXRlcy5sZW5ndGggPiBmaWVsZExlbiA/IGJ5dGVzLnNsaWNlKDAsIGZpZWxkTGVuKSA6IGJ5dGVzO1xuICAgIHJldHVybiBieXRlc1RvTnVtYmVyKHNsaWNlKTtcbn1cbmZ1bmN0aW9uIGJpdHMyb2N0ZXRzKGJ5dGVzKSB7XG4gICAgY29uc3QgejEgPSBiaXRzMmludChieXRlcyk7XG4gICAgY29uc3QgejIgPSBtb2QoejEsIENVUlZFLm4pO1xuICAgIHJldHVybiBpbnQyb2N0ZXRzKHoyIDwgXzBuID8gejEgOiB6Mik7XG59XG5mdW5jdGlvbiBpbnQyb2N0ZXRzKG51bSkge1xuICAgIHJldHVybiBudW1UbzMyYihudW0pO1xufVxuZnVuY3Rpb24gaW5pdFNpZ0FyZ3MobXNnSGFzaCwgcHJpdmF0ZUtleSwgZXh0cmFFbnRyb3B5KSB7XG4gICAgaWYgKG1zZ0hhc2ggPT0gbnVsbClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzaWduOiBleHBlY3RlZCB2YWxpZCBtZXNzYWdlIGhhc2gsIG5vdCBcIiR7bXNnSGFzaH1cImApO1xuICAgIGNvbnN0IGgxID0gZW5zdXJlQnl0ZXMobXNnSGFzaCk7XG4gICAgY29uc3QgZCA9IG5vcm1hbGl6ZVByaXZhdGVLZXkocHJpdmF0ZUtleSk7XG4gICAgY29uc3Qgc2VlZEFyZ3MgPSBbaW50Mm9jdGV0cyhkKSwgYml0czJvY3RldHMoaDEpXTtcbiAgICBpZiAoZXh0cmFFbnRyb3B5ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGV4dHJhRW50cm9weSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIGV4dHJhRW50cm9weSA9IHV0aWxzLnJhbmRvbUJ5dGVzKGZpZWxkTGVuKTtcbiAgICAgICAgY29uc3QgZSA9IGVuc3VyZUJ5dGVzKGV4dHJhRW50cm9weSk7XG4gICAgICAgIGlmIChlLmxlbmd0aCAhPT0gZmllbGRMZW4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHNpZ246IEV4cGVjdGVkICR7ZmllbGRMZW59IGJ5dGVzIG9mIGV4dHJhIGRhdGFgKTtcbiAgICAgICAgc2VlZEFyZ3MucHVzaChlKTtcbiAgICB9XG4gICAgY29uc3Qgc2VlZCA9IGNvbmNhdEJ5dGVzKC4uLnNlZWRBcmdzKTtcbiAgICBjb25zdCBtID0gYml0czJpbnQoaDEpO1xuICAgIHJldHVybiB7IHNlZWQsIG0sIGQgfTtcbn1cbmZ1bmN0aW9uIGZpbmFsaXplU2lnKHJlY1NpZywgb3B0cykge1xuICAgIGNvbnN0IHsgc2lnLCByZWNvdmVyeSB9ID0gcmVjU2lnO1xuICAgIGNvbnN0IHsgZGVyLCByZWNvdmVyZWQgfSA9IE9iamVjdC5hc3NpZ24oeyBjYW5vbmljYWw6IHRydWUsIGRlcjogdHJ1ZSB9LCBvcHRzKTtcbiAgICBjb25zdCBoYXNoZWQgPSBkZXIgPyBzaWcudG9ERVJSYXdCeXRlcygpIDogc2lnLnRvQ29tcGFjdFJhd0J5dGVzKCk7XG4gICAgcmV0dXJuIHJlY292ZXJlZCA/IFtoYXNoZWQsIHJlY292ZXJ5XSA6IGhhc2hlZDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ24obXNnSGFzaCwgcHJpdktleSwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgeyBzZWVkLCBtLCBkIH0gPSBpbml0U2lnQXJncyhtc2dIYXNoLCBwcml2S2V5LCBvcHRzLmV4dHJhRW50cm9weSk7XG4gICAgY29uc3QgZHJiZyA9IG5ldyBIbWFjRHJiZyhoYXNoTGVuLCBncm91cExlbik7XG4gICAgYXdhaXQgZHJiZy5yZXNlZWQoc2VlZCk7XG4gICAgbGV0IHNpZztcbiAgICB3aGlsZSAoIShzaWcgPSBrbWRUb1NpZyhhd2FpdCBkcmJnLmdlbmVyYXRlKCksIG0sIGQsIG9wdHMuY2Fub25pY2FsKSkpXG4gICAgICAgIGF3YWl0IGRyYmcucmVzZWVkKCk7XG4gICAgcmV0dXJuIGZpbmFsaXplU2lnKHNpZywgb3B0cyk7XG59XG5mdW5jdGlvbiBzaWduU3luYyhtc2dIYXNoLCBwcml2S2V5LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCB7IHNlZWQsIG0sIGQgfSA9IGluaXRTaWdBcmdzKG1zZ0hhc2gsIHByaXZLZXksIG9wdHMuZXh0cmFFbnRyb3B5KTtcbiAgICBjb25zdCBkcmJnID0gbmV3IEhtYWNEcmJnKGhhc2hMZW4sIGdyb3VwTGVuKTtcbiAgICBkcmJnLnJlc2VlZFN5bmMoc2VlZCk7XG4gICAgbGV0IHNpZztcbiAgICB3aGlsZSAoIShzaWcgPSBrbWRUb1NpZyhkcmJnLmdlbmVyYXRlU3luYygpLCBtLCBkLCBvcHRzLmNhbm9uaWNhbCkpKVxuICAgICAgICBkcmJnLnJlc2VlZFN5bmMoKTtcbiAgICByZXR1cm4gZmluYWxpemVTaWcoc2lnLCBvcHRzKTtcbn1cbmV4cG9ydCB7IHNpZ24sIHNpZ25TeW5jIH07XG5jb25zdCB2b3B0cyA9IHsgc3RyaWN0OiB0cnVlIH07XG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5KHNpZ25hdHVyZSwgbXNnSGFzaCwgcHVibGljS2V5LCBvcHRzID0gdm9wdHMpIHtcbiAgICBsZXQgc2lnO1xuICAgIHRyeSB7XG4gICAgICAgIHNpZyA9IG5vcm1hbGl6ZVNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgICAgICBtc2dIYXNoID0gZW5zdXJlQnl0ZXMobXNnSGFzaCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgciwgcyB9ID0gc2lnO1xuICAgIGlmIChvcHRzLnN0cmljdCAmJiBzaWcuaGFzSGlnaFMoKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGggPSB0cnVuY2F0ZUhhc2gobXNnSGFzaCk7XG4gICAgbGV0IFA7XG4gICAgdHJ5IHtcbiAgICAgICAgUCA9IG5vcm1hbGl6ZVB1YmxpY0tleShwdWJsaWNLZXkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB7IG4gfSA9IENVUlZFO1xuICAgIGNvbnN0IHNpbnYgPSBpbnZlcnQocywgbik7XG4gICAgY29uc3QgdTEgPSBtb2QoaCAqIHNpbnYsIG4pO1xuICAgIGNvbnN0IHUyID0gbW9kKHIgKiBzaW52LCBuKTtcbiAgICBjb25zdCBSID0gUG9pbnQuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShQLCB1MSwgdTIpO1xuICAgIGlmICghUilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHYgPSBtb2QoUi54LCBuKTtcbiAgICByZXR1cm4gdiA9PT0gcjtcbn1cbmZ1bmN0aW9uIHNjaG5vcnJDaGFsbGVuZ2VGaW5hbGl6ZShjaCkge1xuICAgIHJldHVybiBtb2QoYnl0ZXNUb051bWJlcihjaCksIENVUlZFLm4pO1xufVxuY2xhc3MgU2Nobm9yclNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3Iociwgcykge1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLnMgPSBzO1xuICAgICAgICB0aGlzLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSGV4KGhleCkge1xuICAgICAgICBjb25zdCBieXRlcyA9IGVuc3VyZUJ5dGVzKGhleCk7XG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggIT09IDY0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgU2Nobm9yclNpZ25hdHVyZS5mcm9tSGV4OiBleHBlY3RlZCA2NCBieXRlcywgbm90ICR7Ynl0ZXMubGVuZ3RofWApO1xuICAgICAgICBjb25zdCByID0gYnl0ZXNUb051bWJlcihieXRlcy5zdWJhcnJheSgwLCAzMikpO1xuICAgICAgICBjb25zdCBzID0gYnl0ZXNUb051bWJlcihieXRlcy5zdWJhcnJheSgzMiwgNjQpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2hub3JyU2lnbmF0dXJlKHIsIHMpO1xuICAgIH1cbiAgICBhc3NlcnRWYWxpZGl0eSgpIHtcbiAgICAgICAgY29uc3QgeyByLCBzIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWlzVmFsaWRGaWVsZEVsZW1lbnQocikgfHwgIWlzV2l0aGluQ3VydmVPcmRlcihzKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaWduYXR1cmUnKTtcbiAgICB9XG4gICAgdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiBudW1UbzMyYlN0cih0aGlzLnIpICsgbnVtVG8zMmJTdHIodGhpcy5zKTtcbiAgICB9XG4gICAgdG9SYXdCeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXModGhpcy50b0hleCgpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzY2hub3JyR2V0UHVibGljS2V5KHByaXZhdGVLZXkpIHtcbiAgICByZXR1cm4gUG9pbnQuZnJvbVByaXZhdGVLZXkocHJpdmF0ZUtleSkudG9SYXdYKCk7XG59XG5jbGFzcyBJbnRlcm5hbFNjaG5vcnJTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHByaXZhdGVLZXksIGF1eFJhbmQgPSB1dGlscy5yYW5kb21CeXRlcygpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlID09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBzaWduOiBFeHBlY3RlZCB2YWxpZCBtZXNzYWdlLCBub3QgXCIke21lc3NhZ2V9XCJgKTtcbiAgICAgICAgdGhpcy5tID0gZW5zdXJlQnl0ZXMobWVzc2FnZSk7XG4gICAgICAgIGNvbnN0IHsgeCwgc2NhbGFyIH0gPSB0aGlzLmdldFNjYWxhcihub3JtYWxpemVQcml2YXRlS2V5KHByaXZhdGVLZXkpKTtcbiAgICAgICAgdGhpcy5weCA9IHg7XG4gICAgICAgIHRoaXMuZCA9IHNjYWxhcjtcbiAgICAgICAgdGhpcy5yYW5kID0gZW5zdXJlQnl0ZXMoYXV4UmFuZCk7XG4gICAgICAgIGlmICh0aGlzLnJhbmQubGVuZ3RoICE9PSAzMilcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpZ246IEV4cGVjdGVkIDMyIGJ5dGVzIG9mIGF1eCByYW5kb21uZXNzJyk7XG4gICAgfVxuICAgIGdldFNjYWxhcihwcml2KSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gUG9pbnQuZnJvbVByaXZhdGVLZXkocHJpdik7XG4gICAgICAgIGNvbnN0IHNjYWxhciA9IHBvaW50Lmhhc0V2ZW5ZKCkgPyBwcml2IDogQ1VSVkUubiAtIHByaXY7XG4gICAgICAgIHJldHVybiB7IHBvaW50LCBzY2FsYXIsIHg6IHBvaW50LnRvUmF3WCgpIH07XG4gICAgfVxuICAgIGluaXROb25jZShkLCB0MGgpIHtcbiAgICAgICAgcmV0dXJuIG51bVRvMzJiKGQgXiBieXRlc1RvTnVtYmVyKHQwaCkpO1xuICAgIH1cbiAgICBmaW5hbGl6ZU5vbmNlKGswaCkge1xuICAgICAgICBjb25zdCBrMCA9IG1vZChieXRlc1RvTnVtYmVyKGswaCksIENVUlZFLm4pO1xuICAgICAgICBpZiAoazAgPT09IF8wbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbjogQ3JlYXRpb24gb2Ygc2lnbmF0dXJlIGZhaWxlZC4gayBpcyB6ZXJvJyk7XG4gICAgICAgIGNvbnN0IHsgcG9pbnQ6IFIsIHg6IHJ4LCBzY2FsYXI6IGsgfSA9IHRoaXMuZ2V0U2NhbGFyKGswKTtcbiAgICAgICAgcmV0dXJuIHsgUiwgcngsIGsgfTtcbiAgICB9XG4gICAgZmluYWxpemVTaWcoUiwgaywgZSwgZCkge1xuICAgICAgICByZXR1cm4gbmV3IFNjaG5vcnJTaWduYXR1cmUoUi54LCBtb2QoayArIGUgKiBkLCBDVVJWRS5uKSkudG9SYXdCeXRlcygpO1xuICAgIH1cbiAgICBlcnJvcigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduOiBJbnZhbGlkIHNpZ25hdHVyZSBwcm9kdWNlZCcpO1xuICAgIH1cbiAgICBhc3luYyBjYWxjKCkge1xuICAgICAgICBjb25zdCB7IG0sIGQsIHB4LCByYW5kIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB0YWcgPSB1dGlscy50YWdnZWRIYXNoO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5pbml0Tm9uY2UoZCwgYXdhaXQgdGFnKFRBR1MuYXV4LCByYW5kKSk7XG4gICAgICAgIGNvbnN0IHsgUiwgcngsIGsgfSA9IHRoaXMuZmluYWxpemVOb25jZShhd2FpdCB0YWcoVEFHUy5ub25jZSwgdCwgcHgsIG0pKTtcbiAgICAgICAgY29uc3QgZSA9IHNjaG5vcnJDaGFsbGVuZ2VGaW5hbGl6ZShhd2FpdCB0YWcoVEFHUy5jaGFsbGVuZ2UsIHJ4LCBweCwgbSkpO1xuICAgICAgICBjb25zdCBzaWcgPSB0aGlzLmZpbmFsaXplU2lnKFIsIGssIGUsIGQpO1xuICAgICAgICBpZiAoIShhd2FpdCBzY2hub3JyVmVyaWZ5KHNpZywgbSwgcHgpKSlcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoKTtcbiAgICAgICAgcmV0dXJuIHNpZztcbiAgICB9XG4gICAgY2FsY1N5bmMoKSB7XG4gICAgICAgIGNvbnN0IHsgbSwgZCwgcHgsIHJhbmQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHRhZyA9IHV0aWxzLnRhZ2dlZEhhc2hTeW5jO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5pbml0Tm9uY2UoZCwgdGFnKFRBR1MuYXV4LCByYW5kKSk7XG4gICAgICAgIGNvbnN0IHsgUiwgcngsIGsgfSA9IHRoaXMuZmluYWxpemVOb25jZSh0YWcoVEFHUy5ub25jZSwgdCwgcHgsIG0pKTtcbiAgICAgICAgY29uc3QgZSA9IHNjaG5vcnJDaGFsbGVuZ2VGaW5hbGl6ZSh0YWcoVEFHUy5jaGFsbGVuZ2UsIHJ4LCBweCwgbSkpO1xuICAgICAgICBjb25zdCBzaWcgPSB0aGlzLmZpbmFsaXplU2lnKFIsIGssIGUsIGQpO1xuICAgICAgICBpZiAoIXNjaG5vcnJWZXJpZnlTeW5jKHNpZywgbSwgcHgpKVxuICAgICAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgICAgICByZXR1cm4gc2lnO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHNjaG5vcnJTaWduKG1zZywgcHJpdktleSwgYXV4UmFuZCkge1xuICAgIHJldHVybiBuZXcgSW50ZXJuYWxTY2hub3JyU2lnbmF0dXJlKG1zZywgcHJpdktleSwgYXV4UmFuZCkuY2FsYygpO1xufVxuZnVuY3Rpb24gc2Nobm9yclNpZ25TeW5jKG1zZywgcHJpdktleSwgYXV4UmFuZCkge1xuICAgIHJldHVybiBuZXcgSW50ZXJuYWxTY2hub3JyU2lnbmF0dXJlKG1zZywgcHJpdktleSwgYXV4UmFuZCkuY2FsY1N5bmMoKTtcbn1cbmZ1bmN0aW9uIGluaXRTY2hub3JyVmVyaWZ5KHNpZ25hdHVyZSwgbWVzc2FnZSwgcHVibGljS2V5KSB7XG4gICAgY29uc3QgcmF3ID0gc2lnbmF0dXJlIGluc3RhbmNlb2YgU2Nobm9yclNpZ25hdHVyZTtcbiAgICBjb25zdCBzaWcgPSByYXcgPyBzaWduYXR1cmUgOiBTY2hub3JyU2lnbmF0dXJlLmZyb21IZXgoc2lnbmF0dXJlKTtcbiAgICBpZiAocmF3KVxuICAgICAgICBzaWcuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5zaWcsXG4gICAgICAgIG06IGVuc3VyZUJ5dGVzKG1lc3NhZ2UpLFxuICAgICAgICBQOiBub3JtYWxpemVQdWJsaWNLZXkocHVibGljS2V5KSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZmluYWxpemVTY2hub3JyVmVyaWZ5KHIsIFAsIHMsIGUpIHtcbiAgICBjb25zdCBSID0gUG9pbnQuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShQLCBub3JtYWxpemVQcml2YXRlS2V5KHMpLCBtb2QoLWUsIENVUlZFLm4pKTtcbiAgICBpZiAoIVIgfHwgIVIuaGFzRXZlblkoKSB8fCBSLnggIT09IHIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHIsIHMsIG0sIFAgfSA9IGluaXRTY2hub3JyVmVyaWZ5KHNpZ25hdHVyZSwgbWVzc2FnZSwgcHVibGljS2V5KTtcbiAgICAgICAgY29uc3QgZSA9IHNjaG5vcnJDaGFsbGVuZ2VGaW5hbGl6ZShhd2FpdCB1dGlscy50YWdnZWRIYXNoKFRBR1MuY2hhbGxlbmdlLCBudW1UbzMyYihyKSwgUC50b1Jhd1goKSwgbSkpO1xuICAgICAgICByZXR1cm4gZmluYWxpemVTY2hub3JyVmVyaWZ5KHIsIFAsIHMsIGUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNjaG5vcnJWZXJpZnlTeW5jKHNpZ25hdHVyZSwgbWVzc2FnZSwgcHVibGljS2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyByLCBzLCBtLCBQIH0gPSBpbml0U2Nobm9yclZlcmlmeShzaWduYXR1cmUsIG1lc3NhZ2UsIHB1YmxpY0tleSk7XG4gICAgICAgIGNvbnN0IGUgPSBzY2hub3JyQ2hhbGxlbmdlRmluYWxpemUodXRpbHMudGFnZ2VkSGFzaFN5bmMoVEFHUy5jaGFsbGVuZ2UsIG51bVRvMzJiKHIpLCBQLnRvUmF3WCgpLCBtKSk7XG4gICAgICAgIHJldHVybiBmaW5hbGl6ZVNjaG5vcnJWZXJpZnkociwgUCwgcywgZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBTaGFFcnJvcilcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IHNjaG5vcnIgPSB7XG4gICAgU2lnbmF0dXJlOiBTY2hub3JyU2lnbmF0dXJlLFxuICAgIGdldFB1YmxpY0tleTogc2Nobm9yckdldFB1YmxpY0tleSxcbiAgICBzaWduOiBzY2hub3JyU2lnbixcbiAgICB2ZXJpZnk6IHNjaG5vcnJWZXJpZnksXG4gICAgc2lnblN5bmM6IHNjaG5vcnJTaWduU3luYyxcbiAgICB2ZXJpZnlTeW5jOiBzY2hub3JyVmVyaWZ5U3luYyxcbn07XG5Qb2ludC5CQVNFLl9zZXRXaW5kb3dTaXplKDgpO1xuY29uc3QgY3J5cHRvID0ge1xuICAgIG5vZGU6IG5vZGVDcnlwdG8sXG4gICAgd2ViOiB0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcgJiYgJ2NyeXB0bycgaW4gc2VsZiA/IHNlbGYuY3J5cHRvIDogdW5kZWZpbmVkLFxufTtcbmNvbnN0IFRBR1MgPSB7XG4gICAgY2hhbGxlbmdlOiAnQklQMDM0MC9jaGFsbGVuZ2UnLFxuICAgIGF1eDogJ0JJUDAzNDAvYXV4JyxcbiAgICBub25jZTogJ0JJUDAzNDAvbm9uY2UnLFxufTtcbmNvbnN0IFRBR0dFRF9IQVNIX1BSRUZJWEVTID0ge307XG5leHBvcnQgY29uc3QgdXRpbHMgPSB7XG4gICAgYnl0ZXNUb0hleCxcbiAgICBoZXhUb0J5dGVzLFxuICAgIGNvbmNhdEJ5dGVzLFxuICAgIG1vZCxcbiAgICBpbnZlcnQsXG4gICAgaXNWYWxpZFByaXZhdGVLZXkocHJpdmF0ZUtleSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbm9ybWFsaXplUHJpdmF0ZUtleShwcml2YXRlS2V5KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfYmlnaW50VG8zMkJ5dGVzOiBudW1UbzMyYixcbiAgICBfbm9ybWFsaXplUHJpdmF0ZUtleTogbm9ybWFsaXplUHJpdmF0ZUtleSxcbiAgICBoYXNoVG9Qcml2YXRlS2V5OiAoaGFzaCkgPT4ge1xuICAgICAgICBoYXNoID0gZW5zdXJlQnl0ZXMoaGFzaCk7XG4gICAgICAgIGNvbnN0IG1pbkxlbiA9IGdyb3VwTGVuICsgODtcbiAgICAgICAgaWYgKGhhc2gubGVuZ3RoIDwgbWluTGVuIHx8IGhhc2gubGVuZ3RoID4gMTAyNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB2YWxpZCBieXRlcyBvZiBwcml2YXRlIGtleSBhcyBwZXIgRklQUyAxODZgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW0gPSBtb2QoYnl0ZXNUb051bWJlcihoYXNoKSwgQ1VSVkUubiAtIF8xbikgKyBfMW47XG4gICAgICAgIHJldHVybiBudW1UbzMyYihudW0pO1xuICAgIH0sXG4gICAgcmFuZG9tQnl0ZXM6IChieXRlc0xlbmd0aCA9IDMyKSA9PiB7XG4gICAgICAgIGlmIChjcnlwdG8ud2ViKSB7XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvLndlYi5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoYnl0ZXNMZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjcnlwdG8ubm9kZSkge1xuICAgICAgICAgICAgY29uc3QgeyByYW5kb21CeXRlcyB9ID0gY3J5cHRvLm5vZGU7XG4gICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHJhbmRvbUJ5dGVzKGJ5dGVzTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHJhbmRvbUJ5dGVzIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByYW5kb21Qcml2YXRlS2V5OiAoKSA9PiB1dGlscy5oYXNoVG9Qcml2YXRlS2V5KHV0aWxzLnJhbmRvbUJ5dGVzKGdyb3VwTGVuICsgOCkpLFxuICAgIHByZWNvbXB1dGUod2luZG93U2l6ZSA9IDgsIHBvaW50ID0gUG9pbnQuQkFTRSkge1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBwb2ludCA9PT0gUG9pbnQuQkFTRSA/IHBvaW50IDogbmV3IFBvaW50KHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICBjYWNoZWQuX3NldFdpbmRvd1NpemUod2luZG93U2l6ZSk7XG4gICAgICAgIGNhY2hlZC5tdWx0aXBseShfM24pO1xuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH0sXG4gICAgc2hhMjU2OiBhc3luYyAoLi4ubWVzc2FnZXMpID0+IHtcbiAgICAgICAgaWYgKGNyeXB0by53ZWIpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNyeXB0by53ZWIuc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGNvbmNhdEJ5dGVzKC4uLm1lc3NhZ2VzKSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjcnlwdG8ubm9kZSkge1xuICAgICAgICAgICAgY29uc3QgeyBjcmVhdGVIYXNoIH0gPSBjcnlwdG8ubm9kZTtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKCdzaGEyNTYnKTtcbiAgICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2goKG0pID0+IGhhc2gudXBkYXRlKG0pKTtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oaGFzaC5kaWdlc3QoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHNoYTI1NiBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaG1hY1NoYTI1NjogYXN5bmMgKGtleSwgLi4ubWVzc2FnZXMpID0+IHtcbiAgICAgICAgaWYgKGNyeXB0by53ZWIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNrZXkgPSBhd2FpdCBjcnlwdG8ud2ViLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGtleSwgeyBuYW1lOiAnSE1BQycsIGhhc2g6IHsgbmFtZTogJ1NIQS0yNTYnIH0gfSwgZmFsc2UsIFsnc2lnbiddKTtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjb25jYXRCeXRlcyguLi5tZXNzYWdlcyk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBjcnlwdG8ud2ViLnN1YnRsZS5zaWduKCdITUFDJywgY2tleSwgbWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjcnlwdG8ubm9kZSkge1xuICAgICAgICAgICAgY29uc3QgeyBjcmVhdGVIbWFjIH0gPSBjcnlwdG8ubm9kZTtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIbWFjKCdzaGEyNTYnLCBrZXkpO1xuICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaCgobSkgPT4gaGFzaC51cGRhdGUobSkpO1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShoYXNoLmRpZ2VzdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgaG1hYy1zaGEyNTYgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNoYTI1NlN5bmM6IHVuZGVmaW5lZCxcbiAgICBobWFjU2hhMjU2U3luYzogdW5kZWZpbmVkLFxuICAgIHRhZ2dlZEhhc2g6IGFzeW5jICh0YWcsIC4uLm1lc3NhZ2VzKSA9PiB7XG4gICAgICAgIGxldCB0YWdQID0gVEFHR0VEX0hBU0hfUFJFRklYRVNbdGFnXTtcbiAgICAgICAgaWYgKHRhZ1AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnSCA9IGF3YWl0IHV0aWxzLnNoYTI1NihVaW50OEFycmF5LmZyb20odGFnLCAoYykgPT4gYy5jaGFyQ29kZUF0KDApKSk7XG4gICAgICAgICAgICB0YWdQID0gY29uY2F0Qnl0ZXModGFnSCwgdGFnSCk7XG4gICAgICAgICAgICBUQUdHRURfSEFTSF9QUkVGSVhFU1t0YWddID0gdGFnUDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXRpbHMuc2hhMjU2KHRhZ1AsIC4uLm1lc3NhZ2VzKTtcbiAgICB9LFxuICAgIHRhZ2dlZEhhc2hTeW5jOiAodGFnLCAuLi5tZXNzYWdlcykgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIF9zaGEyNTZTeW5jICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFNoYUVycm9yKCdzaGEyNTZTeW5jIGlzIHVuZGVmaW5lZCwgeW91IG5lZWQgdG8gc2V0IGl0Jyk7XG4gICAgICAgIGxldCB0YWdQID0gVEFHR0VEX0hBU0hfUFJFRklYRVNbdGFnXTtcbiAgICAgICAgaWYgKHRhZ1AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnSCA9IF9zaGEyNTZTeW5jKFVpbnQ4QXJyYXkuZnJvbSh0YWcsIChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbiAgICAgICAgICAgIHRhZ1AgPSBjb25jYXRCeXRlcyh0YWdILCB0YWdIKTtcbiAgICAgICAgICAgIFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ10gPSB0YWdQO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc2hhMjU2U3luYyh0YWdQLCAuLi5tZXNzYWdlcyk7XG4gICAgfSxcbiAgICBfSmFjb2JpYW5Qb2ludDogSmFjb2JpYW5Qb2ludCxcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyh1dGlscywge1xuICAgIHNoYTI1NlN5bmM6IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zaGEyNTZTeW5jO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgICBpZiAoIV9zaGEyNTZTeW5jKVxuICAgICAgICAgICAgICAgIF9zaGEyNTZTeW5jID0gdmFsO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgaG1hY1NoYTI1NlN5bmM6IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9obWFjU2hhMjU2U3luYztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgICAgaWYgKCFfaG1hY1NoYTI1NlN5bmMpXG4gICAgICAgICAgICAgICAgX2htYWNTaGEyNTZTeW5jID0gdmFsO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IGJlY2gzMiB9IGZyb20gJ2JlY2gzMic7XG5cbmNvbnN0IHV0ZjhEZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpXG5jb25zdCBoZXhlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAodiwgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG5cbmZ1bmN0aW9uIGhleFRvQnl0ZXMoaGV4KSB7XG4gIGxldCBieXRlcyA9IFtdO1xuICBmb3IgKGxldCBjID0gMDsgYyA8IGhleC5sZW5ndGg7IGMgKz0gMilcbiAgICBieXRlcy5wdXNoKHBhcnNlSW50KGhleC5zdWJzdHIoYywgMiksIDE2KSk7XG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vdGVJZChoZXhJZCkge1xuICBjb25zdCBiYiA9IGhleFRvQnl0ZXMoaGV4SWQpO1xuICBjb25zdCB3b3JkcyA9IGJlY2gzMi50b1dvcmRzKGJiKTtcbiAgcmV0dXJuIGJlY2gzMi5lbmNvZGUoJ25vdGUnLCB3b3JkcywgMTIwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5wdWIoaGV4UHVia2V5KSB7XG4gIGNvbnN0IGJiID0gaGV4VG9CeXRlcyhoZXhQdWJrZXkpO1xuICBjb25zdCB3b3JkcyA9IGJlY2gzMi50b1dvcmRzKGJiKTtcbiAgcmV0dXJuIGJlY2gzMi5lbmNvZGUoJ25wdWInLCB3b3JkcywgMTIwKTtcbn1cblxuZnVuY3Rpb24gZnJvbVdvcmRzKHdvcmRzKSB7XG4gIHJldHVybiBiZWNoMzIuZnJvbVdvcmRzKHdvcmRzKVxuICAgIC5tYXAoKGJ5dGVzKSA9PiBieXRlcy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSlcbiAgICAuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5vdGVJZChub3RlSWQpIHtcbiAgY29uc3QgciA9IGJlY2gzMi5kZWNvZGUobm90ZUlkLCAxMjApO1xuICBpZiAoci5wcmVmaXggIT0gXCJub3RlXCIpIHJldHVybiBcIlwiO1xuICByZXR1cm4gZnJvbVdvcmRzKHIud29yZHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOcHViKG5wdWIpIHtcbiAgY29uc3QgciA9IGJlY2gzMi5kZWNvZGUobnB1YiwgMTIwKTtcbiAgaWYgKHIucHJlZml4ICE9IFwibnB1YlwiKSByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIGZyb21Xb3JkcyhyLndvcmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTmFkZHIobmFkZHIpIHtcblxuICBpZiAoIW5hZGRyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgciA9IGJlY2gzMi5kZWNvZGUobmFkZHIsIDEyMClcbiAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShiZWNoMzIuZnJvbVdvcmRzKHIud29yZHMpKVxuXG4gIGxldCB0bHYgPSBwYXJzZVRMVihkYXRhKTtcblxuICBpZiAoIXRsdlswXT8uWzBdKSB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgVExWIDAgZm9yIG5hZGRyJylcbiAgaWYgKCF0bHZbMl0/LlswXSkgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIFRMViAyIGZvciBuYWRkcicpXG4gIGlmICh0bHZbMl1bMF0ubGVuZ3RoICE9PSAzMikgdGhyb3cgbmV3IEVycm9yKCdUTFYgMiBzaG91bGQgYmUgMzIgYnl0ZXMnKVxuICBpZiAoIXRsdlszXT8uWzBdKSB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgVExWIDMgZm9yIG5hZGRyJylcbiAgaWYgKHRsdlszXVswXS5sZW5ndGggIT09IDQpIHRocm93IG5ldyBFcnJvcignVExWIDMgc2hvdWxkIGJlIDQgYnl0ZXMnKVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ25hZGRyJyxcbiAgICBkYXRhOiB7XG4gICAgICBpZGVudGlmaWVyOiB1dGY4RGVjb2Rlci5kZWNvZGUodGx2WzBdWzBdKSxcbiAgICAgIHB1YmtleTogYnl0ZXNUb0hleCh0bHZbMl1bMF0pLFxuICAgICAga2luZDogcGFyc2VJbnQoYnl0ZXNUb0hleCh0bHZbM11bMF0pLCAxNiksXG4gICAgICByZWxheXM6IHRsdlsxXSA/IHRsdlsxXS5tYXAoZCA9PiB1dGY4RGVjb2Rlci5kZWNvZGUoZCkpIDogW11cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE5wdWIobnB1Yikge1xuICByZXR1cm4gYCR7bnB1Yi5zbGljZShcbiAgICAwLFxuICAgIDEyXG4gICl9Li4uJHtucHViLnNsaWNlKC00KX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0Tm90ZUlkKG5vdGVJZCkge1xuICByZXR1cm4gYCR7bm90ZUlkLnNsaWNlKFxuICAgIDAsXG4gICAgMTAsXG4gICl9Li4uJHtub3RlSWQuc2xpY2UoLTQpfWA7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFphcEFtb3VudChhKSB7XG4gIGEgLz0gMTAwMDtcbiAgaWYgKGEgPj0gMTAwMDAwMCkgcmV0dXJuIChNYXRoLnJvdW5kKGEgLyAxMDAwMDApIC8gMTApICsgXCJNXCI7XG4gIGlmIChhID49IDEwMDApIHJldHVybiAoTWF0aC5yb3VuZChhIC8gMTAwKSAvIDEwKSArIFwiS1wiO1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUTFYoZGF0YSkge1xuICBsZXQgcmVzdWx0ID0ge31cbiAgbGV0IHJlc3QgPSBkYXRhXG4gIHdoaWxlIChyZXN0Lmxlbmd0aCA+IDApIHtcbiAgICBsZXQgdCA9IHJlc3RbMF1cbiAgICBsZXQgbCA9IHJlc3RbMV1cbiAgICBsZXQgdiA9IHJlc3Quc2xpY2UoMiwgMiArIGwpXG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMiArIGwpXG4gICAgaWYgKHYubGVuZ3RoIDwgbCkgY29udGludWVcbiAgICByZXN1bHRbdF0gPSByZXN1bHRbdF0gfHwgW11cbiAgICByZXN1bHRbdF0ucHVzaCh2KVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb0hleCh1aW50OGEpIHtcbiAgLy8gcHJlLWNhY2hpbmcgaW1wcm92ZXMgdGhlIHNwZWVkIDZ4XG4gIGlmICghKHVpbnQ4YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgZXhwZWN0ZWQnKTtcbiAgbGV0IGhleCA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHVpbnQ4YS5sZW5ndGg7IGkrKykge1xuICAgIGhleCArPSBoZXhlc1t1aW50OGFbaV1dO1xuICB9XG4gIHJldHVybiBoZXg7XG59XG4iLCJpbXBvcnR7b3B0aW9ucyBhcyBufWZyb21cInByZWFjdFwiO3ZhciB0LHIsdSxpLG89MCxmPVtdLGM9W10sZT1uLl9fYixhPW4uX19yLHY9bi5kaWZmZWQsbD1uLl9fYyxtPW4udW5tb3VudDtmdW5jdGlvbiBkKHQsdSl7bi5fX2gmJm4uX19oKHIsdCxvfHx1KSxvPTA7dmFyIGk9ci5fX0h8fChyLl9fSD17X186W10sX19oOltdfSk7cmV0dXJuIHQ+PWkuX18ubGVuZ3RoJiZpLl9fLnB1c2goe19fVjpjfSksaS5fX1t0XX1mdW5jdGlvbiBoKG4pe3JldHVybiBvPTEscyhCLG4pfWZ1bmN0aW9uIHMobix1LGkpe3ZhciBvPWQodCsrLDIpO2lmKG8udD1uLCFvLl9fYyYmKG8uX189W2k/aSh1KTpCKHZvaWQgMCx1KSxmdW5jdGlvbihuKXt2YXIgdD1vLl9fTj9vLl9fTlswXTpvLl9fWzBdLHI9by50KHQsbik7dCE9PXImJihvLl9fTj1bcixvLl9fWzFdXSxvLl9fYy5zZXRTdGF0ZSh7fSkpfV0sby5fX2M9ciwhci51KSl7dmFyIGY9ZnVuY3Rpb24obix0LHIpe2lmKCFvLl9fYy5fX0gpcmV0dXJuITA7dmFyIHU9by5fX2MuX19ILl9fLmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4gbi5fX2N9KTtpZih1LmV2ZXJ5KGZ1bmN0aW9uKG4pe3JldHVybiFuLl9fTn0pKXJldHVybiFjfHxjLmNhbGwodGhpcyxuLHQscik7dmFyIGk9ITE7cmV0dXJuIHUuZm9yRWFjaChmdW5jdGlvbihuKXtpZihuLl9fTil7dmFyIHQ9bi5fX1swXTtuLl9fPW4uX19OLG4uX19OPXZvaWQgMCx0IT09bi5fX1swXSYmKGk9ITApfX0pLCEoIWkmJm8uX19jLnByb3BzPT09bikmJighY3x8Yy5jYWxsKHRoaXMsbix0LHIpKX07ci51PSEwO3ZhciBjPXIuc2hvdWxkQ29tcG9uZW50VXBkYXRlLGU9ci5jb21wb25lbnRXaWxsVXBkYXRlO3IuY29tcG9uZW50V2lsbFVwZGF0ZT1mdW5jdGlvbihuLHQscil7aWYodGhpcy5fX2Upe3ZhciB1PWM7Yz12b2lkIDAsZihuLHQsciksYz11fWUmJmUuY2FsbCh0aGlzLG4sdCxyKX0sci5zaG91bGRDb21wb25lbnRVcGRhdGU9Zn1yZXR1cm4gby5fX058fG8uX199ZnVuY3Rpb24gcCh1LGkpe3ZhciBvPWQodCsrLDMpOyFuLl9fcyYmeihvLl9fSCxpKSYmKG8uX189dSxvLmk9aSxyLl9fSC5fX2gucHVzaChvKSl9ZnVuY3Rpb24geSh1LGkpe3ZhciBvPWQodCsrLDQpOyFuLl9fcyYmeihvLl9fSCxpKSYmKG8uX189dSxvLmk9aSxyLl9faC5wdXNoKG8pKX1mdW5jdGlvbiBfKG4pe3JldHVybiBvPTUsRihmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om59fSxbXSl9ZnVuY3Rpb24gQShuLHQscil7bz02LHkoZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuPyhuKHQoKSksZnVuY3Rpb24oKXtyZXR1cm4gbihudWxsKX0pOm4/KG4uY3VycmVudD10KCksZnVuY3Rpb24oKXtyZXR1cm4gbi5jdXJyZW50PW51bGx9KTp2b2lkIDB9LG51bGw9PXI/cjpyLmNvbmNhdChuKSl9ZnVuY3Rpb24gRihuLHIpe3ZhciB1PWQodCsrLDcpO3JldHVybiB6KHUuX19ILHIpPyh1Ll9fVj1uKCksdS5pPXIsdS5fX2g9bix1Ll9fVik6dS5fX31mdW5jdGlvbiBUKG4sdCl7cmV0dXJuIG89OCxGKGZ1bmN0aW9uKCl7cmV0dXJuIG59LHQpfWZ1bmN0aW9uIHEobil7dmFyIHU9ci5jb250ZXh0W24uX19jXSxpPWQodCsrLDkpO3JldHVybiBpLmM9bix1PyhudWxsPT1pLl9fJiYoaS5fXz0hMCx1LnN1YihyKSksdS5wcm9wcy52YWx1ZSk6bi5fX31mdW5jdGlvbiB4KHQscil7bi51c2VEZWJ1Z1ZhbHVlJiZuLnVzZURlYnVnVmFsdWUocj9yKHQpOnQpfWZ1bmN0aW9uIFAobil7dmFyIHU9ZCh0KyssMTApLGk9aCgpO3JldHVybiB1Ll9fPW4sci5jb21wb25lbnREaWRDYXRjaHx8KHIuY29tcG9uZW50RGlkQ2F0Y2g9ZnVuY3Rpb24obix0KXt1Ll9fJiZ1Ll9fKG4sdCksaVsxXShuKX0pLFtpWzBdLGZ1bmN0aW9uKCl7aVsxXSh2b2lkIDApfV19ZnVuY3Rpb24gVigpe3ZhciBuPWQodCsrLDExKTtpZighbi5fXyl7Zm9yKHZhciB1PXIuX192O251bGwhPT11JiYhdS5fX20mJm51bGwhPT11Ll9fOyl1PXUuX187dmFyIGk9dS5fX218fCh1Ll9fbT1bMCwwXSk7bi5fXz1cIlBcIitpWzBdK1wiLVwiK2lbMV0rK31yZXR1cm4gbi5fX31mdW5jdGlvbiBiKCl7Zm9yKHZhciB0O3Q9Zi5zaGlmdCgpOylpZih0Ll9fUCYmdC5fX0gpdHJ5e3QuX19ILl9faC5mb3JFYWNoKGspLHQuX19ILl9faC5mb3JFYWNoKHcpLHQuX19ILl9faD1bXX1jYXRjaChyKXt0Ll9fSC5fX2g9W10sbi5fX2Uocix0Ll9fdil9fW4uX19iPWZ1bmN0aW9uKG4pe3I9bnVsbCxlJiZlKG4pfSxuLl9fcj1mdW5jdGlvbihuKXthJiZhKG4pLHQ9MDt2YXIgaT0ocj1uLl9fYykuX19IO2kmJih1PT09cj8oaS5fX2g9W10sci5fX2g9W10saS5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe24uX19OJiYobi5fXz1uLl9fTiksbi5fX1Y9YyxuLl9fTj1uLmk9dm9pZCAwfSkpOihpLl9faC5mb3JFYWNoKGspLGkuX19oLmZvckVhY2godyksaS5fX2g9W10pKSx1PXJ9LG4uZGlmZmVkPWZ1bmN0aW9uKHQpe3YmJnYodCk7dmFyIG89dC5fX2M7byYmby5fX0gmJihvLl9fSC5fX2gubGVuZ3RoJiYoMSE9PWYucHVzaChvKSYmaT09PW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwoKGk9bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpfHxqKShiKSksby5fX0guX18uZm9yRWFjaChmdW5jdGlvbihuKXtuLmkmJihuLl9fSD1uLmkpLG4uX19WIT09YyYmKG4uX189bi5fX1YpLG4uaT12b2lkIDAsbi5fX1Y9Y30pKSx1PXI9bnVsbH0sbi5fX2M9ZnVuY3Rpb24odCxyKXtyLnNvbWUoZnVuY3Rpb24odCl7dHJ5e3QuX19oLmZvckVhY2goayksdC5fX2g9dC5fX2guZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiFuLl9ffHx3KG4pfSl9Y2F0Y2godSl7ci5zb21lKGZ1bmN0aW9uKG4pe24uX19oJiYobi5fX2g9W10pfSkscj1bXSxuLl9fZSh1LHQuX192KX19KSxsJiZsKHQscil9LG4udW5tb3VudD1mdW5jdGlvbih0KXttJiZtKHQpO3ZhciByLHU9dC5fX2M7dSYmdS5fX0gmJih1Ll9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe3RyeXtrKG4pfWNhdGNoKG4pe3I9bn19KSx1Ll9fSD12b2lkIDAsciYmbi5fX2Uocix1Ll9fdikpfTt2YXIgZz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ZnVuY3Rpb24gaihuKXt2YXIgdCxyPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpLGcmJmNhbmNlbEFuaW1hdGlvbkZyYW1lKHQpLHNldFRpbWVvdXQobil9LHU9c2V0VGltZW91dChyLDEwMCk7ZyYmKHQ9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHIpKX1mdW5jdGlvbiBrKG4pe3ZhciB0PXIsdT1uLl9fYztcImZ1bmN0aW9uXCI9PXR5cGVvZiB1JiYobi5fX2M9dm9pZCAwLHUoKSkscj10fWZ1bmN0aW9uIHcobil7dmFyIHQ9cjtuLl9fYz1uLl9fKCkscj10fWZ1bmN0aW9uIHoobix0KXtyZXR1cm4hbnx8bi5sZW5ndGghPT10Lmxlbmd0aHx8dC5zb21lKGZ1bmN0aW9uKHQscil7cmV0dXJuIHQhPT1uW3JdfSl9ZnVuY3Rpb24gQihuLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dChuKTp0fWV4cG9ydHtUIGFzIHVzZUNhbGxiYWNrLHEgYXMgdXNlQ29udGV4dCx4IGFzIHVzZURlYnVnVmFsdWUscCBhcyB1c2VFZmZlY3QsUCBhcyB1c2VFcnJvckJvdW5kYXJ5LFYgYXMgdXNlSWQsQSBhcyB1c2VJbXBlcmF0aXZlSGFuZGxlLHkgYXMgdXNlTGF5b3V0RWZmZWN0LEYgYXMgdXNlTWVtbyxzIGFzIHVzZVJlZHVjZXIsXyBhcyB1c2VSZWYsaCBhcyB1c2VTdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob29rcy5tb2R1bGUuanMubWFwXG4iLCJpbXBvcnR7b3B0aW9ucyBhcyByfWZyb21cInByZWFjdFwiO2V4cG9ydHtGcmFnbWVudH1mcm9tXCJwcmVhY3RcIjt2YXIgXz0wO2Z1bmN0aW9uIG8obyxlLG4sdCxmLGwpe3ZhciBzLHUsYT17fTtmb3IodSBpbiBlKVwicmVmXCI9PXU/cz1lW3VdOmFbdV09ZVt1XTt2YXIgaT17dHlwZTpvLHByb3BzOmEsa2V5Om4scmVmOnMsX19rOm51bGwsX186bnVsbCxfX2I6MCxfX2U6bnVsbCxfX2Q6dm9pZCAwLF9fYzpudWxsLF9faDpudWxsLGNvbnN0cnVjdG9yOnZvaWQgMCxfX3Y6LS1fLF9fc291cmNlOmYsX19zZWxmOmx9O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG8mJihzPW8uZGVmYXVsdFByb3BzKSlmb3IodSBpbiBzKXZvaWQgMD09PWFbdV0mJihhW3VdPXNbdV0pO3JldHVybiByLnZub2RlJiZyLnZub2RlKGkpLGl9ZXhwb3J0e28gYXMganN4LG8gYXMganN4REVWLG8gYXMganN4c307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc3hSdW50aW1lLm1vZHVsZS5qcy5tYXBcbiIsImZ1bmN0aW9uIENvcHlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdjb3B5SWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTguMjUgNy41VjYuMTA4YzAtMS4xMzUuODQ1LTIuMDk4IDEuOTc2LTIuMTkyLjM3My0uMDMuNzQ4LS4wNTcgMS4xMjMtLjA4TTE1Ljc1IDE4SDE4YTIuMjUgMi4yNSAwIDAwMi4yNS0yLjI1VjYuMTA4YzAtMS4xMzUtLjg0NS0yLjA5OC0xLjk3Ni0yLjE5MmE0OC40MjQgNDguNDI0IDAgMDAtMS4xMjMtLjA4TTE1Ljc1IDE4Ljc1di0xLjg3NWEzLjM3NSAzLjM3NSAwIDAwLTMuMzc1LTMuMzc1aC0xLjVhMS4xMjUgMS4xMjUgMCAwMS0xLjEyNS0xLjEyNXYtMS41QTMuMzc1IDMuMzc1IDAgMDA2LjM3NSA3LjVINS4yNW0xMS45LTMuNjY0QTIuMjUxIDIuMjUxIDAgMDAxNSAyLjI1aC0xLjVhMi4yNTEgMi4yNTEgMCAwMC0yLjE1IDEuNTg2bTUuOCAwYy4wNjUuMjEuMS40MzMuMS42NjR2Ljc1aC02VjQuNWMwLS4yMzEuMDM1LS40NTQuMS0uNjY0TTYuNzUgNy41SDQuODc1Yy0uNjIxIDAtMS4xMjUuNTA0LTEuMTI1IDEuMTI1djEyYzAgLjYyMS41MDQgMS4xMjUgMS4xMjUgMS4xMjVoOS43NWMuNjIxIDAgMS4xMjUtLjUwNCAxLjEyNS0xLjEyNVYxNi41YTkgOSAwIDAwLTktOXpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29weUljb247XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCBDb3B5SWNvbiBmcm9tICcuL2ljb25zL2NvcHlJY29uJztcbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlLmNzcyc7XG5cbmZ1bmN0aW9uIENvcHlUZXh0KHsgaWNvbkNsYXNzZXMsIGRpc3BsYXlUZXh0LCBjb3B5VGV4dCB9KSB7XG4gIGNvbnN0IFtidG5DbGFzc2VzLCBzZXRCdG5DbGFzc2VzXSA9IHVzZVN0YXRlKCdsaW5rQ29weUJ0bicpO1xuXG4gIGZ1bmN0aW9uIGNvcHlUb0NsaXBib2FyZCgpIHtcbiAgICB0cnkge1xuICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY29weVRleHQpO1xuICAgICAgc2V0QnRuQ2xhc3NlcyhgJHtidG5DbGFzc2VzfSBncmVlbmApO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldEJ0bkNsYXNzZXMoYnRuQ2xhc3Nlcy5yZXBsYWNlKCdncmVlbicsICcnKS50cmltKCkpO1xuICAgICAgfSwgNTAwKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjb3B5OiAnLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvbiBjbGFzcz17YnRuQ2xhc3Nlc30gb25DbGljaz17KCkgPT4gY29weVRvQ2xpcGJvYXJkKCl9PlxuICAgICAgPENvcHlJY29uIGFkZGl0aW9uYWxDbGFzc2VzPXtpY29uQ2xhc3Nlc30gLz5cblxuICAgICAge2Rpc3BsYXlUZXh0ICYmIDxzcGFuIGNsYXNzPVwiZGlzcGxheVRleHRcIj57ZGlzcGxheVRleHR9PC9zcGFuPn1cbiAgICAgIDxzcGFuIGNsYXNzPVwiY29weVRleHRcIj57Y29weVRleHR9PC9zcGFuPlxuICAgIDwvYnV0dG9uPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb3B5VGV4dDtcbiIsImZ1bmN0aW9uIEJvbHRJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdib2x0SWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTMuNzUgMTMuNWwxMC41LTExLjI1TDEyIDEwLjVoOC4yNUw5Ljc1IDIxLjc1IDEyIDEzLjVIMy43NXpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQm9sdEljb247XG4iLCJmdW5jdGlvbiBIZWFydEljb24oeyBhZGRpdGlvbmFsQ2xhc3NlcyB9KSB7XG4gIGxldCBjbGFzc2VzID0gJ2hlYXJ0SWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgIHdpZHRoPVwiMS4yNXJlbVwiXG4gICAgICBoZWlnaHQ9XCIxLjI1cmVtXCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTIxIDguMjVjMC0yLjQ4NS0yLjA5OS00LjUtNC42ODgtNC41LTEuOTM1IDAtMy41OTcgMS4xMjYtNC4zMTIgMi43MzMtLjcxNS0xLjYwNy0yLjM3Ny0yLjczMy00LjMxMy0yLjczM0M1LjEgMy43NSAzIDUuNzY1IDMgOC4yNWMwIDcuMjIgOSAxMiA5IDEyczktNC43OCA5LTEyelwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFydEljb247XG4iLCJmdW5jdGlvbiBMaW5rSWNvbih7IGFkZGl0aW9uYWxDbGFzc2VzIH0pIHtcbiAgbGV0IGNsYXNzZXMgPSAnbGlua0ljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgd2lkdGg9XCIxLjI1cmVtXCJcbiAgICAgIGhlaWdodD1cIjEuMjVyZW1cIlxuICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0xMy4xOSA4LjY4OGE0LjUgNC41IDAgMDExLjI0MiA3LjI0NGwtNC41IDQuNWE0LjUgNC41IDAgMDEtNi4zNjQtNi4zNjRsMS43NTctMS43NTdtMTMuMzUtLjYyMmwxLjc1Ny0xLjc1N2E0LjUgNC41IDAgMDAtNi4zNjQtNi4zNjRsLTQuNSA0LjVhNC41IDQuNSAwIDAwMS4yNDIgNy4yNDRcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cbmV4cG9ydCBkZWZhdWx0IExpbmtJY29uO1xuIiwiZnVuY3Rpb24gUmVwbHlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdyZXBseUljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0yMC4yNSA4LjUxMWMuODg0LjI4NCAxLjUgMS4xMjggMS41IDIuMDk3djQuMjg2YzAgMS4xMzYtLjg0NyAyLjEtMS45OCAyLjE5My0uMzQuMDI3LS42OC4wNTItMS4wMi4wNzJ2My4wOTFsLTMtM2MtMS4zNTQgMC0yLjY5NC0uMDU1LTQuMDItLjE2M2EyLjExNSAyLjExNSAwIDAxLS44MjUtLjI0Mm05LjM0NS04LjMzNGEyLjEyNiAyLjEyNiAwIDAwLS40NzYtLjA5NSA0OC42NCA0OC42NCAwIDAwLTguMDQ4IDBjLTEuMTMxLjA5NC0xLjk3NiAxLjA1Ny0xLjk3NiAyLjE5MnY0LjI4NmMwIC44MzcuNDYgMS41OCAxLjE1NSAxLjk1MW05LjM0NS04LjMzNFY2LjYzN2MwLTEuNjIxLTEuMTUyLTMuMDI2LTIuNzYtMy4yMzVBNDguNDU1IDQ4LjQ1NSAwIDAwMTEuMjUgM2MtMi4xMTUgMC00LjE5OC4xMzctNi4yNC40MDItMS42MDguMjA5LTIuNzYgMS42MTQtMi43NiAzLjIzNXY2LjIyNmMwIDEuNjIxIDEuMTUyIDMuMDI2IDIuNzYgMy4yMzUuNTc3LjA3NSAxLjE1Ny4xNCAxLjc0LjE5NFYyMWw0LjE1NS00LjE1NVwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZXBseUljb247XG4iLCJmdW5jdGlvbiBSZXBvc3RJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdyZXBvc3RJY29uJztcbiAgaWYgKGFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgbGV0IGFyciA9IGFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgYXJyLnB1c2goY2xhc3Nlcyk7XG4gICAgY2xhc3NlcyA9IGFyci5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIlxuICAgICAgd2lkdGg9XCIxLjI1cmVtXCJcbiAgICAgIGhlaWdodD1cIjEuMjVyZW1cIlxuICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIGQ9XCJNMTYuMDIzIDkuMzQ4aDQuOTkydi0uMDAxTTIuOTg1IDE5LjY0NHYtNC45OTJtMCAwaDQuOTkybS00Ljk5MyAwbDMuMTgxIDMuMTgzYTguMjUgOC4yNSAwIDAwMTMuODAzLTMuN000LjAzMSA5Ljg2NWE4LjI1IDguMjUgMCAwMTEzLjgwMy0zLjdsMy4xODEgMy4xODJtMC00Ljk5MXY0Ljk5XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlcG9zdEljb247XG4iLCJpbXBvcnQgeyBmb3JtYXRaYXBBbW91bnQsIGdldE5vdGVJZCB9IGZyb20gXCIuLi9jb21tb25cIjtcbmltcG9ydCBDb3B5VGV4dCBmcm9tIFwiLi9jb3B5VGV4dFwiO1xuaW1wb3J0IEJvbHRJY29uIGZyb20gXCIuL2ljb25zL2JvbHRJY29uXCI7XG5pbXBvcnQgSGVhcnRJY29uIGZyb20gXCIuL2ljb25zL2hlYXJ0SWNvblwiO1xuaW1wb3J0IExpbmtJY29uIGZyb20gXCIuL2ljb25zL2xpbmtJY29uXCI7XG5pbXBvcnQgUmVwbHlJY29uIGZyb20gXCIuL2ljb25zL3JlcGx5SWNvblwiO1xuaW1wb3J0IFJlcG9zdEljb24gZnJvbSBcIi4vaWNvbnMvcmVwb3N0SWNvblwiO1xuXG5mdW5jdGlvbiBNZXRhKHtcbiAgbm90ZSxcbiAgcHJvZmlsZXNMaXN0LFxuICByZXBsaWVzQ291bnQsXG4gIHJlcG9zdHNDb3VudCxcbiAgbGlrZXNDb3VudCxcbiAgemFwQW1vdW50LFxuICBvcHRpb25zLFxufSkge1xuICBsZXQgZGF0ZSwgZW5jb2RlZElkLCBmb3JtYXR0ZWREYXRlLCBmb3JtYXR0ZWRaYXBBbW91bnQ7XG5cbiAgbGV0IGNyZWF0ZWRBdCA9IG5vdGVcbiAgICA/IG5vdGUuY3JlYXRlZF9hdFxuICAgIDogcHJvZmlsZXNMaXN0XG4gICAgPyBwcm9maWxlc0xpc3QuY3JlYXRlZF9hdFxuICAgIDogbnVsbDtcbiAgaWYgKGNyZWF0ZWRBdCkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShjcmVhdGVkQXQgKiAxMDAwKTtcbiAgICBmb3JtYXR0ZWREYXRlID0gZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoXCJlbi1VU1wiLCB7XG4gICAgICBob3VyMTI6IHRydWUsXG4gICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnc2hvcnQnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgfSk7XG4gIH1cblxuICBpZiAobm90ZSAmJiBub3RlLmlkKSB7XG4gICAgZW5jb2RlZElkID0gZ2V0Tm90ZUlkKG5vdGUuaWQpO1xuICB9XG4gIGlmIChwcm9maWxlc0xpc3QpIHtcbiAgICBlbmNvZGVkSWQgPSBwcm9maWxlc0xpc3QuaWQ7XG4gIH1cblxuICBmb3JtYXR0ZWRaYXBBbW91bnQgPSBmb3JtYXRaYXBBbW91bnQoemFwQW1vdW50KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3M9XCJjYXJkTWV0YVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmREYXRlXCI+e2Zvcm1hdHRlZERhdGV9PC9kaXY+XG4gICAgICA8aHIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkSW50ZXJhY3Rpb25zXCI+XG4gICAgICAgIHtvcHRpb25zICYmIG9wdGlvbnMuc2hvd1phcHMgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnRlcmFjdGlvbkNvbnRhaW5lclwiIHRpdGxlPVwiVG90YWwgc2F0cyB6YXBwZWRcIj5cbiAgICAgICAgICAgIDxCb2x0SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTVcIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiemFwQW1vdW50XCI+e2Zvcm1hdHRlZFphcEFtb3VudH08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIiB0aXRsZT1cIk51bWJlciBvZiByZXBsaWVzXCI+XG4gICAgICAgICAgPFJlcGx5SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTVcIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVwbGllc0NvdW50XCI+e3JlcGxpZXNDb3VudH08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIiB0aXRsZT1cIk51bWJlciBvZiByZXBvc3RzXCI+XG4gICAgICAgICAgPFJlcG9zdEljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcG9zdHNDb3VudFwiPntyZXBvc3RzQ291bnR9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImludGVyYWN0aW9uQ29udGFpbmVyXCIgdGl0bGU9XCJOdW1iZXIgb2YgbGlrZXNcIj5cbiAgICAgICAgICA8SGVhcnRJY29uIGFkZGl0aW9uYWxDbGFzc2VzPVwidy01IGgtNVwiIC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJsaWtlc0NvdW50XCI+e2xpa2VzQ291bnR9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImludGVyYWN0aW9uQ29udGFpbmVyXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93XCJcbiAgICAgICAgICAgIGhyZWY9e1xuICAgICAgICAgICAgICBub3RlXG4gICAgICAgICAgICAgICAgPyBgaHR0cHM6Ly9ub3N0ci5iYW5kLyR7ZW5jb2RlZElkfWBcbiAgICAgICAgICAgICAgICA6IGBodHRwczovL2xpc3RyLmxvbC9hLyR7cHJvZmlsZXNMaXN0Lm5hZGRyfWBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsYXNzPVwibGlua0xpbmtcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMaW5rSWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTUgaG92ZXI6dGV4dC1ncmF5LTYwMFwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpc3BsYXlUZXh0XCI+T3Blbjwvc3Bhbj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7b3B0aW9ucyAmJiBvcHRpb25zLnNob3dDb3B5QWRkciA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImludGVyYWN0aW9uQ29udGFpbmVyXCI+XG4gICAgICAgICAgICA8Q29weVRleHRcbiAgICAgICAgICAgICAgaWNvbkNsYXNzZXM9XCJ3LTUgaC01XCJcbiAgICAgICAgICAgICAgZGlzcGxheVRleHQ9e25vdGUgPyBcIkNvcHkgTm90ZSBJRFwiIDogXCJDb3B5IElEXCJ9XG4gICAgICAgICAgICAgIGNvcHlUZXh0PXtub3RlID8gbm90ZSA6IHByb2ZpbGVzTGlzdC5uYWRkcn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1ldGE7XG4iLCJmdW5jdGlvbiBLZXlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdrZXlJY29uJztcbiAgaWYgKGFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgbGV0IGFyciA9IGFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgYXJyLnB1c2goY2xhc3Nlcyk7XG4gICAgY2xhc3NlcyA9IGFyci5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIlxuICAgICAgd2lkdGg9XCIxcmVtXCJcbiAgICAgIGhlaWdodD1cIjFyZW1cIlxuICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIGQ9XCJNMTUuNzUgNS4yNWEzIDMgMCAwMTMgM20zIDBhNiA2IDAgMDEtNy4wMjkgNS45MTJjLS41NjMtLjA5Ny0xLjE1OS4wMjYtMS41NjMuNDNMMTAuNSAxNy4yNUg4LjI1djIuMjVINnYyLjI1SDIuMjV2LTIuODE4YzAtLjU5Ny4yMzctMS4xNy42NTktMS41OTFsNi40OTktNi40OTljLjQwNC0uNDA0LjUyNy0xIC40My0xLjU2M0E2IDYgMCAxMTIxLjc1IDguMjV6XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleUljb247XG4iLCJmdW5jdGlvbiBOb3N0cmljaEljb24oeyBhZGRpdGlvbmFsQ2xhc3NlcyB9KSB7XG4gIGxldCBjbGFzc2VzID0gJ25vc3RyaWNoSWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcblxuICAgIDxzdmdcbiAgICAgIHdpZHRoPVwiM3JlbVwiXG4gICAgICBoZWlnaHQ9XCIzcmVtXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgNjc0IDc2OVwiXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoIGQ9XCJNNTY3LjcyOSAzMjQuOTY3QzU4Mi45NDYgNDI4LjA4NCA0NzUuNzk1IDQ0OS40NjUgNDE1LjAyNyA0NDcuMzE4QzQxMS43MDUgNDQ3LjIgNDA4LjU3IDQ0OC44MTkgNDA2LjYzMSA0NTEuNTE5QzQwMC4zODcgNDYwLjIxNCAzODkuOTU2IDQ3Mi4wMTcgMzgxLjk1OCA0NzIuMDE3QzM3My4xMjcgNDcyLjAxNyAzNjUuMTkxIDQ4OS4yMTcgMzYxLjY3NSA0OTkuNjIxQzM2MS4zNiA1MDAuNTU1IDM2Mi4yNzkgNTAxLjQxNCAzNjMuMjE2IDUwMS4xMUM0NTkuODUyIDQ2OS43MTkgNDk3LjczNyA0NTguOTU0IDUxNC4wNDYgNDYxLjk3NEM1MjcuMTk0IDQ2NC40MDkgNTUxLjc4NSA1MDguNDM4IDU2Mi40MzcgNTMwLjE0OEM1MzUuOTU5IDUzMS42NyA1MjcuMTMzIDUwNy45MzEgNTIxLjA0NiA1MDMuNjdDNTE2LjE3NiA1MDAuMjYxIDUxNC4zNSA1MTUuODQ0IDUxNC4wNDYgNTI0LjA2MUM1MDguMjYzIDUyMS4wMTggNTAwLjk1OSA1MTYuNzU3IDUwMC4zNSA1MDMuNjdDNDk5Ljc0MSA0OTAuNTgzIDQ5My4wNDYgNDkzLjkzMSA0ODcuODcyIDQ5NC41MzlDNDgyLjY5OCA0OTUuMTQ4IDQwMy4yNjMgNTIwLjcxMyAzOTEuMzkzIDUyNC4wNjFDMzc5LjUyMyA1MjcuNDA5IDM2NS44MjggNTMxLjk3NCAzNTQuNTY3IDUzOS44ODdDMzM1LjY5NyA1NDkuMDE4IDMyMy41MjMgNTQyLjYyNiAzMjAuMTc1IDUyNy4xMDVDMzE3LjQ5NyA1MTQuNjg3IDMzNC44ODYgNDc2LjQ4MSAzNDMuOTE1IDQ1OC45M0MzMzIuNzU1IDQ2My4wOSAzMDkuNTg0IDQ3MS41MyAzMDYuMTc1IDQ3Mi4wMTdDMzAyLjg1NCA0NzIuNDkyIDI2MC41NDcgNTA1LjE3MiAyMzguMjAzIDUyMi43MDdDMjM3LjA5MSA1MjMuNTggMjM2LjM4IDUyNC44NDkgMjM2LjEzNCA1MjYuMjQxQzIzMi42MjcgNTQ2LjA1NCAyMjEuMTU3IDU1MS41MTYgMjAxLjE3NSA1NjEuOEMxODUuMTE3IDU3MC4wNjYgMTI4LjgyMiA2NTYuNjg0IDEwMC4yNzIgNzAyLjgwM0M5OC41ODU4IDcwNS41MjYgOTYuMTEyNiA3MDcuNjI5IDkzLjQyMDIgNzA5LjM2M0M3NC45Njg2IDcyMS4yNDkgNTYuMDE3OSA3NTMuMDEzIDQ4LjM5MTUgNzY4LjQ1M0MzNy42Nzg0IDczNy41MzIgNTEuNjM3OSA3MTAuOTMxIDU5Ljk1NjggNzAxLjQ5N0M1Ni4zMDQ2IDY5OC4zMzEgNDcuODg0MyA3MDAuMTc4IDQ0LjEzMDYgNzAxLjQ5N0M1NC40Nzg1IDY2NS44ODggOTAuNjk2MSA2NjUuODg4IDg5LjQ3ODcgNjY1Ljg4OEM5Ni4xNzQ0IDY2MC4xMDUgMTc0LjY5NiA1NDcuOCAxNzYuNTIzIDU0Mi42MjZDMTc4LjMzNiA1MzcuNDg4IDE3NS4zNDYgNTEzLjQzNiAyMTQuOTYyIDUwMC4yODdDMjE1LjQ5NSA1MDAuMTEgMjE2LjAyNCA0OTkuODY2IDIxNi40OTcgNDk5LjU2M0MyNDcuMzA2IDQ3OS44MDIgMjcwLjQyMyA0NDcuODY5IDI3OC4xNzUgNDM0LjI3OEMyMzYuNDYyIDQzMS40MDkgMTg4LjU5NiA0MDcuODE2IDE2NC4zNjYgMzkzLjE1MkMxNTkuODczIDM5MC40MzIgMTU1LjA3NyAzODguMTA1IDE0OS44NzEgMzg3LjQwN0MxMTUuNzY0IDM4Mi44MzUgODEuMzI4NSA0MDQuNzkxIDY3LjU2NTUgNDE3LjIzNUM2MS45NjU1IDQwOS40NDMgNjguMjc1NyAzODYuOCA3Mi4xMzA4IDM3Ni40NTJDNTguNDk1OSAzNzQuNTA0IDM4LjQ0OTUgMzk0LjMwNyAzMC4xMzA2IDQwNC40NTJDMjEuMTIxOCAzOTAuMzMgMjkuMDE0NiAzNjUuMDg5IDM0LjA4NzEgMzU0LjIzNEMxNi4wNjk2IDM1NC43MjEgMy44NTUwOSAzNjIuOTU5IDAgMzY3LjAxN0MxNC45MTMxIDI1NS45MyAxMjguOTg0IDI4OC4yMzcgMTMwLjI2MSAyODkuNzEyQzEyNC4xNzQgMjgzLjM4MiAxMjQuNjgyIDI3NS4xMDQgMTI1LjY5NiAyNzEuNzU2QzE5NC43ODMgMjczLjU4MiAyMjcuMDQ1IDI2Mi4wMTcgMjQ3LjQzNiAyNTAuMTQ3QzQwOC4xMzIgMTYwLjM2NCA0NzcuMzcyIDIxNS40NTEgNTAyLjkzNyAyMjkuMjk5QzUyOC41MDIgMjQzLjE0NyA1NzQuOTE2IDI0OC43NzcgNjA3LjAyNSAyMzUuOTk1QzY0NS4zNzMgMjE4LjY0NyA2MzkuNTk5IDE3My45MyA2MzEuODI5IDE1Ni44NjRDNjIzLjMwNyAxMzguMTQ2IDU3NS4yMiAxMTIuMjc2IDU1OC4xNzYgNzkuNTU5MUM1NDEuMTMzIDQ2Ljg0MjIgNTU1LjgyNSA1LjkzNzg5IDU3NS43MjggMS41MTA2MUM1OTQuODAyIC0yLjczMjEzIDYwNy45NzUgMi4zNzM4MyA2MTguMjg1IDExLjY4OTFDNjI1LjE1OSAxNy44OTk0IDY0NC40NiAyMi4zNDEzIDY1Mi41MjUgMjUuMjMyNkM2NjAuNTkgMjguMTIzOSA2NzMuOTgxIDMxLjkyODMgNjczLjIyMSAzNC4yMTA5QzY3Mi40NiAzNi40OTM1IDY1OS41NDggMzYuMTg4OSA2NTcuNTQ3IDM2LjE4ODlDNjUzLjQzOCAzNi4xODg5IDY0OC41NjggMzYuNzk3NiA2NTMuNDM4IDM5LjA4MDJDNjU5LjI0MyA0MS40MzQ4IDY2OC4wNTMgNDQuODc0NSA2NzIuMDk1IDQ3LjA4OEM2NzIuNTQ5IDQ3LjMzNjYgNjcyLjQ1NCA0Ny45NzkxIDY3MS45NTUgNDguMTE1NkM2NDMuODU4IDU1Ljc5OCA2MTguNzY4IDQwLjExMDggNjAwLjE3NyA1OC4xMDJDNTgxLjMwNyA3Ni4zNjMgNjIxLjQ4MSA5MC4zNjMgNjQyLjE3NyAxMTIuMjc2QzY2Mi44NzMgMTM0LjE4OSA2ODQuMTc3IDE2MC4zNjMgNjY3LjEzNCAyMjAuMDE2QzY1My44NzQgMjY2LjQyNCA1OTguMDkzIDMwNS44NDggNTY5LjY1NCAzMjEuMDQ1QzU2OC4yNTUgMzIxLjc5MyA1NjcuNDk3IDMyMy4zOTggNTY3LjcyOSAzMjQuOTY3WlwiIGZpbGw9XCIjN0EzQkZGXCIvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBOb3N0cmljaEljb247XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmZ1bmN0aW9uIFByb2ZpbGVJbWFnZSh7IHRodW1ibmFpbCwgZnVsbEltYWdlIH0pIHtcbiAgY29uc3QgW2lzRnVsbEltYWdlTG9hZGVkLCBzZXRJc0Z1bGxJbWFnZUxvYWRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpbWFnZVNyYywgc2V0SW1hZ2VTcmNdID0gdXNlU3RhdGUodGh1bWJuYWlsKTtcblxuICBjb25zdCBvbkVycm9yID0gKCkgPT4ge1xuICAgIGlmICghaXNGdWxsSW1hZ2VMb2FkZWQpIHtcbiAgICAgIHNldEltYWdlU3JjKGZ1bGxJbWFnZSk7XG4gICAgICBzZXRJc0Z1bGxJbWFnZUxvYWRlZCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0SW1hZ2VTcmMobnVsbCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBpbWFnZVNyYyA/IChcbiAgICA8aW1nIGNsYXNzTmFtZT1cInByb2ZpbGVJbWdcIiBzcmM9e2ltYWdlU3JjfSBvbkVycm9yPXtvbkVycm9yfSAvPlxuICApIDogKFxuICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlV2l0aG91dEltZ1wiIC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGVJbWFnZTtcbiIsImltcG9ydCB7IGZvcm1hdE5wdWIsIGdldE5wdWIgfSBmcm9tIFwiLi4vY29tbW9uXCI7XG5pbXBvcnQgQ29weVRleHQgZnJvbSBcIi4vY29weVRleHRcIjtcbmltcG9ydCBLZXlJY29uIGZyb20gXCIuL2ljb25zL2tleUljb25cIjtcbmltcG9ydCBOb3N0cmljaEljb24gZnJvbSBcIi4vaWNvbnMvbm9zdHJpY2hJY29uXCI7XG5pbXBvcnQgUHJvZmlsZUltYWdlIGZyb20gXCIuL3Byb2ZpbGVJbWFnZS5qc1wiO1xuXG5mdW5jdGlvbiBQcm9maWxlKHsgcHJvZmlsZVBrZXksIHByb2ZpbGUsIG9wdGlvbnMgfSkge1xuICBsZXQgY2FjaGVkUHJvZmlsZVBpY3R1cmUsIGVuY29kZWRQcm9maWxlUGtleSwgdHJ1bmNhdGVkUHJvZmlsZVBrZXk7XG4gIGlmIChwcm9maWxlUGtleSkge1xuICAgIGVuY29kZWRQcm9maWxlUGtleSA9IGdldE5wdWIocHJvZmlsZVBrZXkpO1xuICAgIHRydW5jYXRlZFByb2ZpbGVQa2V5ID0gYCR7Zm9ybWF0TnB1YihlbmNvZGVkUHJvZmlsZVBrZXkpfWA7XG4gICAgY2FjaGVkUHJvZmlsZVBpY3R1cmUgPSBgaHR0cHM6Ly9tZWRpYS5ub3N0ci5iYW5kL3RodW1icy8ke3Byb2ZpbGVQa2V5LnNsaWNlKFxuICAgICAgLTRcbiAgICApfS8ke3Byb2ZpbGVQa2V5fS1waWN0dXJlLTY0YDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzcz1cImNhcmRQcm9maWxlXCI+XG4gICAgICB7Y2FjaGVkUHJvZmlsZVBpY3R1cmUgJiYgcHJvZmlsZS5waWN0dXJlID8gKFxuICAgICAgICA8UHJvZmlsZUltYWdlXG4gICAgICAgICAgdGh1bWJuYWlsPXtjYWNoZWRQcm9maWxlUGljdHVyZX1cbiAgICAgICAgICBmdWxsSW1hZ2U9e3Byb2ZpbGUucGljdHVyZX1cbiAgICAgICAgLz5cbiAgICAgICkgOiAoXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlV2l0aG91dEltZ1wiIC8+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzcz1cInByb2ZpbGVEZXRhaWxzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlTmFtZVwiPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiXG4gICAgICAgICAgICBocmVmPXtgaHR0cHM6Ly9ub3N0ci5iYW5kLyR7ZW5jb2RlZFByb2ZpbGVQa2V5fWB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb2ZpbGUuZGlzcGxheV9uYW1lIHx8IHByb2ZpbGUubmFtZSB8fCBcIkxvYWRpbmcuLi5cIn1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZVBrZXlcIj5cbiAgICAgICAgICA8S2V5SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGtleVwiPnt0cnVuY2F0ZWRQcm9maWxlUGtleSB8fCBcIm5wdWIuLi5cIn08L3NwYW4+XG4gICAgICAgICAgPENvcHlUZXh0IGljb25DbGFzc2VzPVwidy00IGgtNFwiIGNvcHlUZXh0PXtlbmNvZGVkUHJvZmlsZVBrZXl9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHtvcHRpb25zICYmICFvcHRpb25zLmhpZGVOb3N0cmljaCA/IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJub3N0cmljaExpbmtcIj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIlxuICAgICAgICAgICAgaHJlZj17YGh0dHBzOi8vaGV5bm9zdHIuY29tYH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImxpbmtMaW5rXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Tm9zdHJpY2hJY29uIGFkZGl0aW9uYWxDbGFzc2VzPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkgOiBudWxsfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9maWxlO1xuIiwiZnVuY3Rpb24gRm9sbG93ZXJzSWNvbih7IGFkZGl0aW9uYWxDbGFzc2VzIH0pIHtcbiAgbGV0IGNsYXNzZXMgPSAnZm9sbG93ZXJzSWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcblxuICAgICAgPHN2Z1xuICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIlxuICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgd2lkdGg9XCIxLjI1cmVtXCJcbiAgICAgICBoZWlnaHQ9XCIxLjI1cmVtXCJcbiAgICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICAgID5cbiAgICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTE1IDE5LjEyOGE5LjM4IDkuMzggMCAwMDIuNjI1LjM3MiA5LjMzNyA5LjMzNyAwIDAwNC4xMjEtLjk1MiA0LjEyNSA0LjEyNSAwIDAwLTcuNTMzLTIuNDkzTTE1IDE5LjEyOHYtLjAwM2MwLTEuMTEzLS4yODUtMi4xNi0uNzg2LTMuMDdNMTUgMTkuMTI4di4xMDZBMTIuMzE4IDEyLjMxOCAwIDAxOC42MjQgMjFjLTIuMzMxIDAtNC41MTItLjY0NS02LjM3NC0xLjc2NmwtLjAwMS0uMTA5YTYuMzc1IDYuMzc1IDAgMDExMS45NjQtMy4wN00xMiA2LjM3NWEzLjM3NSAzLjM3NSAwIDExLTYuNzUgMCAzLjM3NSAzLjM3NSAwIDAxNi43NSAwem04LjI1IDIuMjVhMi42MjUgMi42MjUgMCAxMS01LjI1IDAgMi42MjUgMi42MjUgMCAwMTUuMjUgMHpcIlxuICAgICAgIC8+XG4gICAgICA8L3N2Zz5cblxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGb2xsb3dlcnNJY29uO1xuIiwiaW1wb3J0IHsgZm9ybWF0WmFwQW1vdW50LCBnZXROcHViIH0gZnJvbSBcIi4uL2NvbW1vblwiO1xuaW1wb3J0IENvcHlUZXh0IGZyb20gXCIuL2NvcHlUZXh0XCI7XG5pbXBvcnQgQm9sdEljb24gZnJvbSBcIi4vaWNvbnMvYm9sdEljb25cIjtcbmltcG9ydCBGb2xsb3dlcnNJY29uIGZyb20gXCIuL2ljb25zL2ZvbGxvd2Vyc0ljb25cIjtcbmltcG9ydCBMaW5rSWNvbiBmcm9tIFwiLi9pY29ucy9saW5rSWNvblwiO1xuXG5mdW5jdGlvbiBQcm9maWxlTWV0YSh7IHByb2ZpbGUsIGZvbGxvd2Vyc0NvdW50LCB6YXBBbW91bnQsIG9wdGlvbnMgfSkge1xuICBsZXQgbnB1YiwgZm9ybWF0dGVkWmFwQW1vdW50O1xuXG4gIGlmIChwcm9maWxlICYmIHByb2ZpbGUucHVia2V5KSB7XG4gICAgbnB1YiA9IGdldE5wdWIocHJvZmlsZS5wdWJrZXkpO1xuICAgIGZvcm1hdHRlZFphcEFtb3VudCA9IGZvcm1hdFphcEFtb3VudCh6YXBBbW91bnQpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzPVwiY2FyZE1ldGFcIj5cbiAgICAgIDxociAvPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmRJbnRlcmFjdGlvbnNcIj5cbiAgICAgICAge29wdGlvbnMgJiYgb3B0aW9ucy5zaG93WmFwcyA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImludGVyYWN0aW9uQ29udGFpbmVyXCIgdGl0bGU9XCJUb3RhbCBzYXRzIHphcHBlZFwiPlxuICAgICAgICAgICAgPEJvbHRJY29uIGFkZGl0aW9uYWxDbGFzc2VzPVwidy01IGgtNVwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ6YXBBbW91bnRcIj57Zm9ybWF0dGVkWmFwQW1vdW50fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnRlcmFjdGlvbkNvbnRhaW5lclwiIHRpdGxlPVwiTnVtYmVyIG9mIGZvbGxvd2Vyc1wiPlxuICAgICAgICAgIDxGb2xsb3dlcnNJY29uIGFkZGl0aW9uYWxDbGFzc2VzPVwidy01IGgtNVwiIC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb2xsb3dlcnNDb3VudFwiPntmb2xsb3dlcnNDb3VudH08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIj5cbiAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93XCIgaHJlZj17YGh0dHBzOi8vbm9zdHIuYmFuZC8ke25wdWJ9YH1cbiAgICAgICAgICAgICAgY2xhc3M9XCJsaW5rTGlua1wiPlxuICAgICAgICAgICAgPExpbmtJY29uIGFkZGl0aW9uYWxDbGFzc2VzPVwidy01IGgtNSBob3Zlcjp0ZXh0LWdyYXktNjAwXCIgLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGlzcGxheVRleHRcIj5PcGVuPC9zcGFuPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtvcHRpb25zICYmIG9wdGlvbnMuc2hvd0NvcHlBZGRyID8gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIj5cbiAgICAgICAgICAgIDxDb3B5VGV4dFxuICAgICAgICAgICAgICBpY29uQ2xhc3Nlcz1cInctNSBoLTVcIlxuICAgICAgICAgICAgICBkaXNwbGF5VGV4dD1cIkNvcHkgTnB1YlwiXG4gICAgICAgICAgICAgIGNvcHlUZXh0PXtucHVifVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZmlsZU1ldGE7XG4iLCJpbXBvcnQgKiBhcyBzZWNwIGZyb20gXCJAbm9ibGUvc2VjcDI1NmsxXCI7XG5pbXBvcnQgeyBkZWNvZGUgfSBmcm9tIFwibGlnaHQtYm9sdDExLWRlY29kZXJcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7XG4gIGZvcm1hdE5vdGVJZCxcbiAgZm9ybWF0TnB1YixcbiAgZ2V0Tm90ZUlkLFxuICBnZXROcHViLFxuICBwYXJzZU5hZGRyLFxuICBwYXJzZU5vdGVJZCxcbiAgcGFyc2VOcHViLFxufSBmcm9tIFwiLi4vY29tbW9uXCI7XG5pbXBvcnQgTWV0YSBmcm9tIFwiLi9tZXRhXCI7XG5pbXBvcnQgUHJvZmlsZSBmcm9tIFwiLi9wcm9maWxlXCI7XG5pbXBvcnQgUHJvZmlsZU1ldGEgZnJvbSBcIi4vcHJvZmlsZU1ldGFcIjtcblxuY29uc3QgSU1BR0VfRklMRV9FWFRFTlNJT05TID0gW1wiLmpwZ1wiLCBcIi5qcGVnXCIsIFwiLnBuZ1wiLCBcIi53ZWJwXCIsIFwiLmdpZlwiXTtcbmNvbnN0IFZJREVPX0ZJTEVfRVhURU5TSU9OUyA9IFtcIi5tb3ZcIiwgXCIubXA0XCJdO1xuY29uc3QgWU9VVFVCRV9LRVlfV09SRFMgPSBbXCJ5b3V0dWJlXCJdO1xuXG5jbGFzcyBOb3N0ckVtYmVkIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBsZXQgaWQgPSBwcm9wcy5pZDtcbiAgICBsZXQga2luZCA9IDE7XG4gICAgaWYgKHByb3BzLmlkLnN0YXJ0c1dpdGgoXCJucHViMVwiKSkge1xuICAgICAgaWQgPSBwYXJzZU5wdWIocHJvcHMuaWQpO1xuICAgICAga2luZCA9IDA7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5pZC5zdGFydHNXaXRoKFwibm90ZTFcIikpIHtcbiAgICAgIGlkID0gcGFyc2VOb3RlSWQocHJvcHMuaWQpO1xuICAgIH0gZWxzZSBpZiAocHJvcHMuaWQuc3RhcnRzV2l0aChcIm5hZGRyXCIpKSB7XG4gICAgICBpZCA9IHBhcnNlTmFkZHIocHJvcHMuaWQpO1xuICAgICAgaWYgKGlkLmRhdGEuaWRlbnRpZmllcikge1xuICAgICAgICBraW5kID0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtpbmQgPSAzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpZCxcbiAgICAgIGtpbmQsXG4gICAgICByZWxheTogcHJvcHMucmVsYXksXG4gICAgICBub3RlOiB7fSxcbiAgICAgIHByb2ZpbGU6IHt9LFxuICAgICAgcHJvZmlsZXNMaXN0OiB7fSxcbiAgICAgIHRhZ2dlZFByb2ZpbGVzOiB7fSxcbiAgICAgIHByb2ZpbGVQa2V5OiBcIlwiLFxuICAgICAgbGlrZXNDb3VudDogMCxcbiAgICAgIHJlcG9zdHNDb3VudDogMCxcbiAgICAgIHJlcGxpZXNDb3VudDogMCxcbiAgICAgIHphcEFtb3VudDogMCxcbiAgICAgIGZvbGxvd2Vyc0NvdW50OiAwLFxuICAgICAgY291bnRUYWdnZWRQcm9maWxlczogMCxcbiAgICB9O1xuICB9XG5cbiAgc2hhMjU2KHN0cmluZykge1xuICAgIGNvbnN0IHV0ZjggPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyaW5nKTtcbiAgICByZXR1cm4gc2VjcC51dGlscy5zaGEyNTYodXRmOCkudGhlbigoaGFzaEJ1ZmZlcikgPT4ge1xuICAgICAgY29uc3QgaGFzaEFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoQnVmZmVyKSk7XG4gICAgICBjb25zdCBoYXNoSGV4ID0gaGFzaEFycmF5XG4gICAgICAgIC5tYXAoKGJ5dGVzKSA9PiBieXRlcy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKVxuICAgICAgICAuam9pbihcIlwiKTtcbiAgICAgIHJldHVybiBoYXNoSGV4O1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0Tm9zdHJFdmVudElEKG0pIHtcbiAgICBjb25zdCBhID0gWzAsIG0ucHVia2V5LCBtLmNyZWF0ZWRfYXQsIG0ua2luZCwgbS50YWdzLCBtLmNvbnRlbnRdO1xuICAgIGNvbnN0IHMgPSBKU09OLnN0cmluZ2lmeShhKTtcbiAgICBjb25zdCBoID0gYXdhaXQgdGhpcy5zaGEyNTYocyk7XG4gICAgcmV0dXJuIGg7XG4gIH1cblxuICB2ZXJpZnlOb3N0clNpZ25hdHVyZShldmVudCkge1xuICAgIHJldHVybiBzZWNwLnNjaG5vcnIudmVyaWZ5KGV2ZW50LnNpZywgZXZlbnQuaWQsIGV2ZW50LnB1YmtleSk7XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZU5vc3RyRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuaWQgIT09IChhd2FpdCB0aGlzLmdldE5vc3RyRXZlbnRJRChldmVudCkpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBldmVudC5jb250ZW50ICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBldmVudC5jcmVhdGVkX2F0ICE9PSBcIm51bWJlclwiKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZlbnQudGFncykpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50LnRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB0YWcgPSBldmVudC50YWdzW2ldO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhZykpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGFnLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGFnW2pdID09PSBcIm9iamVjdFwiKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBpc1ZhbGlkRXZlbnQoZXYpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZXYuaWQgJiZcbiAgICAgIGV2LnB1YmtleSAmJlxuICAgICAgZXYuc2lnICYmXG4gICAgICAoYXdhaXQgdGhpcy52YWxpZGF0ZU5vc3RyRXZlbnQoZXYpKSAmJlxuICAgICAgdGhpcy52ZXJpZnlOb3N0clNpZ25hdHVyZShldilcbiAgICApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSAoc29ja2V0KSA9PiB7XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUua2luZCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hQcm9maWxlKHsgc29ja2V0LCBwcm9maWxlUGtleTogdGhpcy5zdGF0ZS5pZCB9KTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoTm90ZSh7IHNvY2tldCwgbm90ZUlkOiB0aGlzLnN0YXRlLmlkIH0pO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hQcm9maWxlc0xpc3QoeyBzb2NrZXQsIGRhdGE6IHRoaXMuc3RhdGUuaWQuZGF0YSB9KTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoUHJvZmlsZXNMaXN0KHsgc29ja2V0LCBkYXRhOiB0aGlzLnN0YXRlLmlkLmRhdGEgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghd2luZG93Ll9fbm9zdHJFbWJlZCkgd2luZG93Ll9fbm9zdHJFbWJlZCA9IHsgc29ja2V0czoge30gfTtcblxuICAgIGxldCBzb2NrZXQgPSBudWxsO1xuICAgIGlmICh0aGlzLnN0YXRlLnJlbGF5IGluIHdpbmRvdy5fX25vc3RyRW1iZWQuc29ja2V0cykge1xuICAgICAgc29ja2V0ID0gd2luZG93Ll9fbm9zdHJFbWJlZC5zb2NrZXRzW3RoaXMuc3RhdGUucmVsYXldO1xuICAgICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09IDEpXG4gICAgICAgIC8vIG9wZW5cbiAgICAgICAgc3RhcnQoc29ja2V0KTtcbiAgICAgIGVsc2UgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09IDApXG4gICAgICAgIC8vIGNvbm5lY3RpbmdcbiAgICAgICAgc29ja2V0LnN0YXJ0cy5wdXNoKHN0YXJ0KTtcbiAgICAgIGVsc2Ugc29ja2V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoc29ja2V0KSByZXR1cm47XG5cbiAgICBzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMuc3RhdGUucmVsYXkpO1xuICAgIHdpbmRvdy5fX25vc3RyRW1iZWQuc29ja2V0c1t0aGlzLnN0YXRlLnJlbGF5XSA9IHNvY2tldDtcblxuICAgIHNvY2tldC5zdGFydHMgPSBbc3RhcnRdO1xuXG4gICAgc29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBDb25uZWN0ZWQgdG8gTm9zdHIgcmVsYXk6ICR7c29ja2V0LnVybH1gKTtcbiAgICAgIGZvciAoY29uc3QgcyBvZiBzb2NrZXQuc3RhcnRzKSBzKHNvY2tldCk7XG4gICAgICBzb2NrZXQuc3RhcnRzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgc29ja2V0Lm9uZXJyb3IgPSAoZXYpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBGYWlsZWQgdG8gY29ubmVjdCB0byBOb3N0ciByZWxheTogJHtzb2NrZXQudXJsfX1gKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VicyA9IHt9O1xuICAgIHNvY2tldC5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgaWYgKCFkIHx8ICFkLmxlbmd0aCkgdGhyb3cgXCJCYWQgcmVwbHkgZnJvbSByZWxheVwiO1xuXG4gICAgICAgIGlmIChkWzBdID09IFwiTk9USUNFXCIgJiYgZC5sZW5ndGggPT0gMikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwibm90aWNlIGZyb21cIiwgc29ja2V0LnVybCwgZFsxXSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRbMF0gPT0gXCJFT1NFXCIgJiYgZC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgaWYgKGRbMV0gaW4gc3Vicykgc3Vic1tkWzFdXS5vbl9ldmVudChudWxsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZFswXSA9PSBcIkNPVU5UXCIgJiYgZC5sZW5ndGggPT0gMykge1xuICAgICAgICAgIGlmIChkWzFdIGluIHN1YnMpIHN1YnNbZFsxXV0ub25fY291bnQoZFsyXSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRbMF0gIT0gXCJFVkVOVFwiIHx8IGQubGVuZ3RoIDwgMykgdGhyb3cgXCJVbmtub3duIHJlcGx5IGZyb20gcmVsYXlcIjtcblxuICAgICAgICBpZiAoZFsxXSBpbiBzdWJzKSBzdWJzW2RbMV1dLm9uX2V2ZW50KGRbMl0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWxheVwiLCBzb2NrZXQudXJsLCBcImJhZCBtZXNzYWdlXCIsIGUsIFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICBlcnIoZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzb2NrZXQuc3Vic2NyaWJlID0gKHsgdHlwZSwgc3ViLCBvaywgZXJyIH0pID0+IHtcbiAgICAgIGxldCBpZCA9IFwiZW1iZWQtXCIgKyBNYXRoLnJhbmRvbSgpO1xuICAgICAgY29uc3QgcmVxID0gW3R5cGUsIGlkLCBzdWJdO1xuICAgICAgc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkocmVxKSk7XG5cbiAgICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJfaWQgPSBpZDtcbiAgICAgICAgaWQgPSBudWxsO1xuICAgICAgICBzb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeShbXCJDTE9TRVwiLCBzdWJfaWRdKSk7XG4gICAgICAgIGRlbGV0ZSBzdWJzW3N1Yl9pZF07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBldmVudHMgPSBbXTtcbiAgICAgIGNvbnN0IHF1ZXVlID0gW107XG5cbiAgICAgIGNvbnN0IGRvbmUgPSAoKSA9PiB7XG4gICAgICAgIGlmICghaWQpIHJldHVybjtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRvKTtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgb2soZXZlbnRzKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRvID0gc2V0VGltZW91dChcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIHRlbGwgcmVsYXkgd2UncmUgbm8gbG9uZ2VyIGludGVyZXN0ZWRcbiAgICAgICAgICBjbG9zZSgpO1xuXG4gICAgICAgICAgLy8gbWF5YmUgcmVsYXkgdy9vIEVPU0Ugc3VwcG9ydD9cbiAgICAgICAgICBpZiAoZXZlbnRzLmxlbmd0aCB8fCBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9uX2V2ZW50KG51bGwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnIoXCJ0aW1lb3V0IG9uIHJlbGF5XCIsIHNvY2tldC51cmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3ViLmxpbWl0ICYmIHN1Yi5saW1pdCA9PSAxID8gMjAwMCA6IDYwMDBcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG9uX2V2ZW50ID0gYXN5bmMgKGUpID0+IHtcbiAgICAgICAgcXVldWUucHVzaChlKTtcbiAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgIGUgPSBxdWV1ZVswXTtcbiAgICAgICAgICBpZiAoZSAmJiAoYXdhaXQgdGhpcy5pc1ZhbGlkRXZlbnQoZSkpKSBldmVudHMucHVzaChlKTtcbiAgICAgICAgICBxdWV1ZS5zaGlmdCgpOyAvLyBkZXF1ZXVlIGFmdGVyIHdlJ3ZlIGF3YWl0ZWRcbiAgICAgICAgICBpZiAoIWUgfHwgKHN1Yi5saW1pdCAmJiBzdWIubGltaXQgPT0gZXZlbnRzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZSgwLCBxdWV1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBvbl9jb3VudCA9IGFzeW5jIChlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlICE9IFwiQ09VTlRcIikgcmV0dXJuOyAvLyBtaXNiZWhhdmluZyByZWxheVxuICAgICAgICBldmVudHMucHVzaChlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfTtcblxuICAgICAgc3Vic1tpZF0gPSB7IG9rLCBlcnIsIG9uX2V2ZW50LCBvbl9jb3VudCB9O1xuICAgIH07XG5cbiAgICBzb2NrZXQubGlzdEV2ZW50cyA9ICh7IHN1Yiwgb2ssIGVyciB9KSA9PiB7XG4gICAgICBzb2NrZXQuc3Vic2NyaWJlKHsgdHlwZTogXCJSRVFcIiwgc3ViLCBvaywgZXJyIH0pO1xuICAgIH07XG5cbiAgICBzb2NrZXQuY291bnRFdmVudHMgPSAoeyBzdWIsIG9rLCBlcnIgfSkgPT4ge1xuICAgICAgc29ja2V0LnN1YnNjcmliZSh7XG4gICAgICAgIHR5cGU6IFwiQ09VTlRcIixcbiAgICAgICAgc3ViLFxuICAgICAgICBvazogKGV2ZW50cykgPT4ge1xuICAgICAgICAgIG9rKGV2ZW50cy5sZW5ndGggPyBldmVudHNbMF0gOiBudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyLFxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGdldEV2ZW50KHsgc29ja2V0LCBzdWIsIG9rLCBlcnIgfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgICAgc3ViLmxpbWl0ID0gMTtcbiAgICAgIHNvY2tldC5saXN0RXZlbnRzKHtcbiAgICAgICAgc3ViLFxuICAgICAgICBvazogKGV2ZW50cykgPT4ge1xuICAgICAgICAgIG9rKGV2ZW50cyA/IGV2ZW50c1swXSA6IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBlcnIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGxpc3RFdmVudHMoeyBzb2NrZXQsIHN1YiB9KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChvaywgZXJyKSA9PiB7XG4gICAgICBzb2NrZXQubGlzdEV2ZW50cyh7IHN1Yiwgb2ssIGVyciB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvdW50RXZlbnRzKHsgc29ja2V0LCBzdWIgfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgICAgc29ja2V0LmNvdW50RXZlbnRzKHsgc3ViLCBvaywgZXJyIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hOb3RlKHsgc29ja2V0LCBub3RlSWQgfSkge1xuICAgIGNvbnN0IHN1YiA9IHsgaWRzOiBbbm90ZUlkXSwga2luZHM6IFsxXSB9O1xuICAgIHRoaXMuZ2V0RXZlbnQoeyBzb2NrZXQsIHN1YiB9KVxuICAgICAgLnRoZW4oKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbm90ZTogZXZlbnQsXG4gICAgICAgICAgICBwcm9maWxlUGtleTogZXZlbnQucHVia2V5LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZmV0Y2hQcm9maWxlKHsgc29ja2V0LCBwcm9maWxlUGtleTogZXZlbnQucHVia2V5IH0pO1xuICAgICAgICAgIHRoaXMuZmV0Y2hNZXRhKHsgc29ja2V0LCBub3RlSWQgfSk7XG4gICAgICAgICAgdGhpcy5mZXRjaFRhZ3MoeyBzb2NrZXQsIHRhZ3M6IGV2ZW50LnRhZ3MgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogV2UgY2FuJ3QgZmluZCB0aGF0IG5vdGUgb24gdGhpcyByZWxheVwiKTtcbiAgICAgICAgICB0aHJvdyBcIkV2ZW50IG5vdCBmb3VuZFwiO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZmV0Y2hpbmcgbm90ZTogJHtlcnJvcn1gKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbm90ZToge1xuICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgICBcIlNvcnJ5LCB3ZSB3ZXJlbid0IGFibGUgdG8gZmluZCBhbmQgcGFyc2UgdGhpcyBub3RlIG9uIHRoZSBzcGVjaWZpZWQgcmVsYXkuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZldGNoUHJvZmlsZSh7IHNvY2tldCwgcHJvZmlsZVBrZXkgfSkge1xuICAgIGNvbnN0IHN1YiA9IHsga2luZHM6IFswXSwgYXV0aG9yczogW3Byb2ZpbGVQa2V5XSB9O1xuICAgIHRoaXMuZ2V0RXZlbnQoeyBzb2NrZXQsIHN1YiB9KVxuICAgICAgLnRoZW4oKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGxldCBwYXJzZWRQcm9maWxlID0gSlNPTi5wYXJzZShldmVudC5jb250ZW50KTtcbiAgICAgICAgICBwYXJzZWRQcm9maWxlLnB1YmtleSA9IHByb2ZpbGVQa2V5O1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwcm9maWxlOiBwYXJzZWRQcm9maWxlIH0pO1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmtpbmQgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5mZXRjaFByb2ZpbGVNZXRhKHsgc29ja2V0LCBwdWJrZXk6IHByb2ZpbGVQa2V5IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBcIkV2ZW50IG5vdCBmb3VuZFwiO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZmV0Y2hpbmcgcHJvZmlsZTogJHtlcnJvcn1gKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgICAgcHVia2V5OiBwcm9maWxlUGtleSxcbiAgICAgICAgICAgIGVycm9yOiB0cnVlLFxuICAgICAgICAgICAgYWJvdXQ6XG4gICAgICAgICAgICAgIFwiU29ycnksIHdlIHdlcmVuJ3QgYWJsZSB0byBmaW5kIHRoaXMgcHJvZmlsZSBvbiB0aGUgc3BlY2lmaWVkIHJlbGF5LlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBmZXRjaFByb2ZpbGVzTGlzdCh7IHNvY2tldCwgZGF0YSB9KSB7XG4gICAgY29uc3Qgc3ViID0ge1xuICAgICAga2luZHM6IFtkYXRhLmtpbmRdLFxuICAgICAgXCIjZFwiOiBbZGF0YS5pZGVudGlmaWVyXSxcbiAgICAgIGF1dGhvcnM6IFtkYXRhLnB1YmtleV0sXG4gICAgfTtcbiAgICB0aGlzLmdldEV2ZW50KHsgc29ja2V0LCBzdWIgfSlcbiAgICAgIC50aGVuKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBsZXQgcHJvZmlsZXNMaXN0T2JqID0gdGhpcy5nZXRQcm9maWxlc0xpc3RPYmooZXZlbnQudGFncyk7XG4gICAgICAgICAgcHJvZmlsZXNMaXN0T2JqLmNyZWF0ZWRfYXQgPSBldmVudC5jcmVhdGVkX2F0O1xuICAgICAgICAgIHByb2ZpbGVzTGlzdE9iai5pZCA9IGAke2RhdGEua2luZH06JHtkYXRhLnB1YmtleX06JHtkYXRhLmlkZW50aWZpZXJ9YDtcbiAgICAgICAgICBwcm9maWxlc0xpc3RPYmoubmFkZHIgPSB0aGlzLnByb3BzLmlkO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwcm9maWxlc0xpc3Q6IHByb2ZpbGVzTGlzdE9iaiB9KTtcbiAgICAgICAgICB0aGlzLmZldGNoUHJvZmlsZSh7IHNvY2tldCwgcHJvZmlsZVBrZXk6IGV2ZW50LnB1YmtleSB9KTtcbiAgICAgICAgICB0aGlzLmZldGNoVGFncyh7IHNvY2tldCwgdGFnczogZXZlbnQudGFncyB9KTtcbiAgICAgICAgICB0aGlzLmZldGNoTWV0YSh7IHNvY2tldCwgZGF0YSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBcIkV2ZW50IG5vdCBmb3VuZFwiO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZmV0Y2hpbmcgcHJvZmlsZUxpc3Q6ICR7ZXJyb3J9YCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHByb2ZpbGVzTGlzdDoge1xuICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgICBcIlNvcnJ5LCB3ZSB3ZXJlbid0IGFibGUgdG8gZmluZCB0aGlzIHByb2ZpbGUgb24gdGhlIHNwZWNpZmllZCByZWxheS5cIixcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hUYWdzKHsgc29ja2V0LCB0YWdzIH0pIHtcbiAgICBjb25zdCBzdWIgPSB7IGtpbmRzOiBbMF0sIGF1dGhvcnM6IFtdIH07XG4gICAgbGV0IGNvdW50ID0gMDtcblxuICAgIGZvciAoY29uc3QgdCBvZiB0YWdzKSB7XG4gICAgICBpZiAoc3ViLmF1dGhvcnMubGVuZ3RoIDwgMTAwKSB7XG4gICAgICAgIGlmICh0Lmxlbmd0aCA+PSAyICYmIHRbMF0gPT0gXCJwXCIpIHtcbiAgICAgICAgICBzdWIuYXV0aG9ycy5wdXNoKHRbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0Lmxlbmd0aCA+PSAyICYmIHRbMF0gPT0gXCJwXCIpIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgIGNvdW50VGFnZ2VkUHJvZmlsZXM6IHN0YXRlLmNvdW50VGFnZ2VkUHJvZmlsZXMgKyBjb3VudCxcbiAgICB9KSk7XG5cbiAgICBpZiAoIXN1Yi5hdXRob3JzLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgdGhpcy5saXN0RXZlbnRzKHsgc29ja2V0LCBzdWIgfSlcbiAgICAgIC50aGVuKChldmVudHMpID0+IHtcbiAgICAgICAgY29uc3QgdGFnZ2VkUHJvZmlsZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHAgPSBKU09OLnBhcnNlKGV2ZW50LmNvbnRlbnQpO1xuICAgICAgICAgICAgdGFnZ2VkUHJvZmlsZXNbZXZlbnQucHVia2V5XSA9IHA7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBiYWQgZXZlbnQgY29udGVudFwiLCBlLCBldmVudC5jb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRhZ2dlZFByb2ZpbGVzIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nIHRhZ2dlZCBwcm9maWxlczogJHtlcnJvcn1gKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0UHJvZmlsZXNMaXN0T2JqKHRhZ3MpIHtcbiAgICBsZXQgcHJvZmlsZXNMaXN0ID0ge307XG5cbiAgICB0YWdzLmZvckVhY2goKHRhZykgPT4ge1xuICAgICAgaWYgKHRhZyAmJiB0YWdbMF0pIHtcbiAgICAgICAgaWYgKHRhZ1swXSA9PT0gXCJuYW1lXCIpIHtcbiAgICAgICAgICBwcm9maWxlc0xpc3QubmFtZSA9IHRhZ1sxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnWzBdID09PSBcImRcIikge1xuICAgICAgICAgIHByb2ZpbGVzTGlzdC5kID0gdGFnWzFdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWdbMF0gPT09IFwiZGVzY3JpcHRpb25cIikge1xuICAgICAgICAgIHByb2ZpbGVzTGlzdC5kZXNjcmlwdGlvbiA9IHRhZ1sxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcm9maWxlc0xpc3Q7XG4gIH1cblxuICBnZXRaYXBBbW91bnQoZSkge1xuICAgIHRyeSB7XG4gICAgICBmb3IgKGNvbnN0IHQgb2YgZS50YWdzKSB7XG4gICAgICAgIGlmICh0Lmxlbmd0aCA+PSAyICYmIHRbMF0gPT0gXCJib2x0MTFcIikge1xuICAgICAgICAgIGNvbnN0IGIgPSBkZWNvZGUodFsxXSk7XG4gICAgICAgICAgZm9yIChjb25zdCBzIG9mIGIuc2VjdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChzLm5hbWUgPT0gXCJhbW91bnRcIikgcmV0dXJuIHBhcnNlSW50KHMudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGJhZCB6YXBcIiwgZXIsIGUpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIG9uTGlzdE1ldGFFdmVudHMoZXZlbnRzKSB7XG4gICAgZm9yIChsZXQgbm90ZUV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgc3dpdGNoIChub3RlRXZlbnRbXCJraW5kXCJdKSB7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgIHJlcG9zdHNDb3VudDogc3RhdGUucmVwb3N0c0NvdW50ICsgMSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgIGxpa2VzQ291bnQ6IHN0YXRlLmxpa2VzQ291bnQgKyAxLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgcmVwbGllc0NvdW50OiBzdGF0ZS5yZXBsaWVzQ291bnQgKyAxLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5NzM1OlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgemFwQW1vdW50OiBzdGF0ZS56YXBBbW91bnQgKyB0aGlzLmdldFphcEFtb3VudChub3RlRXZlbnQpLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlVua25vd24gbm90ZSBraW5kXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZldGNoTWV0YSh7IHNvY2tldCwgbm90ZUlkLCBkYXRhIH0pIHtcbiAgICBpZiAoc29ja2V0LnVybC5pbmNsdWRlcyhcIndzczovL3JlbGF5Lm5vc3RyLmJhbmRcIikpXG4gICAgICByZXR1cm4gdGhpcy5mZXRjaE1ldGFDb3VudCh7IHNvY2tldCwgbm90ZUlkLCBkYXRhIH0pO1xuICAgIGVsc2UgcmV0dXJuIHRoaXMuZmV0Y2hNZXRhTGlzdCh7IHNvY2tldCwgbm90ZUlkLCBkYXRhIH0pO1xuICB9XG5cbiAgZmV0Y2hNZXRhQ291bnQoeyBzb2NrZXQsIG5vdGVJZCwgZGF0YSB9KSB7XG4gICAgY29uc3QgZ2V0U3ViID0gKGtpbmQpID0+IHtcbiAgICAgIGlmIChub3RlSWQpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZHM6IFtraW5kXSwgXCIjZVwiOiBbbm90ZUlkXSB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmRzOiBba2luZF0sXG4gICAgICAgICAgXCIjYVwiOiBbYCR7ZGF0YS5raW5kfToke2RhdGEucHVia2V5fToke2RhdGEuaWRlbnRpZmllcn1gXSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jb3VudEV2ZW50cyh7IHNvY2tldCwgc3ViOiBnZXRTdWIoMSkgfSkudGhlbigoYykgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAgIHJlcGxpZXNDb3VudDogYyA/IGMuY291bnQgOiAwLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHRoaXMuY291bnRFdmVudHMoeyBzb2NrZXQsIHN1YjogZ2V0U3ViKDYpIH0pLnRoZW4oKGMpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiAoe1xuICAgICAgICByZXBvc3RzQ291bnQ6IGMgPyBjLmNvdW50IDogMCxcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICB0aGlzLmNvdW50RXZlbnRzKHsgc29ja2V0LCBzdWI6IGdldFN1Yig3KSB9KS50aGVuKChjKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgbGlrZXNDb3VudDogYyA/IGMuY291bnQgOiAwLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHRoaXMubGlzdEV2ZW50cyh7IHNvY2tldCwgc3ViOiBnZXRTdWIoOTczNSkgfSkudGhlbigoZXZlbnRzKSA9PiB7XG4gICAgICB0aGlzLm9uTGlzdE1ldGFFdmVudHMoZXZlbnRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZldGNoTWV0YUxpc3QoeyBzb2NrZXQsIG5vdGVJZCwgZGF0YSB9KSB7XG4gICAgY29uc3Qgc3ViID0gdGhpcy5nZXRTdWJPbkZldGNoTWV0YUxpc3QoeyBub3RlSWQsIGRhdGEgfSk7XG5cbiAgICB0aGlzLmxpc3RFdmVudHMoeyBzb2NrZXQsIHN1YiB9KS50aGVuKChldmVudHMpID0+IHtcbiAgICAgIHRoaXMub25MaXN0TWV0YUV2ZW50cyhldmVudHMpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0U3ViT25GZXRjaE1ldGFMaXN0KHsgbm90ZUlkLCBkYXRhIH0pIHtcbiAgICBpZiAobm90ZUlkKSB7XG4gICAgICByZXR1cm4geyBraW5kczogWzEsIDYsIDcsIDk3MzVdLCBcIiNlXCI6IFtub3RlSWRdIH07XG4gICAgfVxuICAgIGlmIChkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kczogWzEsIDYsIDcsIDk3MzVdLFxuICAgICAgICBcIiNhXCI6IFtgJHtkYXRhLmtpbmR9OiR7ZGF0YS5wdWJrZXl9OiR7ZGF0YS5pZGVudGlmaWVyfWBdLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBvbkxpc3RQcm9maWxlTWV0YUV2ZW50cyhldmVudHMpIHtcbiAgICBmb3IgKGxldCBlIG9mIGV2ZW50cykge1xuICAgICAgc3dpdGNoIChlW1wia2luZFwiXSkge1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAgICAgICBmb2xsb3dlcnNDb3VudDogc3RhdGUuZm9sbG93ZXJzQ291bnQgKyAxLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5NzM1OlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgemFwQW1vdW50OiBzdGF0ZS56YXBBbW91bnQgKyB0aGlzLmdldFphcEFtb3VudChlKSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5sb2coXCJVbmtub3duIGV2ZW50IGtpbmRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmV0Y2hQcm9maWxlTWV0YUNvdW50KHsgc29ja2V0LCBwdWJrZXkgfSkge1xuICAgIGNvbnN0IGdldFN1YiA9IChraW5kKSA9PiB7XG4gICAgICByZXR1cm4geyBraW5kczogW2tpbmRdLCBcIiNwXCI6IFtwdWJrZXldIH07XG4gICAgfTtcbiAgICB0aGlzLmNvdW50RXZlbnRzKHsgc29ja2V0LCBzdWI6IGdldFN1YigzKSB9KS50aGVuKChjKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgZm9sbG93ZXJzQ291bnQ6IGMgPyBjLmNvdW50IDogMCxcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICB0aGlzLmxpc3RFdmVudHMoeyBzb2NrZXQsIHN1YjogZ2V0U3ViKDk3MzUpIH0pLnRoZW4oKGV2ZW50cykgPT4ge1xuICAgICAgdGhpcy5vbkxpc3RQcm9maWxlTWV0YUV2ZW50cyhldmVudHMpO1xuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hQcm9maWxlTWV0YUxpc3QoeyBzb2NrZXQsIHB1YmtleSB9KSB7XG4gICAgY29uc3Qgc3ViID0geyBraW5kczogWzMsIDk3MzVdLCBcIiNwXCI6IFtwdWJrZXldIH07XG4gICAgdGhpcy5saXN0RXZlbnRzKHsgc29ja2V0LCBzdWIgfSkudGhlbigoZXZlbnRzKSA9PiB7XG4gICAgICB0aGlzLm9uTGlzdFByb2ZpbGVNZXRhRXZlbnRzKGV2ZW50cyk7XG4gICAgfSk7XG4gIH1cblxuICBmZXRjaFByb2ZpbGVNZXRhKHsgc29ja2V0LCBwdWJrZXkgfSkge1xuICAgIGlmIChzb2NrZXQudXJsLmluY2x1ZGVzKFwid3NzOi8vcmVsYXkubm9zdHIuYmFuZFwiKSlcbiAgICAgIHJldHVybiB0aGlzLmZldGNoUHJvZmlsZU1ldGFDb3VudCh7IHNvY2tldCwgcHVia2V5IH0pO1xuICAgIGVsc2UgcmV0dXJuIHRoaXMuZmV0Y2hQcm9maWxlTWV0YUxpc3QoeyBzb2NrZXQsIHB1YmtleSB9KTtcbiAgfVxuXG4gIGZvcm1hdExpbmsoYSkge1xuICAgIGlmICh0aGlzLmlzVmlkZW8oYSkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkQ29udGVudE1lZGlhXCI+XG4gICAgICAgICAgPHZpZGVvIHNyYz17YX0gY29udHJvbHM+PC92aWRlbz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0ltYWdlKGEpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRDb250ZW50TWVkaWFcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImNhcmRDb250ZW50SW1hZ2VcIiBzcmM9e2F9IGFsdD1cIlwiPjwvaW1nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzWW91dHViZShhKSkge1xuICAgICAgaWYgKGEuaW5jbHVkZXMoXCIvd2F0Y2hcIikpIHtcbiAgICAgICAgYSA9IGEucmVwbGFjZShcIi93YXRjaFwiLCBcIi9lbWJlZFwiKTtcbiAgICAgICAgYSA9IGEucmVwbGFjZShcIj92PVwiLCBcIi9cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRDb250ZW50TWVkaWFcIj5cbiAgICAgICAgICA8aWZyYW1lIHNyYz17YX0+PC9pZnJhbWU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiIGhyZWY9e2F9PlxuICAgICAgICAgIHthfVxuICAgICAgICA8L2E+XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZUxpbmtSZWdpc3RlcihhKSB7XG4gICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHNwbGl0TGluayhsaW5rLCBlbGVtZW50TnVtYmVyKSB7XG4gICAgY29uc3QgbGlua0FycmF5ID0gbGluay5zcGxpdChcIj9cIik7XG4gICAgaWYgKGxpbmtBcnJheS5sZW5ndGggPiBlbGVtZW50TnVtYmVyKSB7XG4gICAgICByZXR1cm4gbGlua0FycmF5W2VsZW1lbnROdW1iZXJdO1xuICAgIH1cbiAgICByZXR1cm4gbGluaztcbiAgfVxuXG4gIGlzQW55RW5kV2l0aChsaW5rLCBleHRlbnNpb25zKSB7XG4gICAgcmV0dXJuIGV4dGVuc2lvbnMuc29tZShmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gbGluay5lbmRzV2l0aChleHRlbnNpb24pO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBbnlDb250YWlucyhsaW5rLCBrZXlXb3Jkcykge1xuICAgIHJldHVybiBrZXlXb3Jkcy5zb21lKGZ1bmN0aW9uIChrZXlXb3JkKSB7XG4gICAgICByZXR1cm4gbGluay5pbmNsdWRlcyhrZXlXb3JkKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzSW1hZ2UoYSkge1xuICAgIGNvbnN0IGxpbmsgPSB0aGlzLnNwbGl0TGluayh0aGlzLmNoYW5nZUxpbmtSZWdpc3RlcihhKSwgMCk7XG4gICAgcmV0dXJuIHRoaXMuaXNBbnlFbmRXaXRoKGxpbmssIElNQUdFX0ZJTEVfRVhURU5TSU9OUyk7XG4gIH1cblxuICBpc1ZpZGVvKGEpIHtcbiAgICBjb25zdCBsaW5rID0gdGhpcy5zcGxpdExpbmsodGhpcy5jaGFuZ2VMaW5rUmVnaXN0ZXIoYSksIDApO1xuICAgIHJldHVybiB0aGlzLmlzQW55RW5kV2l0aChsaW5rLCBWSURFT19GSUxFX0VYVEVOU0lPTlMpO1xuICB9XG5cbiAgaXNZb3V0dWJlKGEpIHtcbiAgICBjb25zdCBsaW5rID0gdGhpcy5zcGxpdExpbmsodGhpcy5jaGFuZ2VMaW5rUmVnaXN0ZXIoYSksIDApO1xuICAgIHJldHVybiB0aGlzLmlzQW55Q29udGFpbnMobGluaywgWU9VVFVCRV9LRVlfV09SRFMpO1xuICB9XG5cbiAgZm9ybWF0Q29udGVudCgpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUubm90ZS5jb250ZW50KSByZXR1cm4gXCJcIjtcblxuICAgIGNvbnN0IGZvcm1hdEV2ZW50TGluayA9IChub3RlSWQpID0+IHtcbiAgICAgIGNvbnN0IGxhYmVsID0gZm9ybWF0Tm90ZUlkKG5vdGVJZCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8YVxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiXG4gICAgICAgICAgaHJlZj17YGh0dHBzOi8vbm9zdHIuYmFuZC8ke25vdGVJZH1gfVxuICAgICAgICA+XG4gICAgICAgICAge2xhYmVsfVxuICAgICAgICA8L2E+XG4gICAgICApO1xuICAgIH07XG5cbiAgICBjb25zdCBmb3JtYXRQcm9maWxlTGluayA9IChucHViLCBwdWJrZXkpID0+IHtcbiAgICAgIGxldCBsYWJlbCA9IGZvcm1hdE5wdWIobnB1Yik7XG4gICAgICBpZiAocHVia2V5IGluIHRoaXMuc3RhdGUudGFnZ2VkUHJvZmlsZXMpIHtcbiAgICAgICAgY29uc3QgdHAgPSB0aGlzLnN0YXRlLnRhZ2dlZFByb2ZpbGVzW3B1YmtleV07XG4gICAgICAgIGxhYmVsID0gdHA/Lm5hbWUgfHwgdHA/LmRpc3BsYXlfbmFtZSB8fCBsYWJlbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxhXG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93XCJcbiAgICAgICAgICBocmVmPXtgaHR0cHM6Ly9ub3N0ci5iYW5kLyR7bnB1Yn1gfVxuICAgICAgICA+XG4gICAgICAgICAgQHtsYWJlbH1cbiAgICAgICAgPC9hPlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgbm90ZSA9IHRoaXMuc3RhdGUubm90ZTtcblxuICAgIGNvbnN0IE1lbnRpb25SZWdleCA9IC8oI1xcW1xcZCtcXF0pL2dpO1xuXG4gICAgLy8gZmlyc3QgLSBzcGxpdCBieSAjW2RdIG1lbnRpb25zXG4gICAgY29uc3QgZnJhZ21lbnRzID0gbm90ZS5jb250ZW50LnNwbGl0KE1lbnRpb25SZWdleCkubWFwKChtYXRjaCkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hUYWcgPSBtYXRjaC5tYXRjaCgvI1xcWyhcXGQrKVxcXS8pO1xuICAgICAgaWYgKG1hdGNoVGFnICYmIG1hdGNoVGFnLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBjb25zdCBpZHggPSBwYXJzZUludChtYXRjaFRhZ1sxXSk7XG4gICAgICAgIGlmIChpZHggPCBub3RlLnRhZ3MubGVuZ3RoICYmIG5vdGUudGFnc1tpZHhdLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgY29uc3QgcmVmID0gbm90ZS50YWdzW2lkeF07XG4gICAgICAgICAgc3dpdGNoIChyZWZbMF0pIHtcbiAgICAgICAgICAgIGNhc2UgXCJwXCI6IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFByb2ZpbGVMaW5rKGdldE5wdWIocmVmWzFdKSwgcmVmWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJlXCI6IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEV2ZW50TGluayhnZXROb3RlSWQocmVmWzFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwidFwiOiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93XCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9e2BodHRwczovL25vc3RyLmJhbmQvP3E9JTIzJHtyZWZbMV19YH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAje3JlZlsxXX1cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdW5zdXBwb3J0ZWQgI1tkXSByZWZcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfVxuXG4gICAgICAvLyBub3cgdHJ5IHNwbGl0dGluZyBieSBub3N0cjogbGlua3NcbiAgICAgIHJldHVybiBtYXRjaC5zcGxpdCgvKG5vc3RyOlthLXowLTldKykvZ2kpLm1hcCgobikgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaE5vc3RyID0gbi5tYXRjaCgvbm9zdHI6KFthLXowLTldKykvKTtcbiAgICAgICAgaWYgKG1hdGNoTm9zdHIgJiYgbWF0Y2hOb3N0ci5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBtYXRjaE5vc3RyWzFdLnN0YXJ0c1dpdGgoXCJub3RlMVwiKSB8fFxuICAgICAgICAgICAgbWF0Y2hOb3N0clsxXS5zdGFydHNXaXRoKFwibmV2ZW50MVwiKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gRklYTUUgYWRkIG5hZGRyIHRvb1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEV2ZW50TGluayhtYXRjaE5vc3RyWzFdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoTm9zdHIuc3RhcnRzV2l0aChcIm5wdWIxXCIpKSB7XG4gICAgICAgICAgICAvLyBGSVhNRSBhZGQgbnByb2ZpbGUgdG9vXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0UHJvZmlsZUxpbmsobWF0Y2hOb3N0clsxXSwgcGFyc2VOcHViKG1hdGNoTm9zdHJbMV0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB1bnN1cHBvcnRlZCBub3N0cjogbGlua1xuICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmluYWxseSwgc3BsaXQgYnkgdXJsc1xuICAgICAgICBjb25zdCB1cmxSZWdleCA9XG4gICAgICAgICAgLygoPzpodHRwfGZ0cHxodHRwcyk6XFwvXFwvKD86W1xcdys/LlxcdytdKSsoPzpbYS16QS1aMC05fiFAIyQlXiYqKClfXFwtPStcXFxcLz8uOjsnLF0qKT8oPzpbLUEtWmEtejAtOSsmQCMvJT1+X3xdKSkvaTtcbiAgICAgICAgcmV0dXJuIG4uc3BsaXQodXJsUmVnZXgpLm1hcCgoYSkgPT4ge1xuICAgICAgICAgIGlmIChhLm1hdGNoKC9eaHR0cHM/OlxcL1xcLy8pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRMaW5rKGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBmcmFnbWVudHM7XG4gIH1cblxuICBnZXREaWZmKCkge1xuICAgIGxldCBkaWZmO1xuICAgIGlmIChcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUudGFnZ2VkUHJvZmlsZXMpLmxlbmd0aCA+IDAgJiZcbiAgICAgIHRoaXMuc3RhdGUuY291bnRUYWdnZWRQcm9maWxlc1xuICAgICkge1xuICAgICAgZGlmZiA9XG4gICAgICAgIHRoaXMuc3RhdGUuY291bnRUYWdnZWRQcm9maWxlcyAtXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUudGFnZ2VkUHJvZmlsZXMpLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIGRpZmY7XG4gIH1cblxuICByZW5kZXJOb3RlKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzPVwibm9zdHJFbWJlZENhcmRcIj5cbiAgICAgICAgPFByb2ZpbGVcbiAgICAgICAgICBwcm9maWxlUGtleT17dGhpcy5zdGF0ZS5wcm9maWxlUGtleX1cbiAgICAgICAgICBwcm9maWxlPXt0aGlzLnN0YXRlLnByb2ZpbGV9XG4gICAgICAgICAgb3B0aW9ucz17dGhpcy5wcm9wcy5vcHRpb25zfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9e1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ub3RlLmVycm9yXG4gICAgICAgICAgICAgID8gXCJjYXJkQ29udGVudCBuZS10ZXh0LXJlZC04MDBcIlxuICAgICAgICAgICAgICA6IFwiY2FyZENvbnRlbnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLmZvcm1hdENvbnRlbnQoKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxNZXRhXG4gICAgICAgICAgbm90ZT17dGhpcy5zdGF0ZS5ub3RlfVxuICAgICAgICAgIGxpa2VzQ291bnQ9e3RoaXMuc3RhdGUubGlrZXNDb3VudH1cbiAgICAgICAgICByZXBsaWVzQ291bnQ9e3RoaXMuc3RhdGUucmVwbGllc0NvdW50fVxuICAgICAgICAgIHJlcG9zdHNDb3VudD17dGhpcy5zdGF0ZS5yZXBvc3RzQ291bnR9XG4gICAgICAgICAgemFwQW1vdW50PXt0aGlzLnN0YXRlLnphcEFtb3VudH1cbiAgICAgICAgICBvcHRpb25zPXt0aGlzLnByb3BzLm9wdGlvbnN9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUHJvZmlsZSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzcz1cIm5vc3RyRW1iZWRDYXJkXCI+XG4gICAgICAgIDxQcm9maWxlXG4gICAgICAgICAgcHJvZmlsZVBrZXk9e3RoaXMuc3RhdGUuaWR9XG4gICAgICAgICAgcHJvZmlsZT17dGhpcy5zdGF0ZS5wcm9maWxlfVxuICAgICAgICAgIG9wdGlvbnM9e3RoaXMucHJvcHMub3B0aW9uc31cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPXtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucHJvZmlsZS5lcnJvclxuICAgICAgICAgICAgICA/IFwiY2FyZENvbnRlbnQgbmUtdGV4dC1yZWQtODAwXCJcbiAgICAgICAgICAgICAgOiBcImNhcmRDb250ZW50XCJcbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5zdGF0ZS5wcm9maWxlPy53ZWJzaXRlID8gKFxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIFdlYnNpdGU6e1wiIFwifVxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGhyZWY9e3RoaXMuc3RhdGUucHJvZmlsZT8ud2Vic2l0ZX1cbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUucHJvZmlsZT8ud2Vic2l0ZX1cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICBcIlwiXG4gICAgICAgICAgKX1cbiAgICAgICAgICB7dGhpcy5zdGF0ZS5wcm9maWxlPy5hYm91dCB8fCBcIkxvYWRpbmcuLi5cIn1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxQcm9maWxlTWV0YVxuICAgICAgICAgIHByb2ZpbGU9e3RoaXMuc3RhdGUucHJvZmlsZX1cbiAgICAgICAgICBmb2xsb3dlcnNDb3VudD17dGhpcy5zdGF0ZS5mb2xsb3dlcnNDb3VudH1cbiAgICAgICAgICB6YXBBbW91bnQ9e3RoaXMuc3RhdGUuemFwQW1vdW50fVxuICAgICAgICAgIG9wdGlvbnM9e3RoaXMucHJvcHMub3B0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJQcm9maWxlc0xpc3QoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJub3N0ckVtYmVkQ2FyZFwiPlxuICAgICAgICA8UHJvZmlsZVxuICAgICAgICAgIHByb2ZpbGVQa2V5PXt0aGlzLnN0YXRlLmlkLmRhdGEucHVia2V5fVxuICAgICAgICAgIHByb2ZpbGU9e3RoaXMuc3RhdGUucHJvZmlsZX1cbiAgICAgICAgICBvcHRpb25zPXt0aGlzLnByb3BzLm9wdGlvbnN9XG4gICAgICAgIC8+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgzIGNsYXNzPVwiY2FyZFRpdGxlXCI+XG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5raW5kID09PSAyICYmIHRoaXMuc3RhdGUucHJvZmlsZXNMaXN0Lm5hbWVcbiAgICAgICAgICAgICAgPyB0aGlzLnN0YXRlLnByb2ZpbGVzTGlzdC5uYW1lXG4gICAgICAgICAgICAgIDogdGhpcy5zdGF0ZS5wcm9maWxlc0xpc3QuZH1cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLmtpbmQgPT09IDMgJiYgXCJGb2xsb3dpbmcgXCJ9KFxuICAgICAgICAgICAge3RoaXMuc3RhdGUudGFnZ2VkUHJvZmlsZXMgPyB0aGlzLnN0YXRlLmNvdW50VGFnZ2VkUHJvZmlsZXMgOiAwfSlcbiAgICAgICAgICA8L2gzPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLmtpbmQgPT09IDIgJiYgKFxuICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXJkRGVzY3JpcHRpb25cIj57dGhpcy5zdGF0ZS5wcm9maWxlc0xpc3QuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmRMaXN0XCI+XG4gICAgICAgICAgICB7T2JqZWN0LmtleXModGhpcy5zdGF0ZS50YWdnZWRQcm9maWxlcykubWFwKChwcm9maWxlUGtleSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtwcm9maWxlUGtleSArIFwidGFnZ2VkUHJvZmlsZVwifT5cbiAgICAgICAgICAgICAgICAgIDxQcm9maWxlXG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGVQa2V5PXtwcm9maWxlUGtleX1cbiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZT17dGhpcy5zdGF0ZS50YWdnZWRQcm9maWxlc1twcm9maWxlUGtleV19XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5jb3VudFRhZ2dlZFByb2ZpbGVzID4gMCAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb3VudFRhZ2dlZFByb2ZpbGVzID5cbiAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5zdGF0ZS50YWdnZWRQcm9maWxlcykubGVuZ3RoID8gKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlmZlByb2ZpbGVzXCI+XG4gICAgICAgICAgICAgICAgQW5kIHt0aGlzLmdldERpZmYoKX0gbW9yZSBwcm9maWxlcy5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxNZXRhXG4gICAgICAgICAgcHJvZmlsZXNMaXN0PXt0aGlzLnN0YXRlLnByb2ZpbGVzTGlzdH1cbiAgICAgICAgICBsaWtlc0NvdW50PXt0aGlzLnN0YXRlLmxpa2VzQ291bnR9XG4gICAgICAgICAgcmVwbGllc0NvdW50PXt0aGlzLnN0YXRlLnJlcGxpZXNDb3VudH1cbiAgICAgICAgICByZXBvc3RzQ291bnQ9e3RoaXMuc3RhdGUucmVwb3N0c0NvdW50fVxuICAgICAgICAgIHphcEFtb3VudD17dGhpcy5zdGF0ZS56YXBBbW91bnR9XG4gICAgICAgICAgb3B0aW9ucz17dGhpcy5wcm9wcy5vcHRpb25zfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUua2luZCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJQcm9maWxlKCk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlck5vdGUoKTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUHJvZmlsZXNMaXN0KCk7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclByb2ZpbGVzTGlzdCgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOb3N0ckVtYmVkO1xuIiwiaW1wb3J0IHsgaCwgcmVuZGVyIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCBOb3N0ckVtYmVkIGZyb20gJy4vY29tcG9uZW50cy9ub3N0ckVtYmVkJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoaWQsIHdyYXBwZXIsIHJlbGF5LCBvcHRpb25zKSB7XG5cbiAgaWYgKCFyZWxheSlcbiAgICByZWxheSA9ICd3c3M6Ly9yZWxheS5ub3N0ci5iYW5kLyc7XG5cbiAgY29uc3QgcmVuZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iod3JhcHBlcilcbiAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iod3JhcHBlcilcbiAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuICByZW5kZXIoaChOb3N0ckVtYmVkLCB7IGlkLCByZWxheSwgb3B0aW9ucyB9KSwgcmVuZGVyRWxlbWVudCk7XG59XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsImxlYWZQcm90b3R5cGVzIiwiZ2V0UHJvdG8iLCJhc3NlcnROdW1iZXIiLCJuIiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsIkVycm9yIiwiY2hhaW4iLCJhcmdzIiwid3JhcCIsImEiLCJiIiwiYyIsImVuY29kZSIsIkFycmF5IiwiZnJvbSIsInJldmVyc2UiLCJyZWR1Y2UiLCJhY2MiLCJpIiwidW5kZWZpbmVkIiwiZGVjb2RlIiwiYWxwaGFiZXQiLCJkaWdpdHMiLCJpc0FycmF5IiwibGVuZ3RoIiwibWFwIiwiaW5wdXQiLCJsZXR0ZXIiLCJpbmRleCIsImluZGV4T2YiLCJqb2luIiwic2VwYXJhdG9yIiwidG8iLCJzcGxpdCIsInBhZGRpbmciLCJiaXRzIiwiY2hyIiwiZGF0YSIsInB1c2giLCJlbmQiLCJzbGljZSIsIm5vcm1hbGl6ZSIsImZuIiwiY29udmVydFJhZGl4IiwicG9zIiwicmVzIiwiZm9yRWFjaCIsImQiLCJjYXJyeSIsImRvbmUiLCJkaWdpdCIsImRpZ2l0QmFzZSIsIk1hdGgiLCJmbG9vciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJieXRlcyIsInN0cmluZ1RvQnl0ZXMiLCJzdHIiLCJieXRlc1RvU3RyaW5nIiwiaGV4IiwidXRmOCIsImJlY2gzMm0iLCJiZWNoMzIiLCJiYXNlNThjaGVjayIsImJhc2U1OHhtciIsImJhc2U1OHhycCIsImJhc2U1OGZsaWNrciIsImJhc2U1OCIsImJhc2U2NHVybCIsImJhc2U2NCIsImJhc2UzMmNyb2NrZm9yZCIsImJhc2UzMmhleCIsImJhc2UzMiIsImJhc2UxNiIsInV0aWxzIiwiZ2NkIiwicmFkaXgyY2FycnkiLCJjb252ZXJ0UmFkaXgyIiwibWFzayIsInJhZGl4IiwibnVtIiwiVWludDhBcnJheSIsInJhZGl4MiIsInJldlBhZGRpbmciLCJ1bnNhZmVXcmFwcGVyIiwiYXBwbHkiLCJlIiwiY2hlY2tzdW0iLCJsZW4iLCJzZXQiLCJwYXlsb2FkIiwibmV3Q2hlY2tzdW0iLCJvbGRDaGVja3N1bSIsInMiLCJ0b1VwcGVyQ2FzZSIsInJlcGxhY2UiLCJnZW5CYXNlNTgiLCJhYmMiLCJYTVJfQkxPQ0tfTEVOIiwiYmxvY2siLCJzdWJhcnJheSIsInBhZFN0YXJ0IiwiYmxvY2tMZW4iLCJqIiwiY29uY2F0Iiwic2hhMjU2IiwiQkVDSF9BTFBIQUJFVCIsIlBPTFlNT0RfR0VORVJBVE9SUyIsImJlY2gzMlBvbHltb2QiLCJwcmUiLCJjaGsiLCJiZWNoQ2hlY2tzdW0iLCJwcmVmaXgiLCJ3b3JkcyIsImVuY29kaW5nQ29uc3QiLCJjaGFyQ29kZUF0IiwidiIsImdlbkJlY2gzMiIsImVuY29kaW5nIiwiRU5DT0RJTkdfQ09OU1QiLCJfd29yZHMiLCJmcm9tV29yZHMiLCJ0b1dvcmRzIiwiZnJvbVdvcmRzVW5zYWZlIiwibGltaXQiLCJUeXBlRXJyb3IiLCJsb3dlcmVkIiwidG9Mb3dlckNhc2UiLCJzZXBJbmRleCIsImxhc3RJbmRleE9mIiwic3VtIiwiZW5kc1dpdGgiLCJhY3R1YWxMZW5ndGgiLCJkZWNvZGVUb0J5dGVzIiwiZGVjb2RlVW5zYWZlIiwiVGV4dERlY29kZXIiLCJUZXh0RW5jb2RlciIsIkNPREVSUyIsImNvZGVyVHlwZUVycm9yIiwia2V5cyIsInR5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIkFMUEhBQkVUIiwiQUxQSEFCRVRfTUFQIiwieiIsIngiLCJjaGFyQXQiLCJwb2x5bW9kU3RlcCIsInByZWZpeENoayIsImNvbnZlcnQiLCJpbkJpdHMiLCJvdXRCaXRzIiwicGFkIiwibWF4ViIsInJlc3VsdCIsImdldExpYnJhcnlGcm9tRW5jb2RpbmciLCJfX2RlY29kZSIsIkxJTUlUIiwidXBwZXJlZCIsIndvcmRDaGFycyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaWQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlTWFwcGluZyIsIkRFRkFVTFRORVRXT1JLIiwicHViS2V5SGFzaCIsInNjcmlwdEhhc2giLCJ2YWxpZFdpdG5lc3NWZXJzaW9ucyIsIlRFU1RORVRXT1JLIiwiUkVHVEVTVE5FVFdPUksiLCJTSU1ORVRXT1JLIiwiRkVBVFVSRUJJVF9PUkRFUiIsIkRJVklTT1JTIiwibSIsIkJpZ0ludCIsInUiLCJwIiwiTUFYX01JTExJU0FUUyIsIk1JTExJU0FUU19QRVJfQlRDIiwiVEFHQ09ERVMiLCJwYXltZW50X2hhc2giLCJwYXltZW50X3NlY3JldCIsImRlc2NyaXB0aW9uIiwicGF5ZWUiLCJkZXNjcmlwdGlvbl9oYXNoIiwiZXhwaXJ5IiwibWluX2ZpbmFsX2NsdHZfZXhwaXJ5IiwiZmFsbGJhY2tfYWRkcmVzcyIsInJvdXRlX2hpbnQiLCJmZWF0dXJlX2JpdHMiLCJtZXRhZGF0YSIsIlRBR05BTUVTIiwiY3VycmVudE5hbWUiLCJjdXJyZW50Q29kZSIsIlRBR1BBUlNFUlMiLCJ3b3Jkc1RvSW50QkUiLCJyb3V0ZXMiLCJwdWJrZXkiLCJzaG9ydENoYW5uZWxJZCIsImZlZUJhc2VNU2F0cyIsImZlZVByb3BvcnRpb25hbE1pbGxpb250aHMiLCJjbHR2RXhwaXJ5RGVsdGEiLCJyb3V0ZXNCdWZmZXIiLCJwYXJzZUludCIsInNob3J0X2NoYW5uZWxfaWQiLCJmZWVfYmFzZV9tc2F0IiwiZmVlX3Byb3BvcnRpb25hbF9taWxsaW9udGhzIiwiY2x0dl9leHBpcnlfZGVsdGEiLCJib29scyIsIndvcmQiLCJmaW5hbEFyciIsIml0ZW1BcnIiLCJmZWF0dXJlQml0cyIsImZlYXR1cmVOYW1lIiwic3RhdHVzIiwiZXh0cmFCaXRzIiwiZXh0cmFfYml0cyIsInN0YXJ0X2JpdCIsImhhc19yZXF1aXJlZCIsImJpdCIsImdldFVua25vd25QYXJzZXIiLCJ0YWdDb2RlIiwiTUFYX1NBRkVfSU5URUdFUiIsInRvdGFsIiwicG93IiwiaHJwVG9NaWxsaXNhdCIsImhycFN0cmluZyIsIm91dHB1dFN0cmluZyIsImRpdmlzb3IiLCJtYXRjaCIsInZhbHVlQk4iLCJtaWxsaXNhdG9zaGlzQk4iLCJwYXltZW50UmVxdWVzdCIsIm5ldHdvcmsiLCJzZWN0aW9ucyIsImRlY29kZWQiLCJsZXR0ZXJzIiwic2lnV29yZHMiLCJwcmVmaXhNYXRjaGVzIiwibmFtZSIsImJlY2gzMlByZWZpeCIsImNvaW5OZXR3b3JrIiwibWlsbGlzYXRvc2hpcyIsInRpbWVzdGFtcCIsInRhZ05hbWUiLCJwYXJzZXIiLCJ0YWdMZW5ndGgiLCJ0YWdXb3JkcyIsInRhZyIsImV4cCIsImZpbmQiLCJnZXRWYWx1ZSIsInJvdXRlX2hpbnRzIiwiZmlsdGVyIiwiZ2V0Iiwic2VjdGlvbiIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImdldFByb3RvdHlwZU9mIiwidCIsIm1vZGUiLCJ0aGVuIiwibnMiLCJjcmVhdGUiLCJyIiwiZGVmIiwiY3VycmVudCIsImdldE93blByb3BlcnR5TmFtZXMiLCJrZXkiLCJkZWZpbml0aW9uIiwibyIsImVudW1lcmFibGUiLCJwcm9wIiwicHJvdG90eXBlIiwiY2FsbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibmMiLCJmIiwiaCIsImwiLCJ5IiwiYXJndW1lbnRzIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJwcm9wcyIsInJlZiIsIl9fayIsIl9fIiwiX19iIiwiX19lIiwiX19kIiwiX19jIiwiX19oIiwiY29uc3RydWN0b3IiLCJfX3YiLCJ2bm9kZSIsImNvbnRleHQiLCJnIiwidyIsIl9fciIsImRlYm91bmNlUmVuZGVyaW5nIiwic29ydCIsInNoaWZ0IiwiX19QIiwiTCIsIl9fbiIsIm93bmVyU1ZHRWxlbWVudCIsIk0iLCJQIiwiXyIsIkMiLCIkIiwiQSIsIm5leHRTaWJsaW5nIiwicSIsIk8iLCJpbnNlcnRCZWZvcmUiLCJJIiwic2V0UHJvcGVydHkiLCJ0ZXN0IiwiVCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJTIiwiSCIsImNvbnRleHRUeXBlIiwiX19FIiwicmVuZGVyIiwiQiIsInN1YiIsInN0YXRlIiwiX3NiIiwiX19zIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdldENoaWxkQ29udGV4dCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiTiIsImRpZmZlZCIsInNvbWUiLCJsb2NhbE5hbWUiLCJub2RlVHlwZSIsImNyZWF0ZUVsZW1lbnROUyIsImlzIiwiY2hpbGROb2RlcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiaW5uZXJIVE1MIiwiY2hlY2tlZCIsInVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkQiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwiZm9yY2VVcGRhdGUiLCJQcm9taXNlIiwiYmluZCIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiXzBuIiwiXzFuIiwiXzJuIiwiXzNuIiwiXzhuIiwiQ1VSVkUiLCJmcmVlemUiLCJHeCIsIkd5IiwiYmV0YSIsImRpdk5lYXJlc3QiLCJlbmRvIiwic3BsaXRTY2FsYXIiLCJhMSIsImIxIiwiYTIiLCJiMiIsIlBPV18yXzEyOCIsImMxIiwiYzIiLCJrMSIsIm1vZCIsImsyIiwiazFuZWciLCJrMm5lZyIsImZpZWxkTGVuIiwiZ3JvdXBMZW4iLCJjb21wcmVzc2VkTGVuIiwidW5jb21wcmVzc2VkTGVuIiwid2VpZXJzdHJhc3MiLCJ4MiIsIngzIiwiVVNFX0VORE9NT1JQSElTTSIsIlNoYUVycm9yIiwibWVzc2FnZSIsInN1cGVyIiwiYXNzZXJ0SmFjUG9pbnQiLCJvdGhlciIsIkphY29iaWFuUG9pbnQiLCJzdGF0aWMiLCJQb2ludCIsImVxdWFscyIsIlpFUk8iLCJwb2ludHMiLCJ0b0ludiIsIm51bXMiLCJzY3JhdGNoIiwibGFzdE11bHRpcGxpZWQiLCJpbnZlcnRlZCIsImludmVydCIsInJlZHVjZVJpZ2h0IiwiaW52ZXJ0QmF0Y2giLCJ0b0FmZmluZSIsInRvQWZmaW5lQmF0Y2giLCJmcm9tQWZmaW5lIiwiWDEiLCJZMSIsIloxIiwiWDIiLCJZMiIsIloyIiwiWjFaMSIsIloyWjIiLCJVMSIsIlUyIiwiUzEiLCJTMiIsIm5lZ2F0ZSIsImRvdWJsZSIsIngxYiIsIkUiLCJGIiwiWDMiLCJZMyIsIlozIiwiYWRkIiwiSEgiLCJISEgiLCJWIiwic3VidHJhY3QiLCJtdWx0aXBseVVuc2FmZSIsInNjYWxhciIsIlAwIiwibm9ybWFsaXplU2NhbGFyIiwiazFwIiwiazJwIiwicHJlY29tcHV0ZVdpbmRvdyIsIlciLCJ3aW5kb3dzIiwid05BRiIsImFmZmluZVBvaW50IiwiQkFTRSIsIl9XSU5ET1dfU0laRSIsInByZWNvbXB1dGVzIiwicG9pbnRQcmVjb21wdXRlcyIsIm5vcm1hbGl6ZVoiLCJ3aW5kb3dTaXplIiwibWF4TnVtYmVyIiwic2hpZnRCeSIsIm9mZnNldCIsIndiaXRzIiwib2Zmc2V0MSIsIm9mZnNldDIiLCJhYnMiLCJjb25kMSIsImNvbmQyIiwiY29uc3RUaW1lTmVnYXRlIiwibXVsdGlwbHkiLCJwb2ludCIsImZha2UiLCJmMXAiLCJmMnAiLCJpbnZaIiwiaXMwIiwiaXoxIiwiaXoyIiwiaXozIiwiYXgiLCJheSIsInp6IiwiY29uZGl0aW9uIiwibmVnIiwiV2Vha01hcCIsIl9zZXRXaW5kb3dTaXplIiwiZGVsZXRlIiwiaGFzRXZlblkiLCJpc1Nob3J0IiwiYnl0ZXNUb051bWJlciIsImlzVmFsaWRGaWVsZEVsZW1lbnQiLCJfNm4iLCJfMTFuIiwiXzIybiIsIl8yM24iLCJfNDRuIiwiXzg4biIsImIzIiwiYjYiLCJwb3cyIiwiYjkiLCJiMTEiLCJiMjIiLCJiNDQiLCJiODgiLCJiMTc2IiwiYjIyMCIsImIyMjMiLCJ0MSIsInQyIiwicnQiLCJ4YyIsInNxcnRNb2QiLCJpc1lPZGQiLCJhc3NlcnRWYWxpZGl0eSIsImVuc3VyZUJ5dGVzIiwiaGVhZGVyIiwiZnJvbUNvbXByZXNzZWRIZXgiLCJmcm9tVW5jb21wcmVzc2VkSGV4IiwicHJpdmF0ZUtleSIsIm5vcm1hbGl6ZVByaXZhdGVLZXkiLCJtc2dIYXNoIiwic2lnbmF0dXJlIiwicmVjb3ZlcnkiLCJub3JtYWxpemVTaWduYXR1cmUiLCJpbmNsdWRlcyIsInRydW5jYXRlSGFzaCIsInJhZGoiLCJyaW52IiwidTEiLCJ1MiIsIlIiLCJmcm9tSGV4IiwibnVtVG8zMmJTdHIiLCJRIiwibXVsdGlwbHlBbmRBZGRVbnNhZmUiLCJ0b1Jhd0J5dGVzIiwiaXNDb21wcmVzc2VkIiwiaGV4VG9CeXRlcyIsInRvSGV4IiwidG9IZXhYIiwidG9SYXdYIiwibXNnIiwibGVmdCIsImFQIiwiYlEiLCJzbGljZURFUiIsInBhcnNlREVSSW50IiwiYnl0ZXNUb0hleCIsIlNpZ25hdHVyZSIsImFyciIsImhleFRvTnVtYmVyIiwic0J5dGVzIiwickJ5dGVzTGVmdCIsInBhcnNlREVSU2lnbmF0dXJlIiwiZnJvbURFUiIsImlzV2l0aGluQ3VydmVPcmRlciIsImhhc0hpZ2hTIiwiSEFMRiIsIm5vcm1hbGl6ZVMiLCJ0b0RFUlJhd0J5dGVzIiwidG9ERVJIZXgiLCJzSGV4IiwibnVtYmVyVG9IZXhVbnBhZGRlZCIsInJIZXgiLCJzSGV4TCIsInJIZXhMIiwic0xlbiIsInJMZW4iLCJ0b0NvbXBhY3RSYXdCeXRlcyIsInRvQ29tcGFjdEhleCIsImNvbmNhdEJ5dGVzIiwiYXJyYXlzIiwiZXZlcnkiLCJoZXhlcyIsInVpbnQ4YSIsIlBPV18yXzI1NiIsIm51bVRvMzJiIiwiYXJyYXkiLCJoZXhCeXRlIiwiYnl0ZSIsImlzTmFOIiwicG93ZXIiLCJudW1iZXIiLCJtb2R1bG8iLCJoYXNoIiwidHJ1bmNhdGVPbmx5IiwiZGVsdGEiLCJiaXRzMmludF8yIiwiX3NoYTI1NlN5bmMiLCJfaG1hY1NoYTI1NlN5bmMiLCJub3JtYWxpemVQdWJsaWNLZXkiLCJwdWJsaWNLZXkiLCJlcnJvciIsImZyb21Db21wYWN0Iiwic2Nobm9yckNoYWxsZW5nZUZpbmFsaXplIiwiY2giLCJTY2hub3JyU2lnbmF0dXJlIiwiSW50ZXJuYWxTY2hub3JyU2lnbmF0dXJlIiwiYXV4UmFuZCIsInJhbmRvbUJ5dGVzIiwiZ2V0U2NhbGFyIiwicHgiLCJyYW5kIiwicHJpdiIsImZyb21Qcml2YXRlS2V5IiwiaW5pdE5vbmNlIiwidDBoIiwiZmluYWxpemVOb25jZSIsImswaCIsImswIiwicngiLCJmaW5hbGl6ZVNpZyIsImFzeW5jIiwidGFnZ2VkSGFzaCIsIlRBR1MiLCJhdXgiLCJjaGFsbGVuZ2UiLCJzaWciLCJzY2hub3JyVmVyaWZ5IiwiY2FsY1N5bmMiLCJ0YWdnZWRIYXNoU3luYyIsInNjaG5vcnJWZXJpZnlTeW5jIiwiaW5pdFNjaG5vcnJWZXJpZnkiLCJyYXciLCJmaW5hbGl6ZVNjaG5vcnJWZXJpZnkiLCJzY2hub3JyIiwiZ2V0UHVibGljS2V5Iiwic2lnbiIsInByaXZLZXkiLCJjYWxjIiwidmVyaWZ5Iiwic2lnblN5bmMiLCJ2ZXJpZnlTeW5jIiwibm9kZSIsIndlYiIsInNlbGYiLCJjcnlwdG8iLCJUQUdHRURfSEFTSF9QUkVGSVhFUyIsImlzVmFsaWRQcml2YXRlS2V5IiwiX2JpZ2ludFRvMzJCeXRlcyIsIl9ub3JtYWxpemVQcml2YXRlS2V5IiwiaGFzaFRvUHJpdmF0ZUtleSIsIm1pbkxlbiIsImJ5dGVzTGVuZ3RoIiwiZ2V0UmFuZG9tVmFsdWVzIiwicmFuZG9tUHJpdmF0ZUtleSIsInByZWNvbXB1dGUiLCJjYWNoZWQiLCJtZXNzYWdlcyIsImJ1ZmZlciIsInN1YnRsZSIsImRpZ2VzdCIsImNyZWF0ZUhhc2giLCJobWFjU2hhMjU2IiwiY2tleSIsImltcG9ydEtleSIsImNyZWF0ZUhtYWMiLCJzaGEyNTZTeW5jIiwiaG1hY1NoYTI1NlN5bmMiLCJ0YWdQIiwidGFnSCIsIl9KYWNvYmlhblBvaW50IiwiZGVmaW5lUHJvcGVydGllcyIsImNvbmZpZ3VyYWJsZSIsInZhbCIsInV0ZjhEZWNvZGVyIiwic3Vic3RyIiwiZ2V0Tm90ZUlkIiwiaGV4SWQiLCJiYiIsImdldE5wdWIiLCJoZXhQdWJrZXkiLCJwYXJzZU5wdWIiLCJucHViIiwiZm9ybWF0TnB1YiIsImZvcm1hdFphcEFtb3VudCIsInJvdW5kIiwiX19IIiwiX19WIiwiX19OIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJfX3NvdXJjZSIsIl9fc2VsZiIsIl9yZWYiLCJhZGRpdGlvbmFsQ2xhc3NlcyIsImNsYXNzZXMiLCJfanN4IiwieG1sbnMiLCJmaWxsIiwidmlld0JveCIsInN0cm9rZSIsIndpZHRoIiwiaGVpZ2h0IiwiY2xhc3MiLCJpY29uQ2xhc3NlcyIsImRpc3BsYXlUZXh0IiwiY29weVRleHQiLCJidG5DbGFzc2VzIiwic2V0QnRuQ2xhc3NlcyIsInVzZVN0YXRlIiwiX2pzeHMiLCJvbkNsaWNrIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwidHJpbSIsImVyciIsImNvbnNvbGUiLCJjb3B5VG9DbGlwYm9hcmQiLCJDb3B5SWNvbiIsImRhdGUiLCJlbmNvZGVkSWQiLCJmb3JtYXR0ZWREYXRlIiwiZm9ybWF0dGVkWmFwQW1vdW50Iiwibm90ZSIsInByb2ZpbGVzTGlzdCIsInJlcGxpZXNDb3VudCIsInJlcG9zdHNDb3VudCIsImxpa2VzQ291bnQiLCJ6YXBBbW91bnQiLCJjcmVhdGVkQXQiLCJjcmVhdGVkX2F0IiwiRGF0ZSIsInRvTG9jYWxlVGltZVN0cmluZyIsImhvdXIxMiIsImhvdXIiLCJtaW51dGUiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJzaG93WmFwcyIsImNsYXNzTmFtZSIsInRpdGxlIiwiQm9sdEljb24iLCJSZXBseUljb24iLCJSZXBvc3RJY29uIiwiSGVhcnRJY29uIiwicmVsIiwiaHJlZiIsIm5hZGRyIiwiTGlua0ljb24iLCJzaG93Q29weUFkZHIiLCJDb3B5VGV4dCIsInRodW1ibmFpbCIsImZ1bGxJbWFnZSIsImlzRnVsbEltYWdlTG9hZGVkIiwic2V0SXNGdWxsSW1hZ2VMb2FkZWQiLCJpbWFnZVNyYyIsInNldEltYWdlU3JjIiwic3JjIiwib25FcnJvciIsImNhY2hlZFByb2ZpbGVQaWN0dXJlIiwiZW5jb2RlZFByb2ZpbGVQa2V5IiwidHJ1bmNhdGVkUHJvZmlsZVBrZXkiLCJwcm9maWxlUGtleSIsInByb2ZpbGUiLCJwaWN0dXJlIiwiUHJvZmlsZUltYWdlIiwiZGlzcGxheV9uYW1lIiwiS2V5SWNvbiIsImhpZGVOb3N0cmljaCIsIk5vc3RyaWNoSWNvbiIsImZvbGxvd2Vyc0NvdW50IiwiRm9sbG93ZXJzSWNvbiIsIklNQUdFX0ZJTEVfRVhURU5TSU9OUyIsIlZJREVPX0ZJTEVfRVhURU5TSU9OUyIsIllPVVRVQkVfS0VZX1dPUkRTIiwiQ29tcG9uZW50Iiwia2luZCIsInN0YXJ0c1dpdGgiLCJub3RlSWQiLCJwYXJzZU5vdGVJZCIsInRsdiIsInJlc3QiLCJwYXJzZVRMViIsInJlbGF5cyIsInBhcnNlTmFkZHIiLCJyZWxheSIsInRhZ2dlZFByb2ZpbGVzIiwiY291bnRUYWdnZWRQcm9maWxlcyIsInN0cmluZyIsInNlY3AiLCJoYXNoQnVmZmVyIiwidGFncyIsInZlcmlmeU5vc3RyU2lnbmF0dXJlIiwiZ2V0Tm9zdHJFdmVudElEIiwiZXYiLCJ2YWxpZGF0ZU5vc3RyRXZlbnQiLCJzdGFydCIsInNvY2tldCIsImZldGNoUHJvZmlsZSIsImZldGNoTm90ZSIsImZldGNoUHJvZmlsZXNMaXN0IiwiX19ub3N0ckVtYmVkIiwic29ja2V0cyIsInJlYWR5U3RhdGUiLCJzdGFydHMiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJsb2ciLCJ1cmwiLCJvbmVycm9yIiwic3VicyIsIm9ubWVzc2FnZSIsInBhcnNlIiwib25fZXZlbnQiLCJvbl9jb3VudCIsInN1YnNjcmliZSIsIm9rIiwicmFuZG9tIiwicmVxIiwic2VuZCIsImNsb3NlIiwic3ViX2lkIiwiZXZlbnRzIiwicXVldWUiLCJpc1ZhbGlkRXZlbnQiLCJsaXN0RXZlbnRzIiwiX3JlZjIiLCJjb3VudEV2ZW50cyIsIl9yZWYzIiwiZ2V0RXZlbnQiLCJfcmVmNCIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsImlkcyIsImtpbmRzIiwiZmV0Y2hNZXRhIiwiZmV0Y2hUYWdzIiwiY2F0Y2giLCJfcmVmOCIsImF1dGhvcnMiLCJwYXJzZWRQcm9maWxlIiwiZmV0Y2hQcm9maWxlTWV0YSIsImFib3V0IiwiX3JlZjkiLCJwcm9maWxlc0xpc3RPYmoiLCJnZXRQcm9maWxlc0xpc3RPYmoiLCJfcmVmMTAiLCJnZXRaYXBBbW91bnQiLCJlciIsIm9uTGlzdE1ldGFFdmVudHMiLCJub3RlRXZlbnQiLCJfcmVmMTEiLCJmZXRjaE1ldGFDb3VudCIsImZldGNoTWV0YUxpc3QiLCJfcmVmMTIiLCJnZXRTdWIiLCJfcmVmMTMiLCJnZXRTdWJPbkZldGNoTWV0YUxpc3QiLCJfcmVmMTQiLCJvbkxpc3RQcm9maWxlTWV0YUV2ZW50cyIsImZldGNoUHJvZmlsZU1ldGFDb3VudCIsIl9yZWYxNSIsImZldGNoUHJvZmlsZU1ldGFMaXN0IiwiX3JlZjE2IiwiX3JlZjE3IiwiZm9ybWF0TGluayIsImlzVmlkZW8iLCJjb250cm9scyIsImlzSW1hZ2UiLCJhbHQiLCJpc1lvdXR1YmUiLCJjaGFuZ2VMaW5rUmVnaXN0ZXIiLCJzcGxpdExpbmsiLCJsaW5rIiwiZWxlbWVudE51bWJlciIsImxpbmtBcnJheSIsImlzQW55RW5kV2l0aCIsImV4dGVuc2lvbnMiLCJleHRlbnNpb24iLCJpc0FueUNvbnRhaW5zIiwia2V5V29yZHMiLCJrZXlXb3JkIiwiZm9ybWF0Q29udGVudCIsImZvcm1hdEV2ZW50TGluayIsImxhYmVsIiwiZm9ybWF0Tm90ZUlkIiwiZm9ybWF0UHJvZmlsZUxpbmsiLCJ0cCIsImZyYWdtZW50cyIsIm1hdGNoVGFnIiwiaWR4IiwibWF0Y2hOb3N0ciIsImdldERpZmYiLCJkaWZmIiwicmVuZGVyTm90ZSIsIlByb2ZpbGUiLCJNZXRhIiwicmVuZGVyUHJvZmlsZSIsIndlYnNpdGUiLCJQcm9maWxlTWV0YSIsInJlbmRlclByb2ZpbGVzTGlzdCIsImluaXQiLCJ3cmFwcGVyIiwicmVuZGVyRWxlbWVudCIsIk5vc3RyRW1iZWQiXSwic291cmNlUm9vdCI6IiJ9